// Generated by ProtoGen, Version=2.4.1.473, Culture=neutral, PublicKeyToken=55f7125234beb589.  DO NOT EDIT!
#pragma warning disable 1591, 0612
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace dfproto {
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public static partial class Basic {
  
    #region Extension registration
    public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
    }
    #endregion
    #region Static variables
    #endregion
    #region Extensions
    internal static readonly object Descriptor;
    static Basic() {
      Descriptor = null;
    }
    #endregion
    
  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class EnumItemName : pb::GeneratedMessageLite<EnumItemName, EnumItemName.Builder> {
    private EnumItemName() { }
    private static readonly EnumItemName defaultInstance = new EnumItemName().MakeReadOnly();
    private static readonly string[] _enumItemNameFieldNames = new string[] { "bit_size", "name", "value" };
    private static readonly uint[] _enumItemNameFieldTags = new uint[] { 24, 18, 8 };
    public static EnumItemName DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override EnumItemName DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override EnumItemName ThisMessage {
      get { return this; }
    }
    
    public const int ValueFieldNumber = 1;
    private bool hasValue;
    private int value_;
    public bool HasValue {
      get { return hasValue; }
    }
    public int Value {
      get { return value_; }
    }
    
    public const int NameFieldNumber = 2;
    private bool hasName;
    private string name_ = "";
    public bool HasName {
      get { return hasName; }
    }
    public string Name {
      get { return name_; }
    }
    
    public const int BitSizeFieldNumber = 3;
    private bool hasBitSize;
    private int bitSize_ = 1;
    public bool HasBitSize {
      get { return hasBitSize; }
    }
    public int BitSize {
      get { return bitSize_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasValue) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _enumItemNameFieldNames;
      if (hasValue) {
        output.WriteInt32(1, field_names[2], Value);
      }
      if (hasName) {
        output.WriteString(2, field_names[1], Name);
      }
      if (hasBitSize) {
        output.WriteInt32(3, field_names[0], BitSize);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasValue) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, Value);
        }
        if (hasName) {
          size += pb::CodedOutputStream.ComputeStringSize(2, Name);
        }
        if (hasBitSize) {
          size += pb::CodedOutputStream.ComputeInt32Size(3, BitSize);
        }
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasValue) hash ^= value_.GetHashCode();
      if (hasName) hash ^= name_.GetHashCode();
      if (hasBitSize) hash ^= bitSize_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      EnumItemName other = obj as EnumItemName;
      if (other == null) return false;
      if (hasValue != other.hasValue || (hasValue && !value_.Equals(other.value_))) return false;
      if (hasName != other.hasName || (hasName && !name_.Equals(other.name_))) return false;
      if (hasBitSize != other.hasBitSize || (hasBitSize && !bitSize_.Equals(other.bitSize_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("value", hasValue, value_, writer);
      PrintField("name", hasName, name_, writer);
      PrintField("bit_size", hasBitSize, bitSize_, writer);
    }
    #endregion
    
    public static EnumItemName ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static EnumItemName ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static EnumItemName ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static EnumItemName ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static EnumItemName ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static EnumItemName ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static EnumItemName ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static EnumItemName ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static EnumItemName ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static EnumItemName ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private EnumItemName MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(EnumItemName prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilderLite<EnumItemName, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(EnumItemName cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private EnumItemName result;
      
      private EnumItemName PrepareBuilder() {
        if (resultIsReadOnly) {
          EnumItemName original = result;
          result = new EnumItemName();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override EnumItemName MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override EnumItemName DefaultInstanceForType {
        get { return global::dfproto.EnumItemName.DefaultInstance; }
      }
      
      public override EnumItemName BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is EnumItemName) {
          return MergeFrom((EnumItemName) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(EnumItemName other) {
        if (other == global::dfproto.EnumItemName.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasValue) {
          Value = other.Value;
        }
        if (other.HasName) {
          Name = other.Name;
        }
        if (other.HasBitSize) {
          BitSize = other.BitSize;
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_enumItemNameFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _enumItemNameFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasValue = input.ReadInt32(ref result.value_);
              break;
            }
            case 18: {
              result.hasName = input.ReadString(ref result.name_);
              break;
            }
            case 24: {
              result.hasBitSize = input.ReadInt32(ref result.bitSize_);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasValue {
        get { return result.hasValue; }
      }
      public int Value {
        get { return result.Value; }
        set { SetValue(value); }
      }
      public Builder SetValue(int value) {
        PrepareBuilder();
        result.hasValue = true;
        result.value_ = value;
        return this;
      }
      public Builder ClearValue() {
        PrepareBuilder();
        result.hasValue = false;
        result.value_ = 0;
        return this;
      }
      
      public bool HasName {
        get { return result.hasName; }
      }
      public string Name {
        get { return result.Name; }
        set { SetName(value); }
      }
      public Builder SetName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasName = true;
        result.name_ = value;
        return this;
      }
      public Builder ClearName() {
        PrepareBuilder();
        result.hasName = false;
        result.name_ = "";
        return this;
      }
      
      public bool HasBitSize {
        get { return result.hasBitSize; }
      }
      public int BitSize {
        get { return result.BitSize; }
        set { SetBitSize(value); }
      }
      public Builder SetBitSize(int value) {
        PrepareBuilder();
        result.hasBitSize = true;
        result.bitSize_ = value;
        return this;
      }
      public Builder ClearBitSize() {
        PrepareBuilder();
        result.hasBitSize = false;
        result.bitSize_ = 1;
        return this;
      }
    }
    static EnumItemName() {
      object.ReferenceEquals(global::dfproto.Basic.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class BasicMaterialId : pb::GeneratedMessageLite<BasicMaterialId, BasicMaterialId.Builder> {
    private BasicMaterialId() { }
    private static readonly BasicMaterialId defaultInstance = new BasicMaterialId().MakeReadOnly();
    private static readonly string[] _basicMaterialIdFieldNames = new string[] { "index", "type" };
    private static readonly uint[] _basicMaterialIdFieldTags = new uint[] { 16, 8 };
    public static BasicMaterialId DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override BasicMaterialId DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override BasicMaterialId ThisMessage {
      get { return this; }
    }
    
    public const int TypeFieldNumber = 1;
    private bool hasType;
    private int type_;
    public bool HasType {
      get { return hasType; }
    }
    public int Type {
      get { return type_; }
    }
    
    public const int IndexFieldNumber = 2;
    private bool hasIndex;
    private int index_;
    public bool HasIndex {
      get { return hasIndex; }
    }
    public int Index {
      get { return index_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasType) return false;
        if (!hasIndex) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _basicMaterialIdFieldNames;
      if (hasType) {
        output.WriteInt32(1, field_names[1], Type);
      }
      if (hasIndex) {
        output.WriteSInt32(2, field_names[0], Index);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasType) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, Type);
        }
        if (hasIndex) {
          size += pb::CodedOutputStream.ComputeSInt32Size(2, Index);
        }
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasType) hash ^= type_.GetHashCode();
      if (hasIndex) hash ^= index_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      BasicMaterialId other = obj as BasicMaterialId;
      if (other == null) return false;
      if (hasType != other.hasType || (hasType && !type_.Equals(other.type_))) return false;
      if (hasIndex != other.hasIndex || (hasIndex && !index_.Equals(other.index_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("type", hasType, type_, writer);
      PrintField("index", hasIndex, index_, writer);
    }
    #endregion
    
    public static BasicMaterialId ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static BasicMaterialId ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static BasicMaterialId ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static BasicMaterialId ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static BasicMaterialId ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static BasicMaterialId ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static BasicMaterialId ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static BasicMaterialId ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static BasicMaterialId ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static BasicMaterialId ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private BasicMaterialId MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(BasicMaterialId prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilderLite<BasicMaterialId, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(BasicMaterialId cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private BasicMaterialId result;
      
      private BasicMaterialId PrepareBuilder() {
        if (resultIsReadOnly) {
          BasicMaterialId original = result;
          result = new BasicMaterialId();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override BasicMaterialId MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override BasicMaterialId DefaultInstanceForType {
        get { return global::dfproto.BasicMaterialId.DefaultInstance; }
      }
      
      public override BasicMaterialId BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is BasicMaterialId) {
          return MergeFrom((BasicMaterialId) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(BasicMaterialId other) {
        if (other == global::dfproto.BasicMaterialId.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasType) {
          Type = other.Type;
        }
        if (other.HasIndex) {
          Index = other.Index;
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_basicMaterialIdFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _basicMaterialIdFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasType = input.ReadInt32(ref result.type_);
              break;
            }
            case 16: {
              result.hasIndex = input.ReadSInt32(ref result.index_);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasType {
        get { return result.hasType; }
      }
      public int Type {
        get { return result.Type; }
        set { SetType(value); }
      }
      public Builder SetType(int value) {
        PrepareBuilder();
        result.hasType = true;
        result.type_ = value;
        return this;
      }
      public Builder ClearType() {
        PrepareBuilder();
        result.hasType = false;
        result.type_ = 0;
        return this;
      }
      
      public bool HasIndex {
        get { return result.hasIndex; }
      }
      public int Index {
        get { return result.Index; }
        set { SetIndex(value); }
      }
      public Builder SetIndex(int value) {
        PrepareBuilder();
        result.hasIndex = true;
        result.index_ = value;
        return this;
      }
      public Builder ClearIndex() {
        PrepareBuilder();
        result.hasIndex = false;
        result.index_ = 0;
        return this;
      }
    }
    static BasicMaterialId() {
      object.ReferenceEquals(global::dfproto.Basic.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class BasicMaterialInfo : pb::GeneratedMessageLite<BasicMaterialInfo, BasicMaterialInfo.Builder> {
    private BasicMaterialInfo() { }
    private static readonly BasicMaterialInfo defaultInstance = new BasicMaterialInfo().MakeReadOnly();
    private static readonly string[] _basicMaterialInfoFieldNames = new string[] { "creature_id", "flags", "histfig_id", "index", "inorganic_flags", "name_prefix", "plant_id", "reaction_class", "reaction_product", "state_adj", "state_color", "state_name", "subtype", "token", "type" };
    private static readonly uint[] _basicMaterialInfoFieldTags = new uint[] { 48, 32, 64, 16, 120, 74, 56, 106, 114, 98, 85, 90, 40, 26, 8 };
    public static BasicMaterialInfo DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override BasicMaterialInfo DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override BasicMaterialInfo ThisMessage {
      get { return this; }
    }
    
    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public static class Types {
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
      [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
      public sealed partial class Product : pb::GeneratedMessageLite<Product, Product.Builder> {
        private Product() { }
        private static readonly Product defaultInstance = new Product().MakeReadOnly();
        private static readonly string[] _productFieldNames = new string[] { "id", "index", "type" };
        private static readonly uint[] _productFieldTags = new uint[] { 10, 24, 16 };
        public static Product DefaultInstance {
          get { return defaultInstance; }
        }
        
        public override Product DefaultInstanceForType {
          get { return DefaultInstance; }
        }
        
        protected override Product ThisMessage {
          get { return this; }
        }
        
        public const int IdFieldNumber = 1;
        private bool hasId;
        private string id_ = "";
        public bool HasId {
          get { return hasId; }
        }
        public string Id {
          get { return id_; }
        }
        
        public const int TypeFieldNumber = 2;
        private bool hasType;
        private int type_;
        public bool HasType {
          get { return hasType; }
        }
        public int Type {
          get { return type_; }
        }
        
        public const int IndexFieldNumber = 3;
        private bool hasIndex;
        private int index_;
        public bool HasIndex {
          get { return hasIndex; }
        }
        public int Index {
          get { return index_; }
        }
        
        public override bool IsInitialized {
          get {
            if (!hasId) return false;
            if (!hasType) return false;
            if (!hasIndex) return false;
            return true;
          }
        }
        
        public override void WriteTo(pb::ICodedOutputStream output) {
          int size = SerializedSize;
          string[] field_names = _productFieldNames;
          if (hasId) {
            output.WriteString(1, field_names[0], Id);
          }
          if (hasType) {
            output.WriteInt32(2, field_names[2], Type);
          }
          if (hasIndex) {
            output.WriteSInt32(3, field_names[1], Index);
          }
        }
        
        private int memoizedSerializedSize = -1;
        public override int SerializedSize {
          get {
            int size = memoizedSerializedSize;
            if (size != -1) return size;
            
            size = 0;
            if (hasId) {
              size += pb::CodedOutputStream.ComputeStringSize(1, Id);
            }
            if (hasType) {
              size += pb::CodedOutputStream.ComputeInt32Size(2, Type);
            }
            if (hasIndex) {
              size += pb::CodedOutputStream.ComputeSInt32Size(3, Index);
            }
            memoizedSerializedSize = size;
            return size;
          }
        }
        
        #region Lite runtime methods
        public override int GetHashCode() {
          int hash = GetType().GetHashCode();
          if (hasId) hash ^= id_.GetHashCode();
          if (hasType) hash ^= type_.GetHashCode();
          if (hasIndex) hash ^= index_.GetHashCode();
          return hash;
        }
        
        public override bool Equals(object obj) {
          Product other = obj as Product;
          if (other == null) return false;
          if (hasId != other.hasId || (hasId && !id_.Equals(other.id_))) return false;
          if (hasType != other.hasType || (hasType && !type_.Equals(other.type_))) return false;
          if (hasIndex != other.hasIndex || (hasIndex && !index_.Equals(other.index_))) return false;
          return true;
        }
        
        public override void PrintTo(global::System.IO.TextWriter writer) {
          PrintField("id", hasId, id_, writer);
          PrintField("type", hasType, type_, writer);
          PrintField("index", hasIndex, index_, writer);
        }
        #endregion
        
        public static Product ParseFrom(pb::ByteString data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static Product ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static Product ParseFrom(byte[] data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static Product ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static Product ParseFrom(global::System.IO.Stream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static Product ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static Product ParseDelimitedFrom(global::System.IO.Stream input) {
          return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static Product ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static Product ParseFrom(pb::ICodedInputStream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static Product ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private Product MakeReadOnly() {
          return this;
        }
        
        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(Product prototype) {
          return new Builder(prototype);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
        public sealed partial class Builder : pb::GeneratedBuilderLite<Product, Builder> {
          protected override Builder ThisBuilder {
            get { return this; }
          }
          public Builder() {
            result = DefaultInstance;
            resultIsReadOnly = true;
          }
          internal Builder(Product cloneFrom) {
            result = cloneFrom;
            resultIsReadOnly = true;
          }
          
          private bool resultIsReadOnly;
          private Product result;
          
          private Product PrepareBuilder() {
            if (resultIsReadOnly) {
              Product original = result;
              result = new Product();
              resultIsReadOnly = false;
              MergeFrom(original);
            }
            return result;
          }
          
          public override bool IsInitialized {
            get { return result.IsInitialized; }
          }
          
          protected override Product MessageBeingBuilt {
            get { return PrepareBuilder(); }
          }
          
          public override Builder Clear() {
            result = DefaultInstance;
            resultIsReadOnly = true;
            return this;
          }
          
          public override Builder Clone() {
            if (resultIsReadOnly) {
              return new Builder(result);
            } else {
              return new Builder().MergeFrom(result);
            }
          }
          
          public override Product DefaultInstanceForType {
            get { return global::dfproto.BasicMaterialInfo.Types.Product.DefaultInstance; }
          }
          
          public override Product BuildPartial() {
            if (resultIsReadOnly) {
              return result;
            }
            resultIsReadOnly = true;
            return result.MakeReadOnly();
          }
          
          public override Builder MergeFrom(pb::IMessageLite other) {
            if (other is Product) {
              return MergeFrom((Product) other);
            } else {
              base.MergeFrom(other);
              return this;
            }
          }
          
          public override Builder MergeFrom(Product other) {
            if (other == global::dfproto.BasicMaterialInfo.Types.Product.DefaultInstance) return this;
            PrepareBuilder();
            if (other.HasId) {
              Id = other.Id;
            }
            if (other.HasType) {
              Type = other.Type;
            }
            if (other.HasIndex) {
              Index = other.Index;
            }
            return this;
          }
          
          public override Builder MergeFrom(pb::ICodedInputStream input) {
            return MergeFrom(input, pb::ExtensionRegistry.Empty);
          }
          
          public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
            PrepareBuilder();
            uint tag;
            string field_name;
            while (input.ReadTag(out tag, out field_name)) {
              if(tag == 0 && field_name != null) {
                int field_ordinal = global::System.Array.BinarySearch(_productFieldNames, field_name, global::System.StringComparer.Ordinal);
                if(field_ordinal >= 0)
                  tag = _productFieldTags[field_ordinal];
                else {
                  ParseUnknownField(input, extensionRegistry, tag, field_name);
                  continue;
                }
              }
              switch (tag) {
                case 0: {
                  throw pb::InvalidProtocolBufferException.InvalidTag();
                }
                default: {
                  if (pb::WireFormat.IsEndGroupTag(tag)) {
                    return this;
                  }
                  ParseUnknownField(input, extensionRegistry, tag, field_name);
                  break;
                }
                case 10: {
                  result.hasId = input.ReadString(ref result.id_);
                  break;
                }
                case 16: {
                  result.hasType = input.ReadInt32(ref result.type_);
                  break;
                }
                case 24: {
                  result.hasIndex = input.ReadSInt32(ref result.index_);
                  break;
                }
              }
            }
            
            return this;
          }
          
          
          public bool HasId {
            get { return result.hasId; }
          }
          public string Id {
            get { return result.Id; }
            set { SetId(value); }
          }
          public Builder SetId(string value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasId = true;
            result.id_ = value;
            return this;
          }
          public Builder ClearId() {
            PrepareBuilder();
            result.hasId = false;
            result.id_ = "";
            return this;
          }
          
          public bool HasType {
            get { return result.hasType; }
          }
          public int Type {
            get { return result.Type; }
            set { SetType(value); }
          }
          public Builder SetType(int value) {
            PrepareBuilder();
            result.hasType = true;
            result.type_ = value;
            return this;
          }
          public Builder ClearType() {
            PrepareBuilder();
            result.hasType = false;
            result.type_ = 0;
            return this;
          }
          
          public bool HasIndex {
            get { return result.hasIndex; }
          }
          public int Index {
            get { return result.Index; }
            set { SetIndex(value); }
          }
          public Builder SetIndex(int value) {
            PrepareBuilder();
            result.hasIndex = true;
            result.index_ = value;
            return this;
          }
          public Builder ClearIndex() {
            PrepareBuilder();
            result.hasIndex = false;
            result.index_ = 0;
            return this;
          }
        }
        static Product() {
          object.ReferenceEquals(global::dfproto.Basic.Descriptor, null);
        }
      }
      
    }
    #endregion
    
    public const int TypeFieldNumber = 1;
    private bool hasType;
    private int type_;
    public bool HasType {
      get { return hasType; }
    }
    public int Type {
      get { return type_; }
    }
    
    public const int IndexFieldNumber = 2;
    private bool hasIndex;
    private int index_;
    public bool HasIndex {
      get { return hasIndex; }
    }
    public int Index {
      get { return index_; }
    }
    
    public const int TokenFieldNumber = 3;
    private bool hasToken;
    private string token_ = "";
    public bool HasToken {
      get { return hasToken; }
    }
    public string Token {
      get { return token_; }
    }
    
    public const int FlagsFieldNumber = 4;
    private pbc::PopsicleList<int> flags_ = new pbc::PopsicleList<int>();
    public scg::IList<int> FlagsList {
      get { return pbc::Lists.AsReadOnly(flags_); }
    }
    public int FlagsCount {
      get { return flags_.Count; }
    }
    public int GetFlags(int index) {
      return flags_[index];
    }
    
    public const int SubtypeFieldNumber = 5;
    private bool hasSubtype;
    private int subtype_ = -1;
    public bool HasSubtype {
      get { return hasSubtype; }
    }
    public int Subtype {
      get { return subtype_; }
    }
    
    public const int CreatureIdFieldNumber = 6;
    private bool hasCreatureId;
    private int creatureId_ = -1;
    public bool HasCreatureId {
      get { return hasCreatureId; }
    }
    public int CreatureId {
      get { return creatureId_; }
    }
    
    public const int PlantIdFieldNumber = 7;
    private bool hasPlantId;
    private int plantId_ = -1;
    public bool HasPlantId {
      get { return hasPlantId; }
    }
    public int PlantId {
      get { return plantId_; }
    }
    
    public const int HistfigIdFieldNumber = 8;
    private bool hasHistfigId;
    private int histfigId_ = -1;
    public bool HasHistfigId {
      get { return hasHistfigId; }
    }
    public int HistfigId {
      get { return histfigId_; }
    }
    
    public const int NamePrefixFieldNumber = 9;
    private bool hasNamePrefix;
    private string namePrefix_ = "";
    public bool HasNamePrefix {
      get { return hasNamePrefix; }
    }
    public string NamePrefix {
      get { return namePrefix_; }
    }
    
    public const int StateColorFieldNumber = 10;
    private pbc::PopsicleList<uint> stateColor_ = new pbc::PopsicleList<uint>();
    [global::System.CLSCompliant(false)]
    public scg::IList<uint> StateColorList {
      get { return pbc::Lists.AsReadOnly(stateColor_); }
    }
    public int StateColorCount {
      get { return stateColor_.Count; }
    }
    [global::System.CLSCompliant(false)]
    public uint GetStateColor(int index) {
      return stateColor_[index];
    }
    
    public const int StateNameFieldNumber = 11;
    private pbc::PopsicleList<string> stateName_ = new pbc::PopsicleList<string>();
    public scg::IList<string> StateNameList {
      get { return pbc::Lists.AsReadOnly(stateName_); }
    }
    public int StateNameCount {
      get { return stateName_.Count; }
    }
    public string GetStateName(int index) {
      return stateName_[index];
    }
    
    public const int StateAdjFieldNumber = 12;
    private pbc::PopsicleList<string> stateAdj_ = new pbc::PopsicleList<string>();
    public scg::IList<string> StateAdjList {
      get { return pbc::Lists.AsReadOnly(stateAdj_); }
    }
    public int StateAdjCount {
      get { return stateAdj_.Count; }
    }
    public string GetStateAdj(int index) {
      return stateAdj_[index];
    }
    
    public const int ReactionClassFieldNumber = 13;
    private pbc::PopsicleList<string> reactionClass_ = new pbc::PopsicleList<string>();
    public scg::IList<string> ReactionClassList {
      get { return pbc::Lists.AsReadOnly(reactionClass_); }
    }
    public int ReactionClassCount {
      get { return reactionClass_.Count; }
    }
    public string GetReactionClass(int index) {
      return reactionClass_[index];
    }
    
    public const int ReactionProductFieldNumber = 14;
    private pbc::PopsicleList<global::dfproto.BasicMaterialInfo.Types.Product> reactionProduct_ = new pbc::PopsicleList<global::dfproto.BasicMaterialInfo.Types.Product>();
    public scg::IList<global::dfproto.BasicMaterialInfo.Types.Product> ReactionProductList {
      get { return reactionProduct_; }
    }
    public int ReactionProductCount {
      get { return reactionProduct_.Count; }
    }
    public global::dfproto.BasicMaterialInfo.Types.Product GetReactionProduct(int index) {
      return reactionProduct_[index];
    }
    
    public const int InorganicFlagsFieldNumber = 15;
    private pbc::PopsicleList<int> inorganicFlags_ = new pbc::PopsicleList<int>();
    public scg::IList<int> InorganicFlagsList {
      get { return pbc::Lists.AsReadOnly(inorganicFlags_); }
    }
    public int InorganicFlagsCount {
      get { return inorganicFlags_.Count; }
    }
    public int GetInorganicFlags(int index) {
      return inorganicFlags_[index];
    }
    
    public override bool IsInitialized {
      get {
        if (!hasType) return false;
        if (!hasIndex) return false;
        if (!hasToken) return false;
        foreach (global::dfproto.BasicMaterialInfo.Types.Product element in ReactionProductList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _basicMaterialInfoFieldNames;
      if (hasType) {
        output.WriteInt32(1, field_names[14], Type);
      }
      if (hasIndex) {
        output.WriteSInt32(2, field_names[3], Index);
      }
      if (hasToken) {
        output.WriteString(3, field_names[13], Token);
      }
      if (flags_.Count > 0) {
        output.WriteInt32Array(4, field_names[1], flags_);
      }
      if (hasSubtype) {
        output.WriteInt32(5, field_names[12], Subtype);
      }
      if (hasCreatureId) {
        output.WriteInt32(6, field_names[0], CreatureId);
      }
      if (hasPlantId) {
        output.WriteInt32(7, field_names[6], PlantId);
      }
      if (hasHistfigId) {
        output.WriteInt32(8, field_names[2], HistfigId);
      }
      if (hasNamePrefix) {
        output.WriteString(9, field_names[5], NamePrefix);
      }
      if (stateColor_.Count > 0) {
        output.WriteFixed32Array(10, field_names[10], stateColor_);
      }
      if (stateName_.Count > 0) {
        output.WriteStringArray(11, field_names[11], stateName_);
      }
      if (stateAdj_.Count > 0) {
        output.WriteStringArray(12, field_names[9], stateAdj_);
      }
      if (reactionClass_.Count > 0) {
        output.WriteStringArray(13, field_names[7], reactionClass_);
      }
      if (reactionProduct_.Count > 0) {
        output.WriteMessageArray(14, field_names[8], reactionProduct_);
      }
      if (inorganicFlags_.Count > 0) {
        output.WriteInt32Array(15, field_names[4], inorganicFlags_);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasType) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, Type);
        }
        if (hasIndex) {
          size += pb::CodedOutputStream.ComputeSInt32Size(2, Index);
        }
        if (hasToken) {
          size += pb::CodedOutputStream.ComputeStringSize(3, Token);
        }
        {
          int dataSize = 0;
          foreach (int element in FlagsList) {
            dataSize += pb::CodedOutputStream.ComputeInt32SizeNoTag(element);
          }
          size += dataSize;
          size += 1 * flags_.Count;
        }
        if (hasSubtype) {
          size += pb::CodedOutputStream.ComputeInt32Size(5, Subtype);
        }
        if (hasCreatureId) {
          size += pb::CodedOutputStream.ComputeInt32Size(6, CreatureId);
        }
        if (hasPlantId) {
          size += pb::CodedOutputStream.ComputeInt32Size(7, PlantId);
        }
        if (hasHistfigId) {
          size += pb::CodedOutputStream.ComputeInt32Size(8, HistfigId);
        }
        if (hasNamePrefix) {
          size += pb::CodedOutputStream.ComputeStringSize(9, NamePrefix);
        }
        {
          int dataSize = 0;
          dataSize = 4 * stateColor_.Count;
          size += dataSize;
          size += 1 * stateColor_.Count;
        }
        {
          int dataSize = 0;
          foreach (string element in StateNameList) {
            dataSize += pb::CodedOutputStream.ComputeStringSizeNoTag(element);
          }
          size += dataSize;
          size += 1 * stateName_.Count;
        }
        {
          int dataSize = 0;
          foreach (string element in StateAdjList) {
            dataSize += pb::CodedOutputStream.ComputeStringSizeNoTag(element);
          }
          size += dataSize;
          size += 1 * stateAdj_.Count;
        }
        {
          int dataSize = 0;
          foreach (string element in ReactionClassList) {
            dataSize += pb::CodedOutputStream.ComputeStringSizeNoTag(element);
          }
          size += dataSize;
          size += 1 * reactionClass_.Count;
        }
        foreach (global::dfproto.BasicMaterialInfo.Types.Product element in ReactionProductList) {
          size += pb::CodedOutputStream.ComputeMessageSize(14, element);
        }
        {
          int dataSize = 0;
          foreach (int element in InorganicFlagsList) {
            dataSize += pb::CodedOutputStream.ComputeInt32SizeNoTag(element);
          }
          size += dataSize;
          size += 1 * inorganicFlags_.Count;
        }
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasType) hash ^= type_.GetHashCode();
      if (hasIndex) hash ^= index_.GetHashCode();
      if (hasToken) hash ^= token_.GetHashCode();
      foreach(int i in flags_)
        hash ^= i.GetHashCode();
      if (hasSubtype) hash ^= subtype_.GetHashCode();
      if (hasCreatureId) hash ^= creatureId_.GetHashCode();
      if (hasPlantId) hash ^= plantId_.GetHashCode();
      if (hasHistfigId) hash ^= histfigId_.GetHashCode();
      if (hasNamePrefix) hash ^= namePrefix_.GetHashCode();
      foreach(uint i in stateColor_)
        hash ^= i.GetHashCode();
      foreach(string i in stateName_)
        hash ^= i.GetHashCode();
      foreach(string i in stateAdj_)
        hash ^= i.GetHashCode();
      foreach(string i in reactionClass_)
        hash ^= i.GetHashCode();
      foreach(global::dfproto.BasicMaterialInfo.Types.Product i in reactionProduct_)
        hash ^= i.GetHashCode();
      foreach(int i in inorganicFlags_)
        hash ^= i.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      BasicMaterialInfo other = obj as BasicMaterialInfo;
      if (other == null) return false;
      if (hasType != other.hasType || (hasType && !type_.Equals(other.type_))) return false;
      if (hasIndex != other.hasIndex || (hasIndex && !index_.Equals(other.index_))) return false;
      if (hasToken != other.hasToken || (hasToken && !token_.Equals(other.token_))) return false;
      if(flags_.Count != other.flags_.Count) return false;
      for(int ix=0; ix < flags_.Count; ix++)
        if(!flags_[ix].Equals(other.flags_[ix])) return false;
      if (hasSubtype != other.hasSubtype || (hasSubtype && !subtype_.Equals(other.subtype_))) return false;
      if (hasCreatureId != other.hasCreatureId || (hasCreatureId && !creatureId_.Equals(other.creatureId_))) return false;
      if (hasPlantId != other.hasPlantId || (hasPlantId && !plantId_.Equals(other.plantId_))) return false;
      if (hasHistfigId != other.hasHistfigId || (hasHistfigId && !histfigId_.Equals(other.histfigId_))) return false;
      if (hasNamePrefix != other.hasNamePrefix || (hasNamePrefix && !namePrefix_.Equals(other.namePrefix_))) return false;
      if(stateColor_.Count != other.stateColor_.Count) return false;
      for(int ix=0; ix < stateColor_.Count; ix++)
        if(!stateColor_[ix].Equals(other.stateColor_[ix])) return false;
      if(stateName_.Count != other.stateName_.Count) return false;
      for(int ix=0; ix < stateName_.Count; ix++)
        if(!stateName_[ix].Equals(other.stateName_[ix])) return false;
      if(stateAdj_.Count != other.stateAdj_.Count) return false;
      for(int ix=0; ix < stateAdj_.Count; ix++)
        if(!stateAdj_[ix].Equals(other.stateAdj_[ix])) return false;
      if(reactionClass_.Count != other.reactionClass_.Count) return false;
      for(int ix=0; ix < reactionClass_.Count; ix++)
        if(!reactionClass_[ix].Equals(other.reactionClass_[ix])) return false;
      if(reactionProduct_.Count != other.reactionProduct_.Count) return false;
      for(int ix=0; ix < reactionProduct_.Count; ix++)
        if(!reactionProduct_[ix].Equals(other.reactionProduct_[ix])) return false;
      if(inorganicFlags_.Count != other.inorganicFlags_.Count) return false;
      for(int ix=0; ix < inorganicFlags_.Count; ix++)
        if(!inorganicFlags_[ix].Equals(other.inorganicFlags_[ix])) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("type", hasType, type_, writer);
      PrintField("index", hasIndex, index_, writer);
      PrintField("token", hasToken, token_, writer);
      PrintField("flags", flags_, writer);
      PrintField("subtype", hasSubtype, subtype_, writer);
      PrintField("creature_id", hasCreatureId, creatureId_, writer);
      PrintField("plant_id", hasPlantId, plantId_, writer);
      PrintField("histfig_id", hasHistfigId, histfigId_, writer);
      PrintField("name_prefix", hasNamePrefix, namePrefix_, writer);
      PrintField("state_color", stateColor_, writer);
      PrintField("state_name", stateName_, writer);
      PrintField("state_adj", stateAdj_, writer);
      PrintField("reaction_class", reactionClass_, writer);
      PrintField("reaction_product", reactionProduct_, writer);
      PrintField("inorganic_flags", inorganicFlags_, writer);
    }
    #endregion
    
    public static BasicMaterialInfo ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static BasicMaterialInfo ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static BasicMaterialInfo ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static BasicMaterialInfo ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static BasicMaterialInfo ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static BasicMaterialInfo ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static BasicMaterialInfo ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static BasicMaterialInfo ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static BasicMaterialInfo ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static BasicMaterialInfo ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private BasicMaterialInfo MakeReadOnly() {
      flags_.MakeReadOnly();
      stateColor_.MakeReadOnly();
      stateName_.MakeReadOnly();
      stateAdj_.MakeReadOnly();
      reactionClass_.MakeReadOnly();
      reactionProduct_.MakeReadOnly();
      inorganicFlags_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(BasicMaterialInfo prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilderLite<BasicMaterialInfo, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(BasicMaterialInfo cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private BasicMaterialInfo result;
      
      private BasicMaterialInfo PrepareBuilder() {
        if (resultIsReadOnly) {
          BasicMaterialInfo original = result;
          result = new BasicMaterialInfo();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override BasicMaterialInfo MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override BasicMaterialInfo DefaultInstanceForType {
        get { return global::dfproto.BasicMaterialInfo.DefaultInstance; }
      }
      
      public override BasicMaterialInfo BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is BasicMaterialInfo) {
          return MergeFrom((BasicMaterialInfo) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(BasicMaterialInfo other) {
        if (other == global::dfproto.BasicMaterialInfo.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasType) {
          Type = other.Type;
        }
        if (other.HasIndex) {
          Index = other.Index;
        }
        if (other.HasToken) {
          Token = other.Token;
        }
        if (other.flags_.Count != 0) {
          result.flags_.Add(other.flags_);
        }
        if (other.HasSubtype) {
          Subtype = other.Subtype;
        }
        if (other.HasCreatureId) {
          CreatureId = other.CreatureId;
        }
        if (other.HasPlantId) {
          PlantId = other.PlantId;
        }
        if (other.HasHistfigId) {
          HistfigId = other.HistfigId;
        }
        if (other.HasNamePrefix) {
          NamePrefix = other.NamePrefix;
        }
        if (other.stateColor_.Count != 0) {
          result.stateColor_.Add(other.stateColor_);
        }
        if (other.stateName_.Count != 0) {
          result.stateName_.Add(other.stateName_);
        }
        if (other.stateAdj_.Count != 0) {
          result.stateAdj_.Add(other.stateAdj_);
        }
        if (other.reactionClass_.Count != 0) {
          result.reactionClass_.Add(other.reactionClass_);
        }
        if (other.reactionProduct_.Count != 0) {
          result.reactionProduct_.Add(other.reactionProduct_);
        }
        if (other.inorganicFlags_.Count != 0) {
          result.inorganicFlags_.Add(other.inorganicFlags_);
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_basicMaterialInfoFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _basicMaterialInfoFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasType = input.ReadInt32(ref result.type_);
              break;
            }
            case 16: {
              result.hasIndex = input.ReadSInt32(ref result.index_);
              break;
            }
            case 26: {
              result.hasToken = input.ReadString(ref result.token_);
              break;
            }
            case 34:
            case 32: {
              input.ReadInt32Array(tag, field_name, result.flags_);
              break;
            }
            case 40: {
              result.hasSubtype = input.ReadInt32(ref result.subtype_);
              break;
            }
            case 48: {
              result.hasCreatureId = input.ReadInt32(ref result.creatureId_);
              break;
            }
            case 56: {
              result.hasPlantId = input.ReadInt32(ref result.plantId_);
              break;
            }
            case 64: {
              result.hasHistfigId = input.ReadInt32(ref result.histfigId_);
              break;
            }
            case 74: {
              result.hasNamePrefix = input.ReadString(ref result.namePrefix_);
              break;
            }
            case 82:
            case 85: {
              input.ReadFixed32Array(tag, field_name, result.stateColor_);
              break;
            }
            case 90: {
              input.ReadStringArray(tag, field_name, result.stateName_);
              break;
            }
            case 98: {
              input.ReadStringArray(tag, field_name, result.stateAdj_);
              break;
            }
            case 106: {
              input.ReadStringArray(tag, field_name, result.reactionClass_);
              break;
            }
            case 114: {
              input.ReadMessageArray(tag, field_name, result.reactionProduct_, global::dfproto.BasicMaterialInfo.Types.Product.DefaultInstance, extensionRegistry);
              break;
            }
            case 122:
            case 120: {
              input.ReadInt32Array(tag, field_name, result.inorganicFlags_);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasType {
        get { return result.hasType; }
      }
      public int Type {
        get { return result.Type; }
        set { SetType(value); }
      }
      public Builder SetType(int value) {
        PrepareBuilder();
        result.hasType = true;
        result.type_ = value;
        return this;
      }
      public Builder ClearType() {
        PrepareBuilder();
        result.hasType = false;
        result.type_ = 0;
        return this;
      }
      
      public bool HasIndex {
        get { return result.hasIndex; }
      }
      public int Index {
        get { return result.Index; }
        set { SetIndex(value); }
      }
      public Builder SetIndex(int value) {
        PrepareBuilder();
        result.hasIndex = true;
        result.index_ = value;
        return this;
      }
      public Builder ClearIndex() {
        PrepareBuilder();
        result.hasIndex = false;
        result.index_ = 0;
        return this;
      }
      
      public bool HasToken {
        get { return result.hasToken; }
      }
      public string Token {
        get { return result.Token; }
        set { SetToken(value); }
      }
      public Builder SetToken(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasToken = true;
        result.token_ = value;
        return this;
      }
      public Builder ClearToken() {
        PrepareBuilder();
        result.hasToken = false;
        result.token_ = "";
        return this;
      }
      
      public pbc::IPopsicleList<int> FlagsList {
        get { return PrepareBuilder().flags_; }
      }
      public int FlagsCount {
        get { return result.FlagsCount; }
      }
      public int GetFlags(int index) {
        return result.GetFlags(index);
      }
      public Builder SetFlags(int index, int value) {
        PrepareBuilder();
        result.flags_[index] = value;
        return this;
      }
      public Builder AddFlags(int value) {
        PrepareBuilder();
        result.flags_.Add(value);
        return this;
      }
      public Builder AddRangeFlags(scg::IEnumerable<int> values) {
        PrepareBuilder();
        result.flags_.Add(values);
        return this;
      }
      public Builder ClearFlags() {
        PrepareBuilder();
        result.flags_.Clear();
        return this;
      }
      
      public bool HasSubtype {
        get { return result.hasSubtype; }
      }
      public int Subtype {
        get { return result.Subtype; }
        set { SetSubtype(value); }
      }
      public Builder SetSubtype(int value) {
        PrepareBuilder();
        result.hasSubtype = true;
        result.subtype_ = value;
        return this;
      }
      public Builder ClearSubtype() {
        PrepareBuilder();
        result.hasSubtype = false;
        result.subtype_ = -1;
        return this;
      }
      
      public bool HasCreatureId {
        get { return result.hasCreatureId; }
      }
      public int CreatureId {
        get { return result.CreatureId; }
        set { SetCreatureId(value); }
      }
      public Builder SetCreatureId(int value) {
        PrepareBuilder();
        result.hasCreatureId = true;
        result.creatureId_ = value;
        return this;
      }
      public Builder ClearCreatureId() {
        PrepareBuilder();
        result.hasCreatureId = false;
        result.creatureId_ = -1;
        return this;
      }
      
      public bool HasPlantId {
        get { return result.hasPlantId; }
      }
      public int PlantId {
        get { return result.PlantId; }
        set { SetPlantId(value); }
      }
      public Builder SetPlantId(int value) {
        PrepareBuilder();
        result.hasPlantId = true;
        result.plantId_ = value;
        return this;
      }
      public Builder ClearPlantId() {
        PrepareBuilder();
        result.hasPlantId = false;
        result.plantId_ = -1;
        return this;
      }
      
      public bool HasHistfigId {
        get { return result.hasHistfigId; }
      }
      public int HistfigId {
        get { return result.HistfigId; }
        set { SetHistfigId(value); }
      }
      public Builder SetHistfigId(int value) {
        PrepareBuilder();
        result.hasHistfigId = true;
        result.histfigId_ = value;
        return this;
      }
      public Builder ClearHistfigId() {
        PrepareBuilder();
        result.hasHistfigId = false;
        result.histfigId_ = -1;
        return this;
      }
      
      public bool HasNamePrefix {
        get { return result.hasNamePrefix; }
      }
      public string NamePrefix {
        get { return result.NamePrefix; }
        set { SetNamePrefix(value); }
      }
      public Builder SetNamePrefix(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasNamePrefix = true;
        result.namePrefix_ = value;
        return this;
      }
      public Builder ClearNamePrefix() {
        PrepareBuilder();
        result.hasNamePrefix = false;
        result.namePrefix_ = "";
        return this;
      }
      
      [global::System.CLSCompliant(false)]
      public pbc::IPopsicleList<uint> StateColorList {
        get { return PrepareBuilder().stateColor_; }
      }
      public int StateColorCount {
        get { return result.StateColorCount; }
      }
      [global::System.CLSCompliant(false)]
      public uint GetStateColor(int index) {
        return result.GetStateColor(index);
      }
      [global::System.CLSCompliant(false)]
      public Builder SetStateColor(int index, uint value) {
        PrepareBuilder();
        result.stateColor_[index] = value;
        return this;
      }
      [global::System.CLSCompliant(false)]
      public Builder AddStateColor(uint value) {
        PrepareBuilder();
        result.stateColor_.Add(value);
        return this;
      }
      [global::System.CLSCompliant(false)]
      public Builder AddRangeStateColor(scg::IEnumerable<uint> values) {
        PrepareBuilder();
        result.stateColor_.Add(values);
        return this;
      }
      public Builder ClearStateColor() {
        PrepareBuilder();
        result.stateColor_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<string> StateNameList {
        get { return PrepareBuilder().stateName_; }
      }
      public int StateNameCount {
        get { return result.StateNameCount; }
      }
      public string GetStateName(int index) {
        return result.GetStateName(index);
      }
      public Builder SetStateName(int index, string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.stateName_[index] = value;
        return this;
      }
      public Builder AddStateName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.stateName_.Add(value);
        return this;
      }
      public Builder AddRangeStateName(scg::IEnumerable<string> values) {
        PrepareBuilder();
        result.stateName_.Add(values);
        return this;
      }
      public Builder ClearStateName() {
        PrepareBuilder();
        result.stateName_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<string> StateAdjList {
        get { return PrepareBuilder().stateAdj_; }
      }
      public int StateAdjCount {
        get { return result.StateAdjCount; }
      }
      public string GetStateAdj(int index) {
        return result.GetStateAdj(index);
      }
      public Builder SetStateAdj(int index, string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.stateAdj_[index] = value;
        return this;
      }
      public Builder AddStateAdj(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.stateAdj_.Add(value);
        return this;
      }
      public Builder AddRangeStateAdj(scg::IEnumerable<string> values) {
        PrepareBuilder();
        result.stateAdj_.Add(values);
        return this;
      }
      public Builder ClearStateAdj() {
        PrepareBuilder();
        result.stateAdj_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<string> ReactionClassList {
        get { return PrepareBuilder().reactionClass_; }
      }
      public int ReactionClassCount {
        get { return result.ReactionClassCount; }
      }
      public string GetReactionClass(int index) {
        return result.GetReactionClass(index);
      }
      public Builder SetReactionClass(int index, string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.reactionClass_[index] = value;
        return this;
      }
      public Builder AddReactionClass(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.reactionClass_.Add(value);
        return this;
      }
      public Builder AddRangeReactionClass(scg::IEnumerable<string> values) {
        PrepareBuilder();
        result.reactionClass_.Add(values);
        return this;
      }
      public Builder ClearReactionClass() {
        PrepareBuilder();
        result.reactionClass_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<global::dfproto.BasicMaterialInfo.Types.Product> ReactionProductList {
        get { return PrepareBuilder().reactionProduct_; }
      }
      public int ReactionProductCount {
        get { return result.ReactionProductCount; }
      }
      public global::dfproto.BasicMaterialInfo.Types.Product GetReactionProduct(int index) {
        return result.GetReactionProduct(index);
      }
      public Builder SetReactionProduct(int index, global::dfproto.BasicMaterialInfo.Types.Product value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.reactionProduct_[index] = value;
        return this;
      }
      public Builder SetReactionProduct(int index, global::dfproto.BasicMaterialInfo.Types.Product.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.reactionProduct_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddReactionProduct(global::dfproto.BasicMaterialInfo.Types.Product value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.reactionProduct_.Add(value);
        return this;
      }
      public Builder AddReactionProduct(global::dfproto.BasicMaterialInfo.Types.Product.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.reactionProduct_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeReactionProduct(scg::IEnumerable<global::dfproto.BasicMaterialInfo.Types.Product> values) {
        PrepareBuilder();
        result.reactionProduct_.Add(values);
        return this;
      }
      public Builder ClearReactionProduct() {
        PrepareBuilder();
        result.reactionProduct_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<int> InorganicFlagsList {
        get { return PrepareBuilder().inorganicFlags_; }
      }
      public int InorganicFlagsCount {
        get { return result.InorganicFlagsCount; }
      }
      public int GetInorganicFlags(int index) {
        return result.GetInorganicFlags(index);
      }
      public Builder SetInorganicFlags(int index, int value) {
        PrepareBuilder();
        result.inorganicFlags_[index] = value;
        return this;
      }
      public Builder AddInorganicFlags(int value) {
        PrepareBuilder();
        result.inorganicFlags_.Add(value);
        return this;
      }
      public Builder AddRangeInorganicFlags(scg::IEnumerable<int> values) {
        PrepareBuilder();
        result.inorganicFlags_.Add(values);
        return this;
      }
      public Builder ClearInorganicFlags() {
        PrepareBuilder();
        result.inorganicFlags_.Clear();
        return this;
      }
    }
    static BasicMaterialInfo() {
      object.ReferenceEquals(global::dfproto.Basic.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class BasicMaterialInfoMask : pb::GeneratedMessageLite<BasicMaterialInfoMask, BasicMaterialInfoMask.Builder> {
    private BasicMaterialInfoMask() { }
    private static readonly BasicMaterialInfoMask defaultInstance = new BasicMaterialInfoMask().MakeReadOnly();
    private static readonly string[] _basicMaterialInfoMaskFieldNames = new string[] { "flags", "reaction", "states", "temperature" };
    private static readonly uint[] _basicMaterialInfoMaskFieldTags = new uint[] { 16, 24, 8, 32 };
    public static BasicMaterialInfoMask DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override BasicMaterialInfoMask DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override BasicMaterialInfoMask ThisMessage {
      get { return this; }
    }
    
    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public static class Types {
      [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
      [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
      public enum StateType {
        Solid = 0,
        Liquid = 1,
        Gas = 2,
        Powder = 3,
        Paste = 4,
        Pressed = 5,
      }
      
    }
    #endregion
    
    public const int StatesFieldNumber = 1;
    private pbc::PopsicleList<global::dfproto.BasicMaterialInfoMask.Types.StateType> states_ = new pbc::PopsicleList<global::dfproto.BasicMaterialInfoMask.Types.StateType>();
    public scg::IList<global::dfproto.BasicMaterialInfoMask.Types.StateType> StatesList {
      get { return pbc::Lists.AsReadOnly(states_); }
    }
    public int StatesCount {
      get { return states_.Count; }
    }
    public global::dfproto.BasicMaterialInfoMask.Types.StateType GetStates(int index) {
      return states_[index];
    }
    
    public const int TemperatureFieldNumber = 4;
    private bool hasTemperature;
    private int temperature_ = 10015;
    public bool HasTemperature {
      get { return hasTemperature; }
    }
    public int Temperature {
      get { return temperature_; }
    }
    
    public const int FlagsFieldNumber = 2;
    private bool hasFlags;
    private bool flags_;
    public bool HasFlags {
      get { return hasFlags; }
    }
    public bool Flags {
      get { return flags_; }
    }
    
    public const int ReactionFieldNumber = 3;
    private bool hasReaction;
    private bool reaction_;
    public bool HasReaction {
      get { return hasReaction; }
    }
    public bool Reaction {
      get { return reaction_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _basicMaterialInfoMaskFieldNames;
      if (states_.Count > 0) {
        output.WriteEnumArray(1, field_names[2], states_);
      }
      if (hasFlags) {
        output.WriteBool(2, field_names[0], Flags);
      }
      if (hasReaction) {
        output.WriteBool(3, field_names[1], Reaction);
      }
      if (hasTemperature) {
        output.WriteInt32(4, field_names[3], Temperature);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        {
          int dataSize = 0;
          if (states_.Count > 0) {
            foreach (global::dfproto.BasicMaterialInfoMask.Types.StateType element in states_) {
              dataSize += pb::CodedOutputStream.ComputeEnumSizeNoTag((int) element);
            }
            size += dataSize;
            size += 1 * states_.Count;
          }
        }
        if (hasTemperature) {
          size += pb::CodedOutputStream.ComputeInt32Size(4, Temperature);
        }
        if (hasFlags) {
          size += pb::CodedOutputStream.ComputeBoolSize(2, Flags);
        }
        if (hasReaction) {
          size += pb::CodedOutputStream.ComputeBoolSize(3, Reaction);
        }
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      foreach(global::dfproto.BasicMaterialInfoMask.Types.StateType i in states_)
        hash ^= i.GetHashCode();
      if (hasTemperature) hash ^= temperature_.GetHashCode();
      if (hasFlags) hash ^= flags_.GetHashCode();
      if (hasReaction) hash ^= reaction_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      BasicMaterialInfoMask other = obj as BasicMaterialInfoMask;
      if (other == null) return false;
      if(states_.Count != other.states_.Count) return false;
      for(int ix=0; ix < states_.Count; ix++)
        if(!states_[ix].Equals(other.states_[ix])) return false;
      if (hasTemperature != other.hasTemperature || (hasTemperature && !temperature_.Equals(other.temperature_))) return false;
      if (hasFlags != other.hasFlags || (hasFlags && !flags_.Equals(other.flags_))) return false;
      if (hasReaction != other.hasReaction || (hasReaction && !reaction_.Equals(other.reaction_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("states", states_, writer);
      PrintField("flags", hasFlags, flags_, writer);
      PrintField("reaction", hasReaction, reaction_, writer);
      PrintField("temperature", hasTemperature, temperature_, writer);
    }
    #endregion
    
    public static BasicMaterialInfoMask ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static BasicMaterialInfoMask ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static BasicMaterialInfoMask ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static BasicMaterialInfoMask ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static BasicMaterialInfoMask ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static BasicMaterialInfoMask ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static BasicMaterialInfoMask ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static BasicMaterialInfoMask ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static BasicMaterialInfoMask ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static BasicMaterialInfoMask ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private BasicMaterialInfoMask MakeReadOnly() {
      states_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(BasicMaterialInfoMask prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilderLite<BasicMaterialInfoMask, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(BasicMaterialInfoMask cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private BasicMaterialInfoMask result;
      
      private BasicMaterialInfoMask PrepareBuilder() {
        if (resultIsReadOnly) {
          BasicMaterialInfoMask original = result;
          result = new BasicMaterialInfoMask();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override BasicMaterialInfoMask MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override BasicMaterialInfoMask DefaultInstanceForType {
        get { return global::dfproto.BasicMaterialInfoMask.DefaultInstance; }
      }
      
      public override BasicMaterialInfoMask BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is BasicMaterialInfoMask) {
          return MergeFrom((BasicMaterialInfoMask) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(BasicMaterialInfoMask other) {
        if (other == global::dfproto.BasicMaterialInfoMask.DefaultInstance) return this;
        PrepareBuilder();
        if (other.states_.Count != 0) {
          result.states_.Add(other.states_);
        }
        if (other.HasTemperature) {
          Temperature = other.Temperature;
        }
        if (other.HasFlags) {
          Flags = other.Flags;
        }
        if (other.HasReaction) {
          Reaction = other.Reaction;
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_basicMaterialInfoMaskFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _basicMaterialInfoMaskFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 10:
            case 8: {
              scg::ICollection<object> unknownItems;
              input.ReadEnumArray<global::dfproto.BasicMaterialInfoMask.Types.StateType>(tag, field_name, result.states_, out unknownItems);
              break;
            }
            case 16: {
              result.hasFlags = input.ReadBool(ref result.flags_);
              break;
            }
            case 24: {
              result.hasReaction = input.ReadBool(ref result.reaction_);
              break;
            }
            case 32: {
              result.hasTemperature = input.ReadInt32(ref result.temperature_);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public pbc::IPopsicleList<global::dfproto.BasicMaterialInfoMask.Types.StateType> StatesList {
        get { return PrepareBuilder().states_; }
      }
      public int StatesCount {
        get { return result.StatesCount; }
      }
      public global::dfproto.BasicMaterialInfoMask.Types.StateType GetStates(int index) {
        return result.GetStates(index);
      }
      public Builder SetStates(int index, global::dfproto.BasicMaterialInfoMask.Types.StateType value) {
        PrepareBuilder();
        result.states_[index] = value;
        return this;
      }
      public Builder AddStates(global::dfproto.BasicMaterialInfoMask.Types.StateType value) {
        PrepareBuilder();
        result.states_.Add(value);
        return this;
      }
      public Builder AddRangeStates(scg::IEnumerable<global::dfproto.BasicMaterialInfoMask.Types.StateType> values) {
        PrepareBuilder();
        result.states_.Add(values);
        return this;
      }
      public Builder ClearStates() {
        PrepareBuilder();
        result.states_.Clear();
        return this;
      }
      
      public bool HasTemperature {
        get { return result.hasTemperature; }
      }
      public int Temperature {
        get { return result.Temperature; }
        set { SetTemperature(value); }
      }
      public Builder SetTemperature(int value) {
        PrepareBuilder();
        result.hasTemperature = true;
        result.temperature_ = value;
        return this;
      }
      public Builder ClearTemperature() {
        PrepareBuilder();
        result.hasTemperature = false;
        result.temperature_ = 10015;
        return this;
      }
      
      public bool HasFlags {
        get { return result.hasFlags; }
      }
      public bool Flags {
        get { return result.Flags; }
        set { SetFlags(value); }
      }
      public Builder SetFlags(bool value) {
        PrepareBuilder();
        result.hasFlags = true;
        result.flags_ = value;
        return this;
      }
      public Builder ClearFlags() {
        PrepareBuilder();
        result.hasFlags = false;
        result.flags_ = false;
        return this;
      }
      
      public bool HasReaction {
        get { return result.hasReaction; }
      }
      public bool Reaction {
        get { return result.Reaction; }
        set { SetReaction(value); }
      }
      public Builder SetReaction(bool value) {
        PrepareBuilder();
        result.hasReaction = true;
        result.reaction_ = value;
        return this;
      }
      public Builder ClearReaction() {
        PrepareBuilder();
        result.hasReaction = false;
        result.reaction_ = false;
        return this;
      }
    }
    static BasicMaterialInfoMask() {
      object.ReferenceEquals(global::dfproto.Basic.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class NameInfo : pb::GeneratedMessageLite<NameInfo, NameInfo.Builder> {
    private NameInfo() { }
    private static readonly NameInfo defaultInstance = new NameInfo().MakeReadOnly();
    private static readonly string[] _nameInfoFieldNames = new string[] { "english_name", "first_name", "language_id", "last_name", "nickname" };
    private static readonly uint[] _nameInfoFieldTags = new uint[] { 42, 10, 24, 34, 18 };
    public static NameInfo DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NameInfo DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NameInfo ThisMessage {
      get { return this; }
    }
    
    public const int FirstNameFieldNumber = 1;
    private bool hasFirstName;
    private string firstName_ = "";
    public bool HasFirstName {
      get { return hasFirstName; }
    }
    public string FirstName {
      get { return firstName_; }
    }
    
    public const int NicknameFieldNumber = 2;
    private bool hasNickname;
    private string nickname_ = "";
    public bool HasNickname {
      get { return hasNickname; }
    }
    public string Nickname {
      get { return nickname_; }
    }
    
    public const int LanguageIdFieldNumber = 3;
    private bool hasLanguageId;
    private int languageId_ = -1;
    public bool HasLanguageId {
      get { return hasLanguageId; }
    }
    public int LanguageId {
      get { return languageId_; }
    }
    
    public const int LastNameFieldNumber = 4;
    private bool hasLastName;
    private string lastName_ = "";
    public bool HasLastName {
      get { return hasLastName; }
    }
    public string LastName {
      get { return lastName_; }
    }
    
    public const int EnglishNameFieldNumber = 5;
    private bool hasEnglishName;
    private string englishName_ = "";
    public bool HasEnglishName {
      get { return hasEnglishName; }
    }
    public string EnglishName {
      get { return englishName_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _nameInfoFieldNames;
      if (hasFirstName) {
        output.WriteString(1, field_names[1], FirstName);
      }
      if (hasNickname) {
        output.WriteString(2, field_names[4], Nickname);
      }
      if (hasLanguageId) {
        output.WriteInt32(3, field_names[2], LanguageId);
      }
      if (hasLastName) {
        output.WriteString(4, field_names[3], LastName);
      }
      if (hasEnglishName) {
        output.WriteString(5, field_names[0], EnglishName);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasFirstName) {
          size += pb::CodedOutputStream.ComputeStringSize(1, FirstName);
        }
        if (hasNickname) {
          size += pb::CodedOutputStream.ComputeStringSize(2, Nickname);
        }
        if (hasLanguageId) {
          size += pb::CodedOutputStream.ComputeInt32Size(3, LanguageId);
        }
        if (hasLastName) {
          size += pb::CodedOutputStream.ComputeStringSize(4, LastName);
        }
        if (hasEnglishName) {
          size += pb::CodedOutputStream.ComputeStringSize(5, EnglishName);
        }
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasFirstName) hash ^= firstName_.GetHashCode();
      if (hasNickname) hash ^= nickname_.GetHashCode();
      if (hasLanguageId) hash ^= languageId_.GetHashCode();
      if (hasLastName) hash ^= lastName_.GetHashCode();
      if (hasEnglishName) hash ^= englishName_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      NameInfo other = obj as NameInfo;
      if (other == null) return false;
      if (hasFirstName != other.hasFirstName || (hasFirstName && !firstName_.Equals(other.firstName_))) return false;
      if (hasNickname != other.hasNickname || (hasNickname && !nickname_.Equals(other.nickname_))) return false;
      if (hasLanguageId != other.hasLanguageId || (hasLanguageId && !languageId_.Equals(other.languageId_))) return false;
      if (hasLastName != other.hasLastName || (hasLastName && !lastName_.Equals(other.lastName_))) return false;
      if (hasEnglishName != other.hasEnglishName || (hasEnglishName && !englishName_.Equals(other.englishName_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("first_name", hasFirstName, firstName_, writer);
      PrintField("nickname", hasNickname, nickname_, writer);
      PrintField("language_id", hasLanguageId, languageId_, writer);
      PrintField("last_name", hasLastName, lastName_, writer);
      PrintField("english_name", hasEnglishName, englishName_, writer);
    }
    #endregion
    
    public static NameInfo ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NameInfo ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NameInfo ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NameInfo ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NameInfo ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NameInfo ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NameInfo ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NameInfo ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NameInfo ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NameInfo ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NameInfo MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NameInfo prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilderLite<NameInfo, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NameInfo cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NameInfo result;
      
      private NameInfo PrepareBuilder() {
        if (resultIsReadOnly) {
          NameInfo original = result;
          result = new NameInfo();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NameInfo MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override NameInfo DefaultInstanceForType {
        get { return global::dfproto.NameInfo.DefaultInstance; }
      }
      
      public override NameInfo BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is NameInfo) {
          return MergeFrom((NameInfo) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NameInfo other) {
        if (other == global::dfproto.NameInfo.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasFirstName) {
          FirstName = other.FirstName;
        }
        if (other.HasNickname) {
          Nickname = other.Nickname;
        }
        if (other.HasLanguageId) {
          LanguageId = other.LanguageId;
        }
        if (other.HasLastName) {
          LastName = other.LastName;
        }
        if (other.HasEnglishName) {
          EnglishName = other.EnglishName;
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_nameInfoFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _nameInfoFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasFirstName = input.ReadString(ref result.firstName_);
              break;
            }
            case 18: {
              result.hasNickname = input.ReadString(ref result.nickname_);
              break;
            }
            case 24: {
              result.hasLanguageId = input.ReadInt32(ref result.languageId_);
              break;
            }
            case 34: {
              result.hasLastName = input.ReadString(ref result.lastName_);
              break;
            }
            case 42: {
              result.hasEnglishName = input.ReadString(ref result.englishName_);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasFirstName {
        get { return result.hasFirstName; }
      }
      public string FirstName {
        get { return result.FirstName; }
        set { SetFirstName(value); }
      }
      public Builder SetFirstName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasFirstName = true;
        result.firstName_ = value;
        return this;
      }
      public Builder ClearFirstName() {
        PrepareBuilder();
        result.hasFirstName = false;
        result.firstName_ = "";
        return this;
      }
      
      public bool HasNickname {
        get { return result.hasNickname; }
      }
      public string Nickname {
        get { return result.Nickname; }
        set { SetNickname(value); }
      }
      public Builder SetNickname(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasNickname = true;
        result.nickname_ = value;
        return this;
      }
      public Builder ClearNickname() {
        PrepareBuilder();
        result.hasNickname = false;
        result.nickname_ = "";
        return this;
      }
      
      public bool HasLanguageId {
        get { return result.hasLanguageId; }
      }
      public int LanguageId {
        get { return result.LanguageId; }
        set { SetLanguageId(value); }
      }
      public Builder SetLanguageId(int value) {
        PrepareBuilder();
        result.hasLanguageId = true;
        result.languageId_ = value;
        return this;
      }
      public Builder ClearLanguageId() {
        PrepareBuilder();
        result.hasLanguageId = false;
        result.languageId_ = -1;
        return this;
      }
      
      public bool HasLastName {
        get { return result.hasLastName; }
      }
      public string LastName {
        get { return result.LastName; }
        set { SetLastName(value); }
      }
      public Builder SetLastName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasLastName = true;
        result.lastName_ = value;
        return this;
      }
      public Builder ClearLastName() {
        PrepareBuilder();
        result.hasLastName = false;
        result.lastName_ = "";
        return this;
      }
      
      public bool HasEnglishName {
        get { return result.hasEnglishName; }
      }
      public string EnglishName {
        get { return result.EnglishName; }
        set { SetEnglishName(value); }
      }
      public Builder SetEnglishName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasEnglishName = true;
        result.englishName_ = value;
        return this;
      }
      public Builder ClearEnglishName() {
        PrepareBuilder();
        result.hasEnglishName = false;
        result.englishName_ = "";
        return this;
      }
    }
    static NameInfo() {
      object.ReferenceEquals(global::dfproto.Basic.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class NameTriple : pb::GeneratedMessageLite<NameTriple, NameTriple.Builder> {
    private NameTriple() { }
    private static readonly NameTriple defaultInstance = new NameTriple().MakeReadOnly();
    private static readonly string[] _nameTripleFieldNames = new string[] { "adjective", "normal", "plural" };
    private static readonly uint[] _nameTripleFieldTags = new uint[] { 26, 10, 18 };
    public static NameTriple DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NameTriple DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NameTriple ThisMessage {
      get { return this; }
    }
    
    public const int NormalFieldNumber = 1;
    private bool hasNormal;
    private string normal_ = "";
    public bool HasNormal {
      get { return hasNormal; }
    }
    public string Normal {
      get { return normal_; }
    }
    
    public const int PluralFieldNumber = 2;
    private bool hasPlural;
    private string plural_ = "";
    public bool HasPlural {
      get { return hasPlural; }
    }
    public string Plural {
      get { return plural_; }
    }
    
    public const int AdjectiveFieldNumber = 3;
    private bool hasAdjective;
    private string adjective_ = "";
    public bool HasAdjective {
      get { return hasAdjective; }
    }
    public string Adjective {
      get { return adjective_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasNormal) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _nameTripleFieldNames;
      if (hasNormal) {
        output.WriteString(1, field_names[1], Normal);
      }
      if (hasPlural) {
        output.WriteString(2, field_names[2], Plural);
      }
      if (hasAdjective) {
        output.WriteString(3, field_names[0], Adjective);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasNormal) {
          size += pb::CodedOutputStream.ComputeStringSize(1, Normal);
        }
        if (hasPlural) {
          size += pb::CodedOutputStream.ComputeStringSize(2, Plural);
        }
        if (hasAdjective) {
          size += pb::CodedOutputStream.ComputeStringSize(3, Adjective);
        }
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasNormal) hash ^= normal_.GetHashCode();
      if (hasPlural) hash ^= plural_.GetHashCode();
      if (hasAdjective) hash ^= adjective_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      NameTriple other = obj as NameTriple;
      if (other == null) return false;
      if (hasNormal != other.hasNormal || (hasNormal && !normal_.Equals(other.normal_))) return false;
      if (hasPlural != other.hasPlural || (hasPlural && !plural_.Equals(other.plural_))) return false;
      if (hasAdjective != other.hasAdjective || (hasAdjective && !adjective_.Equals(other.adjective_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("normal", hasNormal, normal_, writer);
      PrintField("plural", hasPlural, plural_, writer);
      PrintField("adjective", hasAdjective, adjective_, writer);
    }
    #endregion
    
    public static NameTriple ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NameTriple ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NameTriple ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NameTriple ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NameTriple ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NameTriple ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NameTriple ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NameTriple ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NameTriple ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NameTriple ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NameTriple MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NameTriple prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilderLite<NameTriple, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NameTriple cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NameTriple result;
      
      private NameTriple PrepareBuilder() {
        if (resultIsReadOnly) {
          NameTriple original = result;
          result = new NameTriple();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NameTriple MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override NameTriple DefaultInstanceForType {
        get { return global::dfproto.NameTriple.DefaultInstance; }
      }
      
      public override NameTriple BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is NameTriple) {
          return MergeFrom((NameTriple) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NameTriple other) {
        if (other == global::dfproto.NameTriple.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasNormal) {
          Normal = other.Normal;
        }
        if (other.HasPlural) {
          Plural = other.Plural;
        }
        if (other.HasAdjective) {
          Adjective = other.Adjective;
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_nameTripleFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _nameTripleFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasNormal = input.ReadString(ref result.normal_);
              break;
            }
            case 18: {
              result.hasPlural = input.ReadString(ref result.plural_);
              break;
            }
            case 26: {
              result.hasAdjective = input.ReadString(ref result.adjective_);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasNormal {
        get { return result.hasNormal; }
      }
      public string Normal {
        get { return result.Normal; }
        set { SetNormal(value); }
      }
      public Builder SetNormal(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasNormal = true;
        result.normal_ = value;
        return this;
      }
      public Builder ClearNormal() {
        PrepareBuilder();
        result.hasNormal = false;
        result.normal_ = "";
        return this;
      }
      
      public bool HasPlural {
        get { return result.hasPlural; }
      }
      public string Plural {
        get { return result.Plural; }
        set { SetPlural(value); }
      }
      public Builder SetPlural(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPlural = true;
        result.plural_ = value;
        return this;
      }
      public Builder ClearPlural() {
        PrepareBuilder();
        result.hasPlural = false;
        result.plural_ = "";
        return this;
      }
      
      public bool HasAdjective {
        get { return result.hasAdjective; }
      }
      public string Adjective {
        get { return result.Adjective; }
        set { SetAdjective(value); }
      }
      public Builder SetAdjective(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasAdjective = true;
        result.adjective_ = value;
        return this;
      }
      public Builder ClearAdjective() {
        PrepareBuilder();
        result.hasAdjective = false;
        result.adjective_ = "";
        return this;
      }
    }
    static NameTriple() {
      object.ReferenceEquals(global::dfproto.Basic.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class UnitCurseInfo : pb::GeneratedMessageLite<UnitCurseInfo, UnitCurseInfo.Builder> {
    private UnitCurseInfo() { }
    private static readonly UnitCurseInfo defaultInstance = new UnitCurseInfo().MakeReadOnly();
    private static readonly string[] _unitCurseInfoFieldNames = new string[] { "add_tags1", "add_tags2", "name", "rem_tags1", "rem_tags2" };
    private static readonly uint[] _unitCurseInfoFieldTags = new uint[] { 13, 29, 42, 21, 37 };
    public static UnitCurseInfo DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override UnitCurseInfo DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override UnitCurseInfo ThisMessage {
      get { return this; }
    }
    
    public const int AddTags1FieldNumber = 1;
    private bool hasAddTags1;
    private uint addTags1_;
    public bool HasAddTags1 {
      get { return hasAddTags1; }
    }
    [global::System.CLSCompliant(false)]
    public uint AddTags1 {
      get { return addTags1_; }
    }
    
    public const int RemTags1FieldNumber = 2;
    private bool hasRemTags1;
    private uint remTags1_;
    public bool HasRemTags1 {
      get { return hasRemTags1; }
    }
    [global::System.CLSCompliant(false)]
    public uint RemTags1 {
      get { return remTags1_; }
    }
    
    public const int AddTags2FieldNumber = 3;
    private bool hasAddTags2;
    private uint addTags2_;
    public bool HasAddTags2 {
      get { return hasAddTags2; }
    }
    [global::System.CLSCompliant(false)]
    public uint AddTags2 {
      get { return addTags2_; }
    }
    
    public const int RemTags2FieldNumber = 4;
    private bool hasRemTags2;
    private uint remTags2_;
    public bool HasRemTags2 {
      get { return hasRemTags2; }
    }
    [global::System.CLSCompliant(false)]
    public uint RemTags2 {
      get { return remTags2_; }
    }
    
    public const int NameFieldNumber = 5;
    private bool hasName;
    private global::dfproto.NameTriple name_;
    public bool HasName {
      get { return hasName; }
    }
    public global::dfproto.NameTriple Name {
      get { return name_ ?? global::dfproto.NameTriple.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasAddTags1) return false;
        if (!hasRemTags1) return false;
        if (!hasAddTags2) return false;
        if (!hasRemTags2) return false;
        if (HasName) {
          if (!Name.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _unitCurseInfoFieldNames;
      if (hasAddTags1) {
        output.WriteFixed32(1, field_names[0], AddTags1);
      }
      if (hasRemTags1) {
        output.WriteFixed32(2, field_names[3], RemTags1);
      }
      if (hasAddTags2) {
        output.WriteFixed32(3, field_names[1], AddTags2);
      }
      if (hasRemTags2) {
        output.WriteFixed32(4, field_names[4], RemTags2);
      }
      if (hasName) {
        output.WriteMessage(5, field_names[2], Name);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasAddTags1) {
          size += pb::CodedOutputStream.ComputeFixed32Size(1, AddTags1);
        }
        if (hasRemTags1) {
          size += pb::CodedOutputStream.ComputeFixed32Size(2, RemTags1);
        }
        if (hasAddTags2) {
          size += pb::CodedOutputStream.ComputeFixed32Size(3, AddTags2);
        }
        if (hasRemTags2) {
          size += pb::CodedOutputStream.ComputeFixed32Size(4, RemTags2);
        }
        if (hasName) {
          size += pb::CodedOutputStream.ComputeMessageSize(5, Name);
        }
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasAddTags1) hash ^= addTags1_.GetHashCode();
      if (hasRemTags1) hash ^= remTags1_.GetHashCode();
      if (hasAddTags2) hash ^= addTags2_.GetHashCode();
      if (hasRemTags2) hash ^= remTags2_.GetHashCode();
      if (hasName) hash ^= name_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      UnitCurseInfo other = obj as UnitCurseInfo;
      if (other == null) return false;
      if (hasAddTags1 != other.hasAddTags1 || (hasAddTags1 && !addTags1_.Equals(other.addTags1_))) return false;
      if (hasRemTags1 != other.hasRemTags1 || (hasRemTags1 && !remTags1_.Equals(other.remTags1_))) return false;
      if (hasAddTags2 != other.hasAddTags2 || (hasAddTags2 && !addTags2_.Equals(other.addTags2_))) return false;
      if (hasRemTags2 != other.hasRemTags2 || (hasRemTags2 && !remTags2_.Equals(other.remTags2_))) return false;
      if (hasName != other.hasName || (hasName && !name_.Equals(other.name_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("add_tags1", hasAddTags1, addTags1_, writer);
      PrintField("rem_tags1", hasRemTags1, remTags1_, writer);
      PrintField("add_tags2", hasAddTags2, addTags2_, writer);
      PrintField("rem_tags2", hasRemTags2, remTags2_, writer);
      PrintField("name", hasName, name_, writer);
    }
    #endregion
    
    public static UnitCurseInfo ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static UnitCurseInfo ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static UnitCurseInfo ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static UnitCurseInfo ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static UnitCurseInfo ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static UnitCurseInfo ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static UnitCurseInfo ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static UnitCurseInfo ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static UnitCurseInfo ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static UnitCurseInfo ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private UnitCurseInfo MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(UnitCurseInfo prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilderLite<UnitCurseInfo, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(UnitCurseInfo cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private UnitCurseInfo result;
      
      private UnitCurseInfo PrepareBuilder() {
        if (resultIsReadOnly) {
          UnitCurseInfo original = result;
          result = new UnitCurseInfo();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override UnitCurseInfo MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override UnitCurseInfo DefaultInstanceForType {
        get { return global::dfproto.UnitCurseInfo.DefaultInstance; }
      }
      
      public override UnitCurseInfo BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is UnitCurseInfo) {
          return MergeFrom((UnitCurseInfo) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(UnitCurseInfo other) {
        if (other == global::dfproto.UnitCurseInfo.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasAddTags1) {
          AddTags1 = other.AddTags1;
        }
        if (other.HasRemTags1) {
          RemTags1 = other.RemTags1;
        }
        if (other.HasAddTags2) {
          AddTags2 = other.AddTags2;
        }
        if (other.HasRemTags2) {
          RemTags2 = other.RemTags2;
        }
        if (other.HasName) {
          MergeName(other.Name);
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_unitCurseInfoFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _unitCurseInfoFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 13: {
              result.hasAddTags1 = input.ReadFixed32(ref result.addTags1_);
              break;
            }
            case 21: {
              result.hasRemTags1 = input.ReadFixed32(ref result.remTags1_);
              break;
            }
            case 29: {
              result.hasAddTags2 = input.ReadFixed32(ref result.addTags2_);
              break;
            }
            case 37: {
              result.hasRemTags2 = input.ReadFixed32(ref result.remTags2_);
              break;
            }
            case 42: {
              global::dfproto.NameTriple.Builder subBuilder = global::dfproto.NameTriple.CreateBuilder();
              if (result.hasName) {
                subBuilder.MergeFrom(Name);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Name = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasAddTags1 {
        get { return result.hasAddTags1; }
      }
      [global::System.CLSCompliant(false)]
      public uint AddTags1 {
        get { return result.AddTags1; }
        set { SetAddTags1(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetAddTags1(uint value) {
        PrepareBuilder();
        result.hasAddTags1 = true;
        result.addTags1_ = value;
        return this;
      }
      public Builder ClearAddTags1() {
        PrepareBuilder();
        result.hasAddTags1 = false;
        result.addTags1_ = 0;
        return this;
      }
      
      public bool HasRemTags1 {
        get { return result.hasRemTags1; }
      }
      [global::System.CLSCompliant(false)]
      public uint RemTags1 {
        get { return result.RemTags1; }
        set { SetRemTags1(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetRemTags1(uint value) {
        PrepareBuilder();
        result.hasRemTags1 = true;
        result.remTags1_ = value;
        return this;
      }
      public Builder ClearRemTags1() {
        PrepareBuilder();
        result.hasRemTags1 = false;
        result.remTags1_ = 0;
        return this;
      }
      
      public bool HasAddTags2 {
        get { return result.hasAddTags2; }
      }
      [global::System.CLSCompliant(false)]
      public uint AddTags2 {
        get { return result.AddTags2; }
        set { SetAddTags2(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetAddTags2(uint value) {
        PrepareBuilder();
        result.hasAddTags2 = true;
        result.addTags2_ = value;
        return this;
      }
      public Builder ClearAddTags2() {
        PrepareBuilder();
        result.hasAddTags2 = false;
        result.addTags2_ = 0;
        return this;
      }
      
      public bool HasRemTags2 {
        get { return result.hasRemTags2; }
      }
      [global::System.CLSCompliant(false)]
      public uint RemTags2 {
        get { return result.RemTags2; }
        set { SetRemTags2(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetRemTags2(uint value) {
        PrepareBuilder();
        result.hasRemTags2 = true;
        result.remTags2_ = value;
        return this;
      }
      public Builder ClearRemTags2() {
        PrepareBuilder();
        result.hasRemTags2 = false;
        result.remTags2_ = 0;
        return this;
      }
      
      public bool HasName {
       get { return result.hasName; }
      }
      public global::dfproto.NameTriple Name {
        get { return result.Name; }
        set { SetName(value); }
      }
      public Builder SetName(global::dfproto.NameTriple value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasName = true;
        result.name_ = value;
        return this;
      }
      public Builder SetName(global::dfproto.NameTriple.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasName = true;
        result.name_ = builderForValue.Build();
        return this;
      }
      public Builder MergeName(global::dfproto.NameTriple value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasName &&
            result.name_ != global::dfproto.NameTriple.DefaultInstance) {
            result.name_ = global::dfproto.NameTriple.CreateBuilder(result.name_).MergeFrom(value).BuildPartial();
        } else {
          result.name_ = value;
        }
        result.hasName = true;
        return this;
      }
      public Builder ClearName() {
        PrepareBuilder();
        result.hasName = false;
        result.name_ = null;
        return this;
      }
    }
    static UnitCurseInfo() {
      object.ReferenceEquals(global::dfproto.Basic.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class SkillInfo : pb::GeneratedMessageLite<SkillInfo, SkillInfo.Builder> {
    private SkillInfo() { }
    private static readonly SkillInfo defaultInstance = new SkillInfo().MakeReadOnly();
    private static readonly string[] _skillInfoFieldNames = new string[] { "experience", "id", "level" };
    private static readonly uint[] _skillInfoFieldTags = new uint[] { 24, 8, 16 };
    public static SkillInfo DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override SkillInfo DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override SkillInfo ThisMessage {
      get { return this; }
    }
    
    public const int IdFieldNumber = 1;
    private bool hasId;
    private int id_;
    public bool HasId {
      get { return hasId; }
    }
    public int Id {
      get { return id_; }
    }
    
    public const int LevelFieldNumber = 2;
    private bool hasLevel;
    private int level_;
    public bool HasLevel {
      get { return hasLevel; }
    }
    public int Level {
      get { return level_; }
    }
    
    public const int ExperienceFieldNumber = 3;
    private bool hasExperience;
    private int experience_;
    public bool HasExperience {
      get { return hasExperience; }
    }
    public int Experience {
      get { return experience_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasId) return false;
        if (!hasLevel) return false;
        if (!hasExperience) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _skillInfoFieldNames;
      if (hasId) {
        output.WriteInt32(1, field_names[1], Id);
      }
      if (hasLevel) {
        output.WriteInt32(2, field_names[2], Level);
      }
      if (hasExperience) {
        output.WriteInt32(3, field_names[0], Experience);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasId) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, Id);
        }
        if (hasLevel) {
          size += pb::CodedOutputStream.ComputeInt32Size(2, Level);
        }
        if (hasExperience) {
          size += pb::CodedOutputStream.ComputeInt32Size(3, Experience);
        }
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasId) hash ^= id_.GetHashCode();
      if (hasLevel) hash ^= level_.GetHashCode();
      if (hasExperience) hash ^= experience_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      SkillInfo other = obj as SkillInfo;
      if (other == null) return false;
      if (hasId != other.hasId || (hasId && !id_.Equals(other.id_))) return false;
      if (hasLevel != other.hasLevel || (hasLevel && !level_.Equals(other.level_))) return false;
      if (hasExperience != other.hasExperience || (hasExperience && !experience_.Equals(other.experience_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("id", hasId, id_, writer);
      PrintField("level", hasLevel, level_, writer);
      PrintField("experience", hasExperience, experience_, writer);
    }
    #endregion
    
    public static SkillInfo ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SkillInfo ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SkillInfo ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SkillInfo ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SkillInfo ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SkillInfo ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static SkillInfo ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static SkillInfo ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static SkillInfo ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SkillInfo ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private SkillInfo MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(SkillInfo prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilderLite<SkillInfo, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(SkillInfo cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private SkillInfo result;
      
      private SkillInfo PrepareBuilder() {
        if (resultIsReadOnly) {
          SkillInfo original = result;
          result = new SkillInfo();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override SkillInfo MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override SkillInfo DefaultInstanceForType {
        get { return global::dfproto.SkillInfo.DefaultInstance; }
      }
      
      public override SkillInfo BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is SkillInfo) {
          return MergeFrom((SkillInfo) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(SkillInfo other) {
        if (other == global::dfproto.SkillInfo.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasId) {
          Id = other.Id;
        }
        if (other.HasLevel) {
          Level = other.Level;
        }
        if (other.HasExperience) {
          Experience = other.Experience;
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_skillInfoFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _skillInfoFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasId = input.ReadInt32(ref result.id_);
              break;
            }
            case 16: {
              result.hasLevel = input.ReadInt32(ref result.level_);
              break;
            }
            case 24: {
              result.hasExperience = input.ReadInt32(ref result.experience_);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasId {
        get { return result.hasId; }
      }
      public int Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(int value) {
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = 0;
        return this;
      }
      
      public bool HasLevel {
        get { return result.hasLevel; }
      }
      public int Level {
        get { return result.Level; }
        set { SetLevel(value); }
      }
      public Builder SetLevel(int value) {
        PrepareBuilder();
        result.hasLevel = true;
        result.level_ = value;
        return this;
      }
      public Builder ClearLevel() {
        PrepareBuilder();
        result.hasLevel = false;
        result.level_ = 0;
        return this;
      }
      
      public bool HasExperience {
        get { return result.hasExperience; }
      }
      public int Experience {
        get { return result.Experience; }
        set { SetExperience(value); }
      }
      public Builder SetExperience(int value) {
        PrepareBuilder();
        result.hasExperience = true;
        result.experience_ = value;
        return this;
      }
      public Builder ClearExperience() {
        PrepareBuilder();
        result.hasExperience = false;
        result.experience_ = 0;
        return this;
      }
    }
    static SkillInfo() {
      object.ReferenceEquals(global::dfproto.Basic.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class BasicUnitInfo : pb::GeneratedMessageLite<BasicUnitInfo, BasicUnitInfo.Builder> {
    private BasicUnitInfo() { }
    private static readonly BasicUnitInfo defaultInstance = new BasicUnitInfo().MakeReadOnly();
    private static readonly string[] _basicUnitInfoFieldNames = new string[] { "burrows", "caste", "civ_id", "curse", "custom_profession", "death_flags", "death_id", "flags1", "flags2", "flags3", "gender", "histfig_id", "labors", "name", "pos_x", "pos_y", "pos_z", "profession", "race", "skills", "squad_id", "squad_position", "unit_id" };
    private static readonly uint[] _basicUnitInfoFieldTags = new uint[] { 168, 56, 72, 130, 186, 144, 136, 29, 37, 45, 64, 80, 88, 18, 104, 112, 120, 176, 48, 98, 152, 160, 8 };
    public static BasicUnitInfo DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override BasicUnitInfo DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override BasicUnitInfo ThisMessage {
      get { return this; }
    }
    
    public const int UnitIdFieldNumber = 1;
    private bool hasUnitId;
    private int unitId_;
    public bool HasUnitId {
      get { return hasUnitId; }
    }
    public int UnitId {
      get { return unitId_; }
    }
    
    public const int PosXFieldNumber = 13;
    private bool hasPosX;
    private int posX_;
    public bool HasPosX {
      get { return hasPosX; }
    }
    public int PosX {
      get { return posX_; }
    }
    
    public const int PosYFieldNumber = 14;
    private bool hasPosY;
    private int posY_;
    public bool HasPosY {
      get { return hasPosY; }
    }
    public int PosY {
      get { return posY_; }
    }
    
    public const int PosZFieldNumber = 15;
    private bool hasPosZ;
    private int posZ_;
    public bool HasPosZ {
      get { return hasPosZ; }
    }
    public int PosZ {
      get { return posZ_; }
    }
    
    public const int NameFieldNumber = 2;
    private bool hasName;
    private global::dfproto.NameInfo name_;
    public bool HasName {
      get { return hasName; }
    }
    public global::dfproto.NameInfo Name {
      get { return name_ ?? global::dfproto.NameInfo.DefaultInstance; }
    }
    
    public const int Flags1FieldNumber = 3;
    private bool hasFlags1;
    private uint flags1_;
    public bool HasFlags1 {
      get { return hasFlags1; }
    }
    [global::System.CLSCompliant(false)]
    public uint Flags1 {
      get { return flags1_; }
    }
    
    public const int Flags2FieldNumber = 4;
    private bool hasFlags2;
    private uint flags2_;
    public bool HasFlags2 {
      get { return hasFlags2; }
    }
    [global::System.CLSCompliant(false)]
    public uint Flags2 {
      get { return flags2_; }
    }
    
    public const int Flags3FieldNumber = 5;
    private bool hasFlags3;
    private uint flags3_;
    public bool HasFlags3 {
      get { return hasFlags3; }
    }
    [global::System.CLSCompliant(false)]
    public uint Flags3 {
      get { return flags3_; }
    }
    
    public const int RaceFieldNumber = 6;
    private bool hasRace;
    private int race_;
    public bool HasRace {
      get { return hasRace; }
    }
    public int Race {
      get { return race_; }
    }
    
    public const int CasteFieldNumber = 7;
    private bool hasCaste;
    private int caste_;
    public bool HasCaste {
      get { return hasCaste; }
    }
    public int Caste {
      get { return caste_; }
    }
    
    public const int GenderFieldNumber = 8;
    private bool hasGender;
    private int gender_ = -1;
    public bool HasGender {
      get { return hasGender; }
    }
    public int Gender {
      get { return gender_; }
    }
    
    public const int CivIdFieldNumber = 9;
    private bool hasCivId;
    private int civId_ = -1;
    public bool HasCivId {
      get { return hasCivId; }
    }
    public int CivId {
      get { return civId_; }
    }
    
    public const int HistfigIdFieldNumber = 10;
    private bool hasHistfigId;
    private int histfigId_ = -1;
    public bool HasHistfigId {
      get { return hasHistfigId; }
    }
    public int HistfigId {
      get { return histfigId_; }
    }
    
    public const int DeathIdFieldNumber = 17;
    private bool hasDeathId;
    private int deathId_ = -1;
    public bool HasDeathId {
      get { return hasDeathId; }
    }
    public int DeathId {
      get { return deathId_; }
    }
    
    public const int DeathFlagsFieldNumber = 18;
    private bool hasDeathFlags;
    private uint deathFlags_;
    public bool HasDeathFlags {
      get { return hasDeathFlags; }
    }
    [global::System.CLSCompliant(false)]
    public uint DeathFlags {
      get { return deathFlags_; }
    }
    
    public const int SquadIdFieldNumber = 19;
    private bool hasSquadId;
    private int squadId_ = -1;
    public bool HasSquadId {
      get { return hasSquadId; }
    }
    public int SquadId {
      get { return squadId_; }
    }
    
    public const int SquadPositionFieldNumber = 20;
    private bool hasSquadPosition;
    private int squadPosition_ = -1;
    public bool HasSquadPosition {
      get { return hasSquadPosition; }
    }
    public int SquadPosition {
      get { return squadPosition_; }
    }
    
    public const int ProfessionFieldNumber = 22;
    private bool hasProfession;
    private int profession_ = -1;
    public bool HasProfession {
      get { return hasProfession; }
    }
    public int Profession {
      get { return profession_; }
    }
    
    public const int CustomProfessionFieldNumber = 23;
    private bool hasCustomProfession;
    private string customProfession_ = "";
    public bool HasCustomProfession {
      get { return hasCustomProfession; }
    }
    public string CustomProfession {
      get { return customProfession_; }
    }
    
    public const int LaborsFieldNumber = 11;
    private pbc::PopsicleList<int> labors_ = new pbc::PopsicleList<int>();
    public scg::IList<int> LaborsList {
      get { return pbc::Lists.AsReadOnly(labors_); }
    }
    public int LaborsCount {
      get { return labors_.Count; }
    }
    public int GetLabors(int index) {
      return labors_[index];
    }
    
    public const int SkillsFieldNumber = 12;
    private pbc::PopsicleList<global::dfproto.SkillInfo> skills_ = new pbc::PopsicleList<global::dfproto.SkillInfo>();
    public scg::IList<global::dfproto.SkillInfo> SkillsList {
      get { return skills_; }
    }
    public int SkillsCount {
      get { return skills_.Count; }
    }
    public global::dfproto.SkillInfo GetSkills(int index) {
      return skills_[index];
    }
    
    public const int CurseFieldNumber = 16;
    private bool hasCurse;
    private global::dfproto.UnitCurseInfo curse_;
    public bool HasCurse {
      get { return hasCurse; }
    }
    public global::dfproto.UnitCurseInfo Curse {
      get { return curse_ ?? global::dfproto.UnitCurseInfo.DefaultInstance; }
    }
    
    public const int BurrowsFieldNumber = 21;
    private pbc::PopsicleList<int> burrows_ = new pbc::PopsicleList<int>();
    public scg::IList<int> BurrowsList {
      get { return pbc::Lists.AsReadOnly(burrows_); }
    }
    public int BurrowsCount {
      get { return burrows_.Count; }
    }
    public int GetBurrows(int index) {
      return burrows_[index];
    }
    
    public override bool IsInitialized {
      get {
        if (!hasUnitId) return false;
        if (!hasPosX) return false;
        if (!hasPosY) return false;
        if (!hasPosZ) return false;
        if (!hasFlags1) return false;
        if (!hasFlags2) return false;
        if (!hasFlags3) return false;
        if (!hasRace) return false;
        if (!hasCaste) return false;
        foreach (global::dfproto.SkillInfo element in SkillsList) {
          if (!element.IsInitialized) return false;
        }
        if (HasCurse) {
          if (!Curse.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _basicUnitInfoFieldNames;
      if (hasUnitId) {
        output.WriteInt32(1, field_names[22], UnitId);
      }
      if (hasName) {
        output.WriteMessage(2, field_names[13], Name);
      }
      if (hasFlags1) {
        output.WriteFixed32(3, field_names[7], Flags1);
      }
      if (hasFlags2) {
        output.WriteFixed32(4, field_names[8], Flags2);
      }
      if (hasFlags3) {
        output.WriteFixed32(5, field_names[9], Flags3);
      }
      if (hasRace) {
        output.WriteInt32(6, field_names[18], Race);
      }
      if (hasCaste) {
        output.WriteInt32(7, field_names[1], Caste);
      }
      if (hasGender) {
        output.WriteInt32(8, field_names[10], Gender);
      }
      if (hasCivId) {
        output.WriteInt32(9, field_names[2], CivId);
      }
      if (hasHistfigId) {
        output.WriteInt32(10, field_names[11], HistfigId);
      }
      if (labors_.Count > 0) {
        output.WriteInt32Array(11, field_names[12], labors_);
      }
      if (skills_.Count > 0) {
        output.WriteMessageArray(12, field_names[19], skills_);
      }
      if (hasPosX) {
        output.WriteInt32(13, field_names[14], PosX);
      }
      if (hasPosY) {
        output.WriteInt32(14, field_names[15], PosY);
      }
      if (hasPosZ) {
        output.WriteInt32(15, field_names[16], PosZ);
      }
      if (hasCurse) {
        output.WriteMessage(16, field_names[3], Curse);
      }
      if (hasDeathId) {
        output.WriteInt32(17, field_names[6], DeathId);
      }
      if (hasDeathFlags) {
        output.WriteUInt32(18, field_names[5], DeathFlags);
      }
      if (hasSquadId) {
        output.WriteInt32(19, field_names[20], SquadId);
      }
      if (hasSquadPosition) {
        output.WriteInt32(20, field_names[21], SquadPosition);
      }
      if (burrows_.Count > 0) {
        output.WriteInt32Array(21, field_names[0], burrows_);
      }
      if (hasProfession) {
        output.WriteInt32(22, field_names[17], Profession);
      }
      if (hasCustomProfession) {
        output.WriteString(23, field_names[4], CustomProfession);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasUnitId) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, UnitId);
        }
        if (hasPosX) {
          size += pb::CodedOutputStream.ComputeInt32Size(13, PosX);
        }
        if (hasPosY) {
          size += pb::CodedOutputStream.ComputeInt32Size(14, PosY);
        }
        if (hasPosZ) {
          size += pb::CodedOutputStream.ComputeInt32Size(15, PosZ);
        }
        if (hasName) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, Name);
        }
        if (hasFlags1) {
          size += pb::CodedOutputStream.ComputeFixed32Size(3, Flags1);
        }
        if (hasFlags2) {
          size += pb::CodedOutputStream.ComputeFixed32Size(4, Flags2);
        }
        if (hasFlags3) {
          size += pb::CodedOutputStream.ComputeFixed32Size(5, Flags3);
        }
        if (hasRace) {
          size += pb::CodedOutputStream.ComputeInt32Size(6, Race);
        }
        if (hasCaste) {
          size += pb::CodedOutputStream.ComputeInt32Size(7, Caste);
        }
        if (hasGender) {
          size += pb::CodedOutputStream.ComputeInt32Size(8, Gender);
        }
        if (hasCivId) {
          size += pb::CodedOutputStream.ComputeInt32Size(9, CivId);
        }
        if (hasHistfigId) {
          size += pb::CodedOutputStream.ComputeInt32Size(10, HistfigId);
        }
        if (hasDeathId) {
          size += pb::CodedOutputStream.ComputeInt32Size(17, DeathId);
        }
        if (hasDeathFlags) {
          size += pb::CodedOutputStream.ComputeUInt32Size(18, DeathFlags);
        }
        if (hasSquadId) {
          size += pb::CodedOutputStream.ComputeInt32Size(19, SquadId);
        }
        if (hasSquadPosition) {
          size += pb::CodedOutputStream.ComputeInt32Size(20, SquadPosition);
        }
        if (hasProfession) {
          size += pb::CodedOutputStream.ComputeInt32Size(22, Profession);
        }
        if (hasCustomProfession) {
          size += pb::CodedOutputStream.ComputeStringSize(23, CustomProfession);
        }
        {
          int dataSize = 0;
          foreach (int element in LaborsList) {
            dataSize += pb::CodedOutputStream.ComputeInt32SizeNoTag(element);
          }
          size += dataSize;
          size += 1 * labors_.Count;
        }
        foreach (global::dfproto.SkillInfo element in SkillsList) {
          size += pb::CodedOutputStream.ComputeMessageSize(12, element);
        }
        if (hasCurse) {
          size += pb::CodedOutputStream.ComputeMessageSize(16, Curse);
        }
        {
          int dataSize = 0;
          foreach (int element in BurrowsList) {
            dataSize += pb::CodedOutputStream.ComputeInt32SizeNoTag(element);
          }
          size += dataSize;
          size += 2 * burrows_.Count;
        }
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasUnitId) hash ^= unitId_.GetHashCode();
      if (hasPosX) hash ^= posX_.GetHashCode();
      if (hasPosY) hash ^= posY_.GetHashCode();
      if (hasPosZ) hash ^= posZ_.GetHashCode();
      if (hasName) hash ^= name_.GetHashCode();
      if (hasFlags1) hash ^= flags1_.GetHashCode();
      if (hasFlags2) hash ^= flags2_.GetHashCode();
      if (hasFlags3) hash ^= flags3_.GetHashCode();
      if (hasRace) hash ^= race_.GetHashCode();
      if (hasCaste) hash ^= caste_.GetHashCode();
      if (hasGender) hash ^= gender_.GetHashCode();
      if (hasCivId) hash ^= civId_.GetHashCode();
      if (hasHistfigId) hash ^= histfigId_.GetHashCode();
      if (hasDeathId) hash ^= deathId_.GetHashCode();
      if (hasDeathFlags) hash ^= deathFlags_.GetHashCode();
      if (hasSquadId) hash ^= squadId_.GetHashCode();
      if (hasSquadPosition) hash ^= squadPosition_.GetHashCode();
      if (hasProfession) hash ^= profession_.GetHashCode();
      if (hasCustomProfession) hash ^= customProfession_.GetHashCode();
      foreach(int i in labors_)
        hash ^= i.GetHashCode();
      foreach(global::dfproto.SkillInfo i in skills_)
        hash ^= i.GetHashCode();
      if (hasCurse) hash ^= curse_.GetHashCode();
      foreach(int i in burrows_)
        hash ^= i.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      BasicUnitInfo other = obj as BasicUnitInfo;
      if (other == null) return false;
      if (hasUnitId != other.hasUnitId || (hasUnitId && !unitId_.Equals(other.unitId_))) return false;
      if (hasPosX != other.hasPosX || (hasPosX && !posX_.Equals(other.posX_))) return false;
      if (hasPosY != other.hasPosY || (hasPosY && !posY_.Equals(other.posY_))) return false;
      if (hasPosZ != other.hasPosZ || (hasPosZ && !posZ_.Equals(other.posZ_))) return false;
      if (hasName != other.hasName || (hasName && !name_.Equals(other.name_))) return false;
      if (hasFlags1 != other.hasFlags1 || (hasFlags1 && !flags1_.Equals(other.flags1_))) return false;
      if (hasFlags2 != other.hasFlags2 || (hasFlags2 && !flags2_.Equals(other.flags2_))) return false;
      if (hasFlags3 != other.hasFlags3 || (hasFlags3 && !flags3_.Equals(other.flags3_))) return false;
      if (hasRace != other.hasRace || (hasRace && !race_.Equals(other.race_))) return false;
      if (hasCaste != other.hasCaste || (hasCaste && !caste_.Equals(other.caste_))) return false;
      if (hasGender != other.hasGender || (hasGender && !gender_.Equals(other.gender_))) return false;
      if (hasCivId != other.hasCivId || (hasCivId && !civId_.Equals(other.civId_))) return false;
      if (hasHistfigId != other.hasHistfigId || (hasHistfigId && !histfigId_.Equals(other.histfigId_))) return false;
      if (hasDeathId != other.hasDeathId || (hasDeathId && !deathId_.Equals(other.deathId_))) return false;
      if (hasDeathFlags != other.hasDeathFlags || (hasDeathFlags && !deathFlags_.Equals(other.deathFlags_))) return false;
      if (hasSquadId != other.hasSquadId || (hasSquadId && !squadId_.Equals(other.squadId_))) return false;
      if (hasSquadPosition != other.hasSquadPosition || (hasSquadPosition && !squadPosition_.Equals(other.squadPosition_))) return false;
      if (hasProfession != other.hasProfession || (hasProfession && !profession_.Equals(other.profession_))) return false;
      if (hasCustomProfession != other.hasCustomProfession || (hasCustomProfession && !customProfession_.Equals(other.customProfession_))) return false;
      if(labors_.Count != other.labors_.Count) return false;
      for(int ix=0; ix < labors_.Count; ix++)
        if(!labors_[ix].Equals(other.labors_[ix])) return false;
      if(skills_.Count != other.skills_.Count) return false;
      for(int ix=0; ix < skills_.Count; ix++)
        if(!skills_[ix].Equals(other.skills_[ix])) return false;
      if (hasCurse != other.hasCurse || (hasCurse && !curse_.Equals(other.curse_))) return false;
      if(burrows_.Count != other.burrows_.Count) return false;
      for(int ix=0; ix < burrows_.Count; ix++)
        if(!burrows_[ix].Equals(other.burrows_[ix])) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("unit_id", hasUnitId, unitId_, writer);
      PrintField("name", hasName, name_, writer);
      PrintField("flags1", hasFlags1, flags1_, writer);
      PrintField("flags2", hasFlags2, flags2_, writer);
      PrintField("flags3", hasFlags3, flags3_, writer);
      PrintField("race", hasRace, race_, writer);
      PrintField("caste", hasCaste, caste_, writer);
      PrintField("gender", hasGender, gender_, writer);
      PrintField("civ_id", hasCivId, civId_, writer);
      PrintField("histfig_id", hasHistfigId, histfigId_, writer);
      PrintField("labors", labors_, writer);
      PrintField("skills", skills_, writer);
      PrintField("pos_x", hasPosX, posX_, writer);
      PrintField("pos_y", hasPosY, posY_, writer);
      PrintField("pos_z", hasPosZ, posZ_, writer);
      PrintField("curse", hasCurse, curse_, writer);
      PrintField("death_id", hasDeathId, deathId_, writer);
      PrintField("death_flags", hasDeathFlags, deathFlags_, writer);
      PrintField("squad_id", hasSquadId, squadId_, writer);
      PrintField("squad_position", hasSquadPosition, squadPosition_, writer);
      PrintField("burrows", burrows_, writer);
      PrintField("profession", hasProfession, profession_, writer);
      PrintField("custom_profession", hasCustomProfession, customProfession_, writer);
    }
    #endregion
    
    public static BasicUnitInfo ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static BasicUnitInfo ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static BasicUnitInfo ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static BasicUnitInfo ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static BasicUnitInfo ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static BasicUnitInfo ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static BasicUnitInfo ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static BasicUnitInfo ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static BasicUnitInfo ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static BasicUnitInfo ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private BasicUnitInfo MakeReadOnly() {
      labors_.MakeReadOnly();
      skills_.MakeReadOnly();
      burrows_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(BasicUnitInfo prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilderLite<BasicUnitInfo, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(BasicUnitInfo cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private BasicUnitInfo result;
      
      private BasicUnitInfo PrepareBuilder() {
        if (resultIsReadOnly) {
          BasicUnitInfo original = result;
          result = new BasicUnitInfo();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override BasicUnitInfo MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override BasicUnitInfo DefaultInstanceForType {
        get { return global::dfproto.BasicUnitInfo.DefaultInstance; }
      }
      
      public override BasicUnitInfo BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is BasicUnitInfo) {
          return MergeFrom((BasicUnitInfo) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(BasicUnitInfo other) {
        if (other == global::dfproto.BasicUnitInfo.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasUnitId) {
          UnitId = other.UnitId;
        }
        if (other.HasPosX) {
          PosX = other.PosX;
        }
        if (other.HasPosY) {
          PosY = other.PosY;
        }
        if (other.HasPosZ) {
          PosZ = other.PosZ;
        }
        if (other.HasName) {
          MergeName(other.Name);
        }
        if (other.HasFlags1) {
          Flags1 = other.Flags1;
        }
        if (other.HasFlags2) {
          Flags2 = other.Flags2;
        }
        if (other.HasFlags3) {
          Flags3 = other.Flags3;
        }
        if (other.HasRace) {
          Race = other.Race;
        }
        if (other.HasCaste) {
          Caste = other.Caste;
        }
        if (other.HasGender) {
          Gender = other.Gender;
        }
        if (other.HasCivId) {
          CivId = other.CivId;
        }
        if (other.HasHistfigId) {
          HistfigId = other.HistfigId;
        }
        if (other.HasDeathId) {
          DeathId = other.DeathId;
        }
        if (other.HasDeathFlags) {
          DeathFlags = other.DeathFlags;
        }
        if (other.HasSquadId) {
          SquadId = other.SquadId;
        }
        if (other.HasSquadPosition) {
          SquadPosition = other.SquadPosition;
        }
        if (other.HasProfession) {
          Profession = other.Profession;
        }
        if (other.HasCustomProfession) {
          CustomProfession = other.CustomProfession;
        }
        if (other.labors_.Count != 0) {
          result.labors_.Add(other.labors_);
        }
        if (other.skills_.Count != 0) {
          result.skills_.Add(other.skills_);
        }
        if (other.HasCurse) {
          MergeCurse(other.Curse);
        }
        if (other.burrows_.Count != 0) {
          result.burrows_.Add(other.burrows_);
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_basicUnitInfoFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _basicUnitInfoFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasUnitId = input.ReadInt32(ref result.unitId_);
              break;
            }
            case 18: {
              global::dfproto.NameInfo.Builder subBuilder = global::dfproto.NameInfo.CreateBuilder();
              if (result.hasName) {
                subBuilder.MergeFrom(Name);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Name = subBuilder.BuildPartial();
              break;
            }
            case 29: {
              result.hasFlags1 = input.ReadFixed32(ref result.flags1_);
              break;
            }
            case 37: {
              result.hasFlags2 = input.ReadFixed32(ref result.flags2_);
              break;
            }
            case 45: {
              result.hasFlags3 = input.ReadFixed32(ref result.flags3_);
              break;
            }
            case 48: {
              result.hasRace = input.ReadInt32(ref result.race_);
              break;
            }
            case 56: {
              result.hasCaste = input.ReadInt32(ref result.caste_);
              break;
            }
            case 64: {
              result.hasGender = input.ReadInt32(ref result.gender_);
              break;
            }
            case 72: {
              result.hasCivId = input.ReadInt32(ref result.civId_);
              break;
            }
            case 80: {
              result.hasHistfigId = input.ReadInt32(ref result.histfigId_);
              break;
            }
            case 90:
            case 88: {
              input.ReadInt32Array(tag, field_name, result.labors_);
              break;
            }
            case 98: {
              input.ReadMessageArray(tag, field_name, result.skills_, global::dfproto.SkillInfo.DefaultInstance, extensionRegistry);
              break;
            }
            case 104: {
              result.hasPosX = input.ReadInt32(ref result.posX_);
              break;
            }
            case 112: {
              result.hasPosY = input.ReadInt32(ref result.posY_);
              break;
            }
            case 120: {
              result.hasPosZ = input.ReadInt32(ref result.posZ_);
              break;
            }
            case 130: {
              global::dfproto.UnitCurseInfo.Builder subBuilder = global::dfproto.UnitCurseInfo.CreateBuilder();
              if (result.hasCurse) {
                subBuilder.MergeFrom(Curse);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Curse = subBuilder.BuildPartial();
              break;
            }
            case 136: {
              result.hasDeathId = input.ReadInt32(ref result.deathId_);
              break;
            }
            case 144: {
              result.hasDeathFlags = input.ReadUInt32(ref result.deathFlags_);
              break;
            }
            case 152: {
              result.hasSquadId = input.ReadInt32(ref result.squadId_);
              break;
            }
            case 160: {
              result.hasSquadPosition = input.ReadInt32(ref result.squadPosition_);
              break;
            }
            case 170:
            case 168: {
              input.ReadInt32Array(tag, field_name, result.burrows_);
              break;
            }
            case 176: {
              result.hasProfession = input.ReadInt32(ref result.profession_);
              break;
            }
            case 186: {
              result.hasCustomProfession = input.ReadString(ref result.customProfession_);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasUnitId {
        get { return result.hasUnitId; }
      }
      public int UnitId {
        get { return result.UnitId; }
        set { SetUnitId(value); }
      }
      public Builder SetUnitId(int value) {
        PrepareBuilder();
        result.hasUnitId = true;
        result.unitId_ = value;
        return this;
      }
      public Builder ClearUnitId() {
        PrepareBuilder();
        result.hasUnitId = false;
        result.unitId_ = 0;
        return this;
      }
      
      public bool HasPosX {
        get { return result.hasPosX; }
      }
      public int PosX {
        get { return result.PosX; }
        set { SetPosX(value); }
      }
      public Builder SetPosX(int value) {
        PrepareBuilder();
        result.hasPosX = true;
        result.posX_ = value;
        return this;
      }
      public Builder ClearPosX() {
        PrepareBuilder();
        result.hasPosX = false;
        result.posX_ = 0;
        return this;
      }
      
      public bool HasPosY {
        get { return result.hasPosY; }
      }
      public int PosY {
        get { return result.PosY; }
        set { SetPosY(value); }
      }
      public Builder SetPosY(int value) {
        PrepareBuilder();
        result.hasPosY = true;
        result.posY_ = value;
        return this;
      }
      public Builder ClearPosY() {
        PrepareBuilder();
        result.hasPosY = false;
        result.posY_ = 0;
        return this;
      }
      
      public bool HasPosZ {
        get { return result.hasPosZ; }
      }
      public int PosZ {
        get { return result.PosZ; }
        set { SetPosZ(value); }
      }
      public Builder SetPosZ(int value) {
        PrepareBuilder();
        result.hasPosZ = true;
        result.posZ_ = value;
        return this;
      }
      public Builder ClearPosZ() {
        PrepareBuilder();
        result.hasPosZ = false;
        result.posZ_ = 0;
        return this;
      }
      
      public bool HasName {
       get { return result.hasName; }
      }
      public global::dfproto.NameInfo Name {
        get { return result.Name; }
        set { SetName(value); }
      }
      public Builder SetName(global::dfproto.NameInfo value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasName = true;
        result.name_ = value;
        return this;
      }
      public Builder SetName(global::dfproto.NameInfo.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasName = true;
        result.name_ = builderForValue.Build();
        return this;
      }
      public Builder MergeName(global::dfproto.NameInfo value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasName &&
            result.name_ != global::dfproto.NameInfo.DefaultInstance) {
            result.name_ = global::dfproto.NameInfo.CreateBuilder(result.name_).MergeFrom(value).BuildPartial();
        } else {
          result.name_ = value;
        }
        result.hasName = true;
        return this;
      }
      public Builder ClearName() {
        PrepareBuilder();
        result.hasName = false;
        result.name_ = null;
        return this;
      }
      
      public bool HasFlags1 {
        get { return result.hasFlags1; }
      }
      [global::System.CLSCompliant(false)]
      public uint Flags1 {
        get { return result.Flags1; }
        set { SetFlags1(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetFlags1(uint value) {
        PrepareBuilder();
        result.hasFlags1 = true;
        result.flags1_ = value;
        return this;
      }
      public Builder ClearFlags1() {
        PrepareBuilder();
        result.hasFlags1 = false;
        result.flags1_ = 0;
        return this;
      }
      
      public bool HasFlags2 {
        get { return result.hasFlags2; }
      }
      [global::System.CLSCompliant(false)]
      public uint Flags2 {
        get { return result.Flags2; }
        set { SetFlags2(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetFlags2(uint value) {
        PrepareBuilder();
        result.hasFlags2 = true;
        result.flags2_ = value;
        return this;
      }
      public Builder ClearFlags2() {
        PrepareBuilder();
        result.hasFlags2 = false;
        result.flags2_ = 0;
        return this;
      }
      
      public bool HasFlags3 {
        get { return result.hasFlags3; }
      }
      [global::System.CLSCompliant(false)]
      public uint Flags3 {
        get { return result.Flags3; }
        set { SetFlags3(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetFlags3(uint value) {
        PrepareBuilder();
        result.hasFlags3 = true;
        result.flags3_ = value;
        return this;
      }
      public Builder ClearFlags3() {
        PrepareBuilder();
        result.hasFlags3 = false;
        result.flags3_ = 0;
        return this;
      }
      
      public bool HasRace {
        get { return result.hasRace; }
      }
      public int Race {
        get { return result.Race; }
        set { SetRace(value); }
      }
      public Builder SetRace(int value) {
        PrepareBuilder();
        result.hasRace = true;
        result.race_ = value;
        return this;
      }
      public Builder ClearRace() {
        PrepareBuilder();
        result.hasRace = false;
        result.race_ = 0;
        return this;
      }
      
      public bool HasCaste {
        get { return result.hasCaste; }
      }
      public int Caste {
        get { return result.Caste; }
        set { SetCaste(value); }
      }
      public Builder SetCaste(int value) {
        PrepareBuilder();
        result.hasCaste = true;
        result.caste_ = value;
        return this;
      }
      public Builder ClearCaste() {
        PrepareBuilder();
        result.hasCaste = false;
        result.caste_ = 0;
        return this;
      }
      
      public bool HasGender {
        get { return result.hasGender; }
      }
      public int Gender {
        get { return result.Gender; }
        set { SetGender(value); }
      }
      public Builder SetGender(int value) {
        PrepareBuilder();
        result.hasGender = true;
        result.gender_ = value;
        return this;
      }
      public Builder ClearGender() {
        PrepareBuilder();
        result.hasGender = false;
        result.gender_ = -1;
        return this;
      }
      
      public bool HasCivId {
        get { return result.hasCivId; }
      }
      public int CivId {
        get { return result.CivId; }
        set { SetCivId(value); }
      }
      public Builder SetCivId(int value) {
        PrepareBuilder();
        result.hasCivId = true;
        result.civId_ = value;
        return this;
      }
      public Builder ClearCivId() {
        PrepareBuilder();
        result.hasCivId = false;
        result.civId_ = -1;
        return this;
      }
      
      public bool HasHistfigId {
        get { return result.hasHistfigId; }
      }
      public int HistfigId {
        get { return result.HistfigId; }
        set { SetHistfigId(value); }
      }
      public Builder SetHistfigId(int value) {
        PrepareBuilder();
        result.hasHistfigId = true;
        result.histfigId_ = value;
        return this;
      }
      public Builder ClearHistfigId() {
        PrepareBuilder();
        result.hasHistfigId = false;
        result.histfigId_ = -1;
        return this;
      }
      
      public bool HasDeathId {
        get { return result.hasDeathId; }
      }
      public int DeathId {
        get { return result.DeathId; }
        set { SetDeathId(value); }
      }
      public Builder SetDeathId(int value) {
        PrepareBuilder();
        result.hasDeathId = true;
        result.deathId_ = value;
        return this;
      }
      public Builder ClearDeathId() {
        PrepareBuilder();
        result.hasDeathId = false;
        result.deathId_ = -1;
        return this;
      }
      
      public bool HasDeathFlags {
        get { return result.hasDeathFlags; }
      }
      [global::System.CLSCompliant(false)]
      public uint DeathFlags {
        get { return result.DeathFlags; }
        set { SetDeathFlags(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetDeathFlags(uint value) {
        PrepareBuilder();
        result.hasDeathFlags = true;
        result.deathFlags_ = value;
        return this;
      }
      public Builder ClearDeathFlags() {
        PrepareBuilder();
        result.hasDeathFlags = false;
        result.deathFlags_ = 0;
        return this;
      }
      
      public bool HasSquadId {
        get { return result.hasSquadId; }
      }
      public int SquadId {
        get { return result.SquadId; }
        set { SetSquadId(value); }
      }
      public Builder SetSquadId(int value) {
        PrepareBuilder();
        result.hasSquadId = true;
        result.squadId_ = value;
        return this;
      }
      public Builder ClearSquadId() {
        PrepareBuilder();
        result.hasSquadId = false;
        result.squadId_ = -1;
        return this;
      }
      
      public bool HasSquadPosition {
        get { return result.hasSquadPosition; }
      }
      public int SquadPosition {
        get { return result.SquadPosition; }
        set { SetSquadPosition(value); }
      }
      public Builder SetSquadPosition(int value) {
        PrepareBuilder();
        result.hasSquadPosition = true;
        result.squadPosition_ = value;
        return this;
      }
      public Builder ClearSquadPosition() {
        PrepareBuilder();
        result.hasSquadPosition = false;
        result.squadPosition_ = -1;
        return this;
      }
      
      public bool HasProfession {
        get { return result.hasProfession; }
      }
      public int Profession {
        get { return result.Profession; }
        set { SetProfession(value); }
      }
      public Builder SetProfession(int value) {
        PrepareBuilder();
        result.hasProfession = true;
        result.profession_ = value;
        return this;
      }
      public Builder ClearProfession() {
        PrepareBuilder();
        result.hasProfession = false;
        result.profession_ = -1;
        return this;
      }
      
      public bool HasCustomProfession {
        get { return result.hasCustomProfession; }
      }
      public string CustomProfession {
        get { return result.CustomProfession; }
        set { SetCustomProfession(value); }
      }
      public Builder SetCustomProfession(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasCustomProfession = true;
        result.customProfession_ = value;
        return this;
      }
      public Builder ClearCustomProfession() {
        PrepareBuilder();
        result.hasCustomProfession = false;
        result.customProfession_ = "";
        return this;
      }
      
      public pbc::IPopsicleList<int> LaborsList {
        get { return PrepareBuilder().labors_; }
      }
      public int LaborsCount {
        get { return result.LaborsCount; }
      }
      public int GetLabors(int index) {
        return result.GetLabors(index);
      }
      public Builder SetLabors(int index, int value) {
        PrepareBuilder();
        result.labors_[index] = value;
        return this;
      }
      public Builder AddLabors(int value) {
        PrepareBuilder();
        result.labors_.Add(value);
        return this;
      }
      public Builder AddRangeLabors(scg::IEnumerable<int> values) {
        PrepareBuilder();
        result.labors_.Add(values);
        return this;
      }
      public Builder ClearLabors() {
        PrepareBuilder();
        result.labors_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<global::dfproto.SkillInfo> SkillsList {
        get { return PrepareBuilder().skills_; }
      }
      public int SkillsCount {
        get { return result.SkillsCount; }
      }
      public global::dfproto.SkillInfo GetSkills(int index) {
        return result.GetSkills(index);
      }
      public Builder SetSkills(int index, global::dfproto.SkillInfo value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.skills_[index] = value;
        return this;
      }
      public Builder SetSkills(int index, global::dfproto.SkillInfo.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.skills_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddSkills(global::dfproto.SkillInfo value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.skills_.Add(value);
        return this;
      }
      public Builder AddSkills(global::dfproto.SkillInfo.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.skills_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeSkills(scg::IEnumerable<global::dfproto.SkillInfo> values) {
        PrepareBuilder();
        result.skills_.Add(values);
        return this;
      }
      public Builder ClearSkills() {
        PrepareBuilder();
        result.skills_.Clear();
        return this;
      }
      
      public bool HasCurse {
       get { return result.hasCurse; }
      }
      public global::dfproto.UnitCurseInfo Curse {
        get { return result.Curse; }
        set { SetCurse(value); }
      }
      public Builder SetCurse(global::dfproto.UnitCurseInfo value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasCurse = true;
        result.curse_ = value;
        return this;
      }
      public Builder SetCurse(global::dfproto.UnitCurseInfo.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasCurse = true;
        result.curse_ = builderForValue.Build();
        return this;
      }
      public Builder MergeCurse(global::dfproto.UnitCurseInfo value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasCurse &&
            result.curse_ != global::dfproto.UnitCurseInfo.DefaultInstance) {
            result.curse_ = global::dfproto.UnitCurseInfo.CreateBuilder(result.curse_).MergeFrom(value).BuildPartial();
        } else {
          result.curse_ = value;
        }
        result.hasCurse = true;
        return this;
      }
      public Builder ClearCurse() {
        PrepareBuilder();
        result.hasCurse = false;
        result.curse_ = null;
        return this;
      }
      
      public pbc::IPopsicleList<int> BurrowsList {
        get { return PrepareBuilder().burrows_; }
      }
      public int BurrowsCount {
        get { return result.BurrowsCount; }
      }
      public int GetBurrows(int index) {
        return result.GetBurrows(index);
      }
      public Builder SetBurrows(int index, int value) {
        PrepareBuilder();
        result.burrows_[index] = value;
        return this;
      }
      public Builder AddBurrows(int value) {
        PrepareBuilder();
        result.burrows_.Add(value);
        return this;
      }
      public Builder AddRangeBurrows(scg::IEnumerable<int> values) {
        PrepareBuilder();
        result.burrows_.Add(values);
        return this;
      }
      public Builder ClearBurrows() {
        PrepareBuilder();
        result.burrows_.Clear();
        return this;
      }
    }
    static BasicUnitInfo() {
      object.ReferenceEquals(global::dfproto.Basic.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class BasicUnitInfoMask : pb::GeneratedMessageLite<BasicUnitInfoMask, BasicUnitInfoMask.Builder> {
    private BasicUnitInfoMask() { }
    private static readonly BasicUnitInfoMask defaultInstance = new BasicUnitInfoMask().MakeReadOnly();
    private static readonly string[] _basicUnitInfoMaskFieldNames = new string[] { "labors", "profession", "skills" };
    private static readonly uint[] _basicUnitInfoMaskFieldTags = new uint[] { 8, 24, 16 };
    public static BasicUnitInfoMask DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override BasicUnitInfoMask DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override BasicUnitInfoMask ThisMessage {
      get { return this; }
    }
    
    public const int LaborsFieldNumber = 1;
    private bool hasLabors;
    private bool labors_;
    public bool HasLabors {
      get { return hasLabors; }
    }
    public bool Labors {
      get { return labors_; }
    }
    
    public const int SkillsFieldNumber = 2;
    private bool hasSkills;
    private bool skills_;
    public bool HasSkills {
      get { return hasSkills; }
    }
    public bool Skills {
      get { return skills_; }
    }
    
    public const int ProfessionFieldNumber = 3;
    private bool hasProfession;
    private bool profession_;
    public bool HasProfession {
      get { return hasProfession; }
    }
    public bool Profession {
      get { return profession_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _basicUnitInfoMaskFieldNames;
      if (hasLabors) {
        output.WriteBool(1, field_names[0], Labors);
      }
      if (hasSkills) {
        output.WriteBool(2, field_names[2], Skills);
      }
      if (hasProfession) {
        output.WriteBool(3, field_names[1], Profession);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasLabors) {
          size += pb::CodedOutputStream.ComputeBoolSize(1, Labors);
        }
        if (hasSkills) {
          size += pb::CodedOutputStream.ComputeBoolSize(2, Skills);
        }
        if (hasProfession) {
          size += pb::CodedOutputStream.ComputeBoolSize(3, Profession);
        }
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasLabors) hash ^= labors_.GetHashCode();
      if (hasSkills) hash ^= skills_.GetHashCode();
      if (hasProfession) hash ^= profession_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      BasicUnitInfoMask other = obj as BasicUnitInfoMask;
      if (other == null) return false;
      if (hasLabors != other.hasLabors || (hasLabors && !labors_.Equals(other.labors_))) return false;
      if (hasSkills != other.hasSkills || (hasSkills && !skills_.Equals(other.skills_))) return false;
      if (hasProfession != other.hasProfession || (hasProfession && !profession_.Equals(other.profession_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("labors", hasLabors, labors_, writer);
      PrintField("skills", hasSkills, skills_, writer);
      PrintField("profession", hasProfession, profession_, writer);
    }
    #endregion
    
    public static BasicUnitInfoMask ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static BasicUnitInfoMask ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static BasicUnitInfoMask ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static BasicUnitInfoMask ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static BasicUnitInfoMask ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static BasicUnitInfoMask ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static BasicUnitInfoMask ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static BasicUnitInfoMask ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static BasicUnitInfoMask ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static BasicUnitInfoMask ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private BasicUnitInfoMask MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(BasicUnitInfoMask prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilderLite<BasicUnitInfoMask, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(BasicUnitInfoMask cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private BasicUnitInfoMask result;
      
      private BasicUnitInfoMask PrepareBuilder() {
        if (resultIsReadOnly) {
          BasicUnitInfoMask original = result;
          result = new BasicUnitInfoMask();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override BasicUnitInfoMask MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override BasicUnitInfoMask DefaultInstanceForType {
        get { return global::dfproto.BasicUnitInfoMask.DefaultInstance; }
      }
      
      public override BasicUnitInfoMask BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is BasicUnitInfoMask) {
          return MergeFrom((BasicUnitInfoMask) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(BasicUnitInfoMask other) {
        if (other == global::dfproto.BasicUnitInfoMask.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasLabors) {
          Labors = other.Labors;
        }
        if (other.HasSkills) {
          Skills = other.Skills;
        }
        if (other.HasProfession) {
          Profession = other.Profession;
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_basicUnitInfoMaskFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _basicUnitInfoMaskFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasLabors = input.ReadBool(ref result.labors_);
              break;
            }
            case 16: {
              result.hasSkills = input.ReadBool(ref result.skills_);
              break;
            }
            case 24: {
              result.hasProfession = input.ReadBool(ref result.profession_);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasLabors {
        get { return result.hasLabors; }
      }
      public bool Labors {
        get { return result.Labors; }
        set { SetLabors(value); }
      }
      public Builder SetLabors(bool value) {
        PrepareBuilder();
        result.hasLabors = true;
        result.labors_ = value;
        return this;
      }
      public Builder ClearLabors() {
        PrepareBuilder();
        result.hasLabors = false;
        result.labors_ = false;
        return this;
      }
      
      public bool HasSkills {
        get { return result.hasSkills; }
      }
      public bool Skills {
        get { return result.Skills; }
        set { SetSkills(value); }
      }
      public Builder SetSkills(bool value) {
        PrepareBuilder();
        result.hasSkills = true;
        result.skills_ = value;
        return this;
      }
      public Builder ClearSkills() {
        PrepareBuilder();
        result.hasSkills = false;
        result.skills_ = false;
        return this;
      }
      
      public bool HasProfession {
        get { return result.hasProfession; }
      }
      public bool Profession {
        get { return result.Profession; }
        set { SetProfession(value); }
      }
      public Builder SetProfession(bool value) {
        PrepareBuilder();
        result.hasProfession = true;
        result.profession_ = value;
        return this;
      }
      public Builder ClearProfession() {
        PrepareBuilder();
        result.hasProfession = false;
        result.profession_ = false;
        return this;
      }
    }
    static BasicUnitInfoMask() {
      object.ReferenceEquals(global::dfproto.Basic.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class BasicSquadInfo : pb::GeneratedMessageLite<BasicSquadInfo, BasicSquadInfo.Builder> {
    private BasicSquadInfo() { }
    private static readonly BasicSquadInfo defaultInstance = new BasicSquadInfo().MakeReadOnly();
    private static readonly string[] _basicSquadInfoFieldNames = new string[] { "alias", "members", "name", "squad_id" };
    private static readonly uint[] _basicSquadInfoFieldTags = new uint[] { 26, 32, 18, 8 };
    public static BasicSquadInfo DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override BasicSquadInfo DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override BasicSquadInfo ThisMessage {
      get { return this; }
    }
    
    public const int SquadIdFieldNumber = 1;
    private bool hasSquadId;
    private int squadId_;
    public bool HasSquadId {
      get { return hasSquadId; }
    }
    public int SquadId {
      get { return squadId_; }
    }
    
    public const int NameFieldNumber = 2;
    private bool hasName;
    private global::dfproto.NameInfo name_;
    public bool HasName {
      get { return hasName; }
    }
    public global::dfproto.NameInfo Name {
      get { return name_ ?? global::dfproto.NameInfo.DefaultInstance; }
    }
    
    public const int AliasFieldNumber = 3;
    private bool hasAlias;
    private string alias_ = "";
    public bool HasAlias {
      get { return hasAlias; }
    }
    public string Alias {
      get { return alias_; }
    }
    
    public const int MembersFieldNumber = 4;
    private pbc::PopsicleList<int> members_ = new pbc::PopsicleList<int>();
    public scg::IList<int> MembersList {
      get { return pbc::Lists.AsReadOnly(members_); }
    }
    public int MembersCount {
      get { return members_.Count; }
    }
    public int GetMembers(int index) {
      return members_[index];
    }
    
    public override bool IsInitialized {
      get {
        if (!hasSquadId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _basicSquadInfoFieldNames;
      if (hasSquadId) {
        output.WriteInt32(1, field_names[3], SquadId);
      }
      if (hasName) {
        output.WriteMessage(2, field_names[2], Name);
      }
      if (hasAlias) {
        output.WriteString(3, field_names[0], Alias);
      }
      if (members_.Count > 0) {
        output.WriteSInt32Array(4, field_names[1], members_);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasSquadId) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, SquadId);
        }
        if (hasName) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, Name);
        }
        if (hasAlias) {
          size += pb::CodedOutputStream.ComputeStringSize(3, Alias);
        }
        {
          int dataSize = 0;
          foreach (int element in MembersList) {
            dataSize += pb::CodedOutputStream.ComputeSInt32SizeNoTag(element);
          }
          size += dataSize;
          size += 1 * members_.Count;
        }
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasSquadId) hash ^= squadId_.GetHashCode();
      if (hasName) hash ^= name_.GetHashCode();
      if (hasAlias) hash ^= alias_.GetHashCode();
      foreach(int i in members_)
        hash ^= i.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      BasicSquadInfo other = obj as BasicSquadInfo;
      if (other == null) return false;
      if (hasSquadId != other.hasSquadId || (hasSquadId && !squadId_.Equals(other.squadId_))) return false;
      if (hasName != other.hasName || (hasName && !name_.Equals(other.name_))) return false;
      if (hasAlias != other.hasAlias || (hasAlias && !alias_.Equals(other.alias_))) return false;
      if(members_.Count != other.members_.Count) return false;
      for(int ix=0; ix < members_.Count; ix++)
        if(!members_[ix].Equals(other.members_[ix])) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("squad_id", hasSquadId, squadId_, writer);
      PrintField("name", hasName, name_, writer);
      PrintField("alias", hasAlias, alias_, writer);
      PrintField("members", members_, writer);
    }
    #endregion
    
    public static BasicSquadInfo ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static BasicSquadInfo ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static BasicSquadInfo ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static BasicSquadInfo ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static BasicSquadInfo ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static BasicSquadInfo ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static BasicSquadInfo ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static BasicSquadInfo ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static BasicSquadInfo ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static BasicSquadInfo ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private BasicSquadInfo MakeReadOnly() {
      members_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(BasicSquadInfo prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilderLite<BasicSquadInfo, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(BasicSquadInfo cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private BasicSquadInfo result;
      
      private BasicSquadInfo PrepareBuilder() {
        if (resultIsReadOnly) {
          BasicSquadInfo original = result;
          result = new BasicSquadInfo();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override BasicSquadInfo MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override BasicSquadInfo DefaultInstanceForType {
        get { return global::dfproto.BasicSquadInfo.DefaultInstance; }
      }
      
      public override BasicSquadInfo BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is BasicSquadInfo) {
          return MergeFrom((BasicSquadInfo) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(BasicSquadInfo other) {
        if (other == global::dfproto.BasicSquadInfo.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasSquadId) {
          SquadId = other.SquadId;
        }
        if (other.HasName) {
          MergeName(other.Name);
        }
        if (other.HasAlias) {
          Alias = other.Alias;
        }
        if (other.members_.Count != 0) {
          result.members_.Add(other.members_);
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_basicSquadInfoFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _basicSquadInfoFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasSquadId = input.ReadInt32(ref result.squadId_);
              break;
            }
            case 18: {
              global::dfproto.NameInfo.Builder subBuilder = global::dfproto.NameInfo.CreateBuilder();
              if (result.hasName) {
                subBuilder.MergeFrom(Name);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Name = subBuilder.BuildPartial();
              break;
            }
            case 26: {
              result.hasAlias = input.ReadString(ref result.alias_);
              break;
            }
            case 34:
            case 32: {
              input.ReadSInt32Array(tag, field_name, result.members_);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasSquadId {
        get { return result.hasSquadId; }
      }
      public int SquadId {
        get { return result.SquadId; }
        set { SetSquadId(value); }
      }
      public Builder SetSquadId(int value) {
        PrepareBuilder();
        result.hasSquadId = true;
        result.squadId_ = value;
        return this;
      }
      public Builder ClearSquadId() {
        PrepareBuilder();
        result.hasSquadId = false;
        result.squadId_ = 0;
        return this;
      }
      
      public bool HasName {
       get { return result.hasName; }
      }
      public global::dfproto.NameInfo Name {
        get { return result.Name; }
        set { SetName(value); }
      }
      public Builder SetName(global::dfproto.NameInfo value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasName = true;
        result.name_ = value;
        return this;
      }
      public Builder SetName(global::dfproto.NameInfo.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasName = true;
        result.name_ = builderForValue.Build();
        return this;
      }
      public Builder MergeName(global::dfproto.NameInfo value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasName &&
            result.name_ != global::dfproto.NameInfo.DefaultInstance) {
            result.name_ = global::dfproto.NameInfo.CreateBuilder(result.name_).MergeFrom(value).BuildPartial();
        } else {
          result.name_ = value;
        }
        result.hasName = true;
        return this;
      }
      public Builder ClearName() {
        PrepareBuilder();
        result.hasName = false;
        result.name_ = null;
        return this;
      }
      
      public bool HasAlias {
        get { return result.hasAlias; }
      }
      public string Alias {
        get { return result.Alias; }
        set { SetAlias(value); }
      }
      public Builder SetAlias(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasAlias = true;
        result.alias_ = value;
        return this;
      }
      public Builder ClearAlias() {
        PrepareBuilder();
        result.hasAlias = false;
        result.alias_ = "";
        return this;
      }
      
      public pbc::IPopsicleList<int> MembersList {
        get { return PrepareBuilder().members_; }
      }
      public int MembersCount {
        get { return result.MembersCount; }
      }
      public int GetMembers(int index) {
        return result.GetMembers(index);
      }
      public Builder SetMembers(int index, int value) {
        PrepareBuilder();
        result.members_[index] = value;
        return this;
      }
      public Builder AddMembers(int value) {
        PrepareBuilder();
        result.members_.Add(value);
        return this;
      }
      public Builder AddRangeMembers(scg::IEnumerable<int> values) {
        PrepareBuilder();
        result.members_.Add(values);
        return this;
      }
      public Builder ClearMembers() {
        PrepareBuilder();
        result.members_.Clear();
        return this;
      }
    }
    static BasicSquadInfo() {
      object.ReferenceEquals(global::dfproto.Basic.Descriptor, null);
    }
  }
  
  #endregion
  
}

#endregion Designer generated code
