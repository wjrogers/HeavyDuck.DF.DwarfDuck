// Generated by ProtoGen, Version=2.4.1.473, Culture=neutral, PublicKeyToken=55f7125234beb589.  DO NOT EDIT!
#pragma warning disable 1591, 0612
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace dfproto {
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public static partial class BasicApi {
  
    #region Extension registration
    public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
    }
    #endregion
    #region Static variables
    #endregion
    #region Extensions
    internal static readonly object Descriptor;
    static BasicApi() {
      Descriptor = null;
    }
    #endregion
    
  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class GetWorldInfoOut : pb::GeneratedMessageLite<GetWorldInfoOut, GetWorldInfoOut.Builder> {
    private GetWorldInfoOut() { }
    private static readonly GetWorldInfoOut defaultInstance = new GetWorldInfoOut().MakeReadOnly();
    private static readonly string[] _getWorldInfoOutFieldNames = new string[] { "civ_id", "companion_histfig_ids", "group_id", "mode", "player_histfig_id", "player_unit_id", "race_id", "save_dir", "site_id", "world_name" };
    private static readonly uint[] _getWorldInfoOutFieldTags = new uint[] { 32, 80, 48, 8, 72, 64, 56, 18, 40, 26 };
    public static GetWorldInfoOut DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override GetWorldInfoOut DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override GetWorldInfoOut ThisMessage {
      get { return this; }
    }
    
    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public static class Types {
      [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
      [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
      public enum Mode {
        MODE_DWARF = 1,
        MODE_ADVENTURE = 2,
        MODE_LEGENDS = 3,
      }
      
    }
    #endregion
    
    public const int ModeFieldNumber = 1;
    private bool hasMode;
    private global::dfproto.GetWorldInfoOut.Types.Mode mode_ = global::dfproto.GetWorldInfoOut.Types.Mode.MODE_DWARF;
    public bool HasMode {
      get { return hasMode; }
    }
    public global::dfproto.GetWorldInfoOut.Types.Mode Mode {
      get { return mode_; }
    }
    
    public const int SaveDirFieldNumber = 2;
    private bool hasSaveDir;
    private string saveDir_ = "";
    public bool HasSaveDir {
      get { return hasSaveDir; }
    }
    public string SaveDir {
      get { return saveDir_; }
    }
    
    public const int WorldNameFieldNumber = 3;
    private bool hasWorldName;
    private global::dfproto.NameInfo worldName_;
    public bool HasWorldName {
      get { return hasWorldName; }
    }
    public global::dfproto.NameInfo WorldName {
      get { return worldName_ ?? global::dfproto.NameInfo.DefaultInstance; }
    }
    
    public const int CivIdFieldNumber = 4;
    private bool hasCivId;
    private int civId_;
    public bool HasCivId {
      get { return hasCivId; }
    }
    public int CivId {
      get { return civId_; }
    }
    
    public const int SiteIdFieldNumber = 5;
    private bool hasSiteId;
    private int siteId_;
    public bool HasSiteId {
      get { return hasSiteId; }
    }
    public int SiteId {
      get { return siteId_; }
    }
    
    public const int GroupIdFieldNumber = 6;
    private bool hasGroupId;
    private int groupId_;
    public bool HasGroupId {
      get { return hasGroupId; }
    }
    public int GroupId {
      get { return groupId_; }
    }
    
    public const int RaceIdFieldNumber = 7;
    private bool hasRaceId;
    private int raceId_;
    public bool HasRaceId {
      get { return hasRaceId; }
    }
    public int RaceId {
      get { return raceId_; }
    }
    
    public const int PlayerUnitIdFieldNumber = 8;
    private bool hasPlayerUnitId;
    private int playerUnitId_;
    public bool HasPlayerUnitId {
      get { return hasPlayerUnitId; }
    }
    public int PlayerUnitId {
      get { return playerUnitId_; }
    }
    
    public const int PlayerHistfigIdFieldNumber = 9;
    private bool hasPlayerHistfigId;
    private int playerHistfigId_;
    public bool HasPlayerHistfigId {
      get { return hasPlayerHistfigId; }
    }
    public int PlayerHistfigId {
      get { return playerHistfigId_; }
    }
    
    public const int CompanionHistfigIdsFieldNumber = 10;
    private pbc::PopsicleList<int> companionHistfigIds_ = new pbc::PopsicleList<int>();
    public scg::IList<int> CompanionHistfigIdsList {
      get { return pbc::Lists.AsReadOnly(companionHistfigIds_); }
    }
    public int CompanionHistfigIdsCount {
      get { return companionHistfigIds_.Count; }
    }
    public int GetCompanionHistfigIds(int index) {
      return companionHistfigIds_[index];
    }
    
    public override bool IsInitialized {
      get {
        if (!hasMode) return false;
        if (!hasSaveDir) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _getWorldInfoOutFieldNames;
      if (hasMode) {
        output.WriteEnum(1, field_names[3], (int) Mode, Mode);
      }
      if (hasSaveDir) {
        output.WriteString(2, field_names[7], SaveDir);
      }
      if (hasWorldName) {
        output.WriteMessage(3, field_names[9], WorldName);
      }
      if (hasCivId) {
        output.WriteInt32(4, field_names[0], CivId);
      }
      if (hasSiteId) {
        output.WriteInt32(5, field_names[8], SiteId);
      }
      if (hasGroupId) {
        output.WriteInt32(6, field_names[2], GroupId);
      }
      if (hasRaceId) {
        output.WriteInt32(7, field_names[6], RaceId);
      }
      if (hasPlayerUnitId) {
        output.WriteInt32(8, field_names[5], PlayerUnitId);
      }
      if (hasPlayerHistfigId) {
        output.WriteInt32(9, field_names[4], PlayerHistfigId);
      }
      if (companionHistfigIds_.Count > 0) {
        output.WriteInt32Array(10, field_names[1], companionHistfigIds_);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasMode) {
          size += pb::CodedOutputStream.ComputeEnumSize(1, (int) Mode);
        }
        if (hasSaveDir) {
          size += pb::CodedOutputStream.ComputeStringSize(2, SaveDir);
        }
        if (hasWorldName) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, WorldName);
        }
        if (hasCivId) {
          size += pb::CodedOutputStream.ComputeInt32Size(4, CivId);
        }
        if (hasSiteId) {
          size += pb::CodedOutputStream.ComputeInt32Size(5, SiteId);
        }
        if (hasGroupId) {
          size += pb::CodedOutputStream.ComputeInt32Size(6, GroupId);
        }
        if (hasRaceId) {
          size += pb::CodedOutputStream.ComputeInt32Size(7, RaceId);
        }
        if (hasPlayerUnitId) {
          size += pb::CodedOutputStream.ComputeInt32Size(8, PlayerUnitId);
        }
        if (hasPlayerHistfigId) {
          size += pb::CodedOutputStream.ComputeInt32Size(9, PlayerHistfigId);
        }
        {
          int dataSize = 0;
          foreach (int element in CompanionHistfigIdsList) {
            dataSize += pb::CodedOutputStream.ComputeInt32SizeNoTag(element);
          }
          size += dataSize;
          size += 1 * companionHistfigIds_.Count;
        }
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasMode) hash ^= mode_.GetHashCode();
      if (hasSaveDir) hash ^= saveDir_.GetHashCode();
      if (hasWorldName) hash ^= worldName_.GetHashCode();
      if (hasCivId) hash ^= civId_.GetHashCode();
      if (hasSiteId) hash ^= siteId_.GetHashCode();
      if (hasGroupId) hash ^= groupId_.GetHashCode();
      if (hasRaceId) hash ^= raceId_.GetHashCode();
      if (hasPlayerUnitId) hash ^= playerUnitId_.GetHashCode();
      if (hasPlayerHistfigId) hash ^= playerHistfigId_.GetHashCode();
      foreach(int i in companionHistfigIds_)
        hash ^= i.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      GetWorldInfoOut other = obj as GetWorldInfoOut;
      if (other == null) return false;
      if (hasMode != other.hasMode || (hasMode && !mode_.Equals(other.mode_))) return false;
      if (hasSaveDir != other.hasSaveDir || (hasSaveDir && !saveDir_.Equals(other.saveDir_))) return false;
      if (hasWorldName != other.hasWorldName || (hasWorldName && !worldName_.Equals(other.worldName_))) return false;
      if (hasCivId != other.hasCivId || (hasCivId && !civId_.Equals(other.civId_))) return false;
      if (hasSiteId != other.hasSiteId || (hasSiteId && !siteId_.Equals(other.siteId_))) return false;
      if (hasGroupId != other.hasGroupId || (hasGroupId && !groupId_.Equals(other.groupId_))) return false;
      if (hasRaceId != other.hasRaceId || (hasRaceId && !raceId_.Equals(other.raceId_))) return false;
      if (hasPlayerUnitId != other.hasPlayerUnitId || (hasPlayerUnitId && !playerUnitId_.Equals(other.playerUnitId_))) return false;
      if (hasPlayerHistfigId != other.hasPlayerHistfigId || (hasPlayerHistfigId && !playerHistfigId_.Equals(other.playerHistfigId_))) return false;
      if(companionHistfigIds_.Count != other.companionHistfigIds_.Count) return false;
      for(int ix=0; ix < companionHistfigIds_.Count; ix++)
        if(!companionHistfigIds_[ix].Equals(other.companionHistfigIds_[ix])) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("mode", hasMode, mode_, writer);
      PrintField("save_dir", hasSaveDir, saveDir_, writer);
      PrintField("world_name", hasWorldName, worldName_, writer);
      PrintField("civ_id", hasCivId, civId_, writer);
      PrintField("site_id", hasSiteId, siteId_, writer);
      PrintField("group_id", hasGroupId, groupId_, writer);
      PrintField("race_id", hasRaceId, raceId_, writer);
      PrintField("player_unit_id", hasPlayerUnitId, playerUnitId_, writer);
      PrintField("player_histfig_id", hasPlayerHistfigId, playerHistfigId_, writer);
      PrintField("companion_histfig_ids", companionHistfigIds_, writer);
    }
    #endregion
    
    public static GetWorldInfoOut ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GetWorldInfoOut ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GetWorldInfoOut ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GetWorldInfoOut ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GetWorldInfoOut ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GetWorldInfoOut ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static GetWorldInfoOut ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static GetWorldInfoOut ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static GetWorldInfoOut ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GetWorldInfoOut ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private GetWorldInfoOut MakeReadOnly() {
      companionHistfigIds_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(GetWorldInfoOut prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilderLite<GetWorldInfoOut, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(GetWorldInfoOut cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private GetWorldInfoOut result;
      
      private GetWorldInfoOut PrepareBuilder() {
        if (resultIsReadOnly) {
          GetWorldInfoOut original = result;
          result = new GetWorldInfoOut();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override GetWorldInfoOut MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override GetWorldInfoOut DefaultInstanceForType {
        get { return global::dfproto.GetWorldInfoOut.DefaultInstance; }
      }
      
      public override GetWorldInfoOut BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is GetWorldInfoOut) {
          return MergeFrom((GetWorldInfoOut) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(GetWorldInfoOut other) {
        if (other == global::dfproto.GetWorldInfoOut.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasMode) {
          Mode = other.Mode;
        }
        if (other.HasSaveDir) {
          SaveDir = other.SaveDir;
        }
        if (other.HasWorldName) {
          MergeWorldName(other.WorldName);
        }
        if (other.HasCivId) {
          CivId = other.CivId;
        }
        if (other.HasSiteId) {
          SiteId = other.SiteId;
        }
        if (other.HasGroupId) {
          GroupId = other.GroupId;
        }
        if (other.HasRaceId) {
          RaceId = other.RaceId;
        }
        if (other.HasPlayerUnitId) {
          PlayerUnitId = other.PlayerUnitId;
        }
        if (other.HasPlayerHistfigId) {
          PlayerHistfigId = other.PlayerHistfigId;
        }
        if (other.companionHistfigIds_.Count != 0) {
          result.companionHistfigIds_.Add(other.companionHistfigIds_);
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_getWorldInfoOutFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _getWorldInfoOutFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              object unknown;
              if(input.ReadEnum(ref result.mode_, out unknown)) {
                result.hasMode = true;
              } else if(unknown is int) {
              }
              break;
            }
            case 18: {
              result.hasSaveDir = input.ReadString(ref result.saveDir_);
              break;
            }
            case 26: {
              global::dfproto.NameInfo.Builder subBuilder = global::dfproto.NameInfo.CreateBuilder();
              if (result.hasWorldName) {
                subBuilder.MergeFrom(WorldName);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              WorldName = subBuilder.BuildPartial();
              break;
            }
            case 32: {
              result.hasCivId = input.ReadInt32(ref result.civId_);
              break;
            }
            case 40: {
              result.hasSiteId = input.ReadInt32(ref result.siteId_);
              break;
            }
            case 48: {
              result.hasGroupId = input.ReadInt32(ref result.groupId_);
              break;
            }
            case 56: {
              result.hasRaceId = input.ReadInt32(ref result.raceId_);
              break;
            }
            case 64: {
              result.hasPlayerUnitId = input.ReadInt32(ref result.playerUnitId_);
              break;
            }
            case 72: {
              result.hasPlayerHistfigId = input.ReadInt32(ref result.playerHistfigId_);
              break;
            }
            case 82:
            case 80: {
              input.ReadInt32Array(tag, field_name, result.companionHistfigIds_);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasMode {
       get { return result.hasMode; }
      }
      public global::dfproto.GetWorldInfoOut.Types.Mode Mode {
        get { return result.Mode; }
        set { SetMode(value); }
      }
      public Builder SetMode(global::dfproto.GetWorldInfoOut.Types.Mode value) {
        PrepareBuilder();
        result.hasMode = true;
        result.mode_ = value;
        return this;
      }
      public Builder ClearMode() {
        PrepareBuilder();
        result.hasMode = false;
        result.mode_ = global::dfproto.GetWorldInfoOut.Types.Mode.MODE_DWARF;
        return this;
      }
      
      public bool HasSaveDir {
        get { return result.hasSaveDir; }
      }
      public string SaveDir {
        get { return result.SaveDir; }
        set { SetSaveDir(value); }
      }
      public Builder SetSaveDir(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSaveDir = true;
        result.saveDir_ = value;
        return this;
      }
      public Builder ClearSaveDir() {
        PrepareBuilder();
        result.hasSaveDir = false;
        result.saveDir_ = "";
        return this;
      }
      
      public bool HasWorldName {
       get { return result.hasWorldName; }
      }
      public global::dfproto.NameInfo WorldName {
        get { return result.WorldName; }
        set { SetWorldName(value); }
      }
      public Builder SetWorldName(global::dfproto.NameInfo value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasWorldName = true;
        result.worldName_ = value;
        return this;
      }
      public Builder SetWorldName(global::dfproto.NameInfo.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasWorldName = true;
        result.worldName_ = builderForValue.Build();
        return this;
      }
      public Builder MergeWorldName(global::dfproto.NameInfo value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasWorldName &&
            result.worldName_ != global::dfproto.NameInfo.DefaultInstance) {
            result.worldName_ = global::dfproto.NameInfo.CreateBuilder(result.worldName_).MergeFrom(value).BuildPartial();
        } else {
          result.worldName_ = value;
        }
        result.hasWorldName = true;
        return this;
      }
      public Builder ClearWorldName() {
        PrepareBuilder();
        result.hasWorldName = false;
        result.worldName_ = null;
        return this;
      }
      
      public bool HasCivId {
        get { return result.hasCivId; }
      }
      public int CivId {
        get { return result.CivId; }
        set { SetCivId(value); }
      }
      public Builder SetCivId(int value) {
        PrepareBuilder();
        result.hasCivId = true;
        result.civId_ = value;
        return this;
      }
      public Builder ClearCivId() {
        PrepareBuilder();
        result.hasCivId = false;
        result.civId_ = 0;
        return this;
      }
      
      public bool HasSiteId {
        get { return result.hasSiteId; }
      }
      public int SiteId {
        get { return result.SiteId; }
        set { SetSiteId(value); }
      }
      public Builder SetSiteId(int value) {
        PrepareBuilder();
        result.hasSiteId = true;
        result.siteId_ = value;
        return this;
      }
      public Builder ClearSiteId() {
        PrepareBuilder();
        result.hasSiteId = false;
        result.siteId_ = 0;
        return this;
      }
      
      public bool HasGroupId {
        get { return result.hasGroupId; }
      }
      public int GroupId {
        get { return result.GroupId; }
        set { SetGroupId(value); }
      }
      public Builder SetGroupId(int value) {
        PrepareBuilder();
        result.hasGroupId = true;
        result.groupId_ = value;
        return this;
      }
      public Builder ClearGroupId() {
        PrepareBuilder();
        result.hasGroupId = false;
        result.groupId_ = 0;
        return this;
      }
      
      public bool HasRaceId {
        get { return result.hasRaceId; }
      }
      public int RaceId {
        get { return result.RaceId; }
        set { SetRaceId(value); }
      }
      public Builder SetRaceId(int value) {
        PrepareBuilder();
        result.hasRaceId = true;
        result.raceId_ = value;
        return this;
      }
      public Builder ClearRaceId() {
        PrepareBuilder();
        result.hasRaceId = false;
        result.raceId_ = 0;
        return this;
      }
      
      public bool HasPlayerUnitId {
        get { return result.hasPlayerUnitId; }
      }
      public int PlayerUnitId {
        get { return result.PlayerUnitId; }
        set { SetPlayerUnitId(value); }
      }
      public Builder SetPlayerUnitId(int value) {
        PrepareBuilder();
        result.hasPlayerUnitId = true;
        result.playerUnitId_ = value;
        return this;
      }
      public Builder ClearPlayerUnitId() {
        PrepareBuilder();
        result.hasPlayerUnitId = false;
        result.playerUnitId_ = 0;
        return this;
      }
      
      public bool HasPlayerHistfigId {
        get { return result.hasPlayerHistfigId; }
      }
      public int PlayerHistfigId {
        get { return result.PlayerHistfigId; }
        set { SetPlayerHistfigId(value); }
      }
      public Builder SetPlayerHistfigId(int value) {
        PrepareBuilder();
        result.hasPlayerHistfigId = true;
        result.playerHistfigId_ = value;
        return this;
      }
      public Builder ClearPlayerHistfigId() {
        PrepareBuilder();
        result.hasPlayerHistfigId = false;
        result.playerHistfigId_ = 0;
        return this;
      }
      
      public pbc::IPopsicleList<int> CompanionHistfigIdsList {
        get { return PrepareBuilder().companionHistfigIds_; }
      }
      public int CompanionHistfigIdsCount {
        get { return result.CompanionHistfigIdsCount; }
      }
      public int GetCompanionHistfigIds(int index) {
        return result.GetCompanionHistfigIds(index);
      }
      public Builder SetCompanionHistfigIds(int index, int value) {
        PrepareBuilder();
        result.companionHistfigIds_[index] = value;
        return this;
      }
      public Builder AddCompanionHistfigIds(int value) {
        PrepareBuilder();
        result.companionHistfigIds_.Add(value);
        return this;
      }
      public Builder AddRangeCompanionHistfigIds(scg::IEnumerable<int> values) {
        PrepareBuilder();
        result.companionHistfigIds_.Add(values);
        return this;
      }
      public Builder ClearCompanionHistfigIds() {
        PrepareBuilder();
        result.companionHistfigIds_.Clear();
        return this;
      }
    }
    static GetWorldInfoOut() {
      object.ReferenceEquals(global::dfproto.BasicApi.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class ListEnumsOut : pb::GeneratedMessageLite<ListEnumsOut, ListEnumsOut.Builder> {
    private ListEnumsOut() { }
    private static readonly ListEnumsOut defaultInstance = new ListEnumsOut().MakeReadOnly();
    private static readonly string[] _listEnumsOutFieldNames = new string[] { "cie_add_tag_mask1", "cie_add_tag_mask2", "death_info_flags", "inorganic_flags", "job_skill", "material_flags", "profession", "unit_flags1", "unit_flags2", "unit_flags3", "unit_labor" };
    private static readonly uint[] _listEnumsOutFieldTags = new uint[] { 66, 74, 82, 18, 58, 10, 90, 26, 34, 42, 50 };
    public static ListEnumsOut DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ListEnumsOut DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override ListEnumsOut ThisMessage {
      get { return this; }
    }
    
    public const int MaterialFlagsFieldNumber = 1;
    private pbc::PopsicleList<global::dfproto.EnumItemName> materialFlags_ = new pbc::PopsicleList<global::dfproto.EnumItemName>();
    public scg::IList<global::dfproto.EnumItemName> MaterialFlagsList {
      get { return materialFlags_; }
    }
    public int MaterialFlagsCount {
      get { return materialFlags_.Count; }
    }
    public global::dfproto.EnumItemName GetMaterialFlags(int index) {
      return materialFlags_[index];
    }
    
    public const int InorganicFlagsFieldNumber = 2;
    private pbc::PopsicleList<global::dfproto.EnumItemName> inorganicFlags_ = new pbc::PopsicleList<global::dfproto.EnumItemName>();
    public scg::IList<global::dfproto.EnumItemName> InorganicFlagsList {
      get { return inorganicFlags_; }
    }
    public int InorganicFlagsCount {
      get { return inorganicFlags_.Count; }
    }
    public global::dfproto.EnumItemName GetInorganicFlags(int index) {
      return inorganicFlags_[index];
    }
    
    public const int UnitFlags1FieldNumber = 3;
    private pbc::PopsicleList<global::dfproto.EnumItemName> unitFlags1_ = new pbc::PopsicleList<global::dfproto.EnumItemName>();
    public scg::IList<global::dfproto.EnumItemName> UnitFlags1List {
      get { return unitFlags1_; }
    }
    public int UnitFlags1Count {
      get { return unitFlags1_.Count; }
    }
    public global::dfproto.EnumItemName GetUnitFlags1(int index) {
      return unitFlags1_[index];
    }
    
    public const int UnitFlags2FieldNumber = 4;
    private pbc::PopsicleList<global::dfproto.EnumItemName> unitFlags2_ = new pbc::PopsicleList<global::dfproto.EnumItemName>();
    public scg::IList<global::dfproto.EnumItemName> UnitFlags2List {
      get { return unitFlags2_; }
    }
    public int UnitFlags2Count {
      get { return unitFlags2_.Count; }
    }
    public global::dfproto.EnumItemName GetUnitFlags2(int index) {
      return unitFlags2_[index];
    }
    
    public const int UnitFlags3FieldNumber = 5;
    private pbc::PopsicleList<global::dfproto.EnumItemName> unitFlags3_ = new pbc::PopsicleList<global::dfproto.EnumItemName>();
    public scg::IList<global::dfproto.EnumItemName> UnitFlags3List {
      get { return unitFlags3_; }
    }
    public int UnitFlags3Count {
      get { return unitFlags3_.Count; }
    }
    public global::dfproto.EnumItemName GetUnitFlags3(int index) {
      return unitFlags3_[index];
    }
    
    public const int UnitLaborFieldNumber = 6;
    private pbc::PopsicleList<global::dfproto.EnumItemName> unitLabor_ = new pbc::PopsicleList<global::dfproto.EnumItemName>();
    public scg::IList<global::dfproto.EnumItemName> UnitLaborList {
      get { return unitLabor_; }
    }
    public int UnitLaborCount {
      get { return unitLabor_.Count; }
    }
    public global::dfproto.EnumItemName GetUnitLabor(int index) {
      return unitLabor_[index];
    }
    
    public const int JobSkillFieldNumber = 7;
    private pbc::PopsicleList<global::dfproto.EnumItemName> jobSkill_ = new pbc::PopsicleList<global::dfproto.EnumItemName>();
    public scg::IList<global::dfproto.EnumItemName> JobSkillList {
      get { return jobSkill_; }
    }
    public int JobSkillCount {
      get { return jobSkill_.Count; }
    }
    public global::dfproto.EnumItemName GetJobSkill(int index) {
      return jobSkill_[index];
    }
    
    public const int CieAddTagMask1FieldNumber = 8;
    private pbc::PopsicleList<global::dfproto.EnumItemName> cieAddTagMask1_ = new pbc::PopsicleList<global::dfproto.EnumItemName>();
    public scg::IList<global::dfproto.EnumItemName> CieAddTagMask1List {
      get { return cieAddTagMask1_; }
    }
    public int CieAddTagMask1Count {
      get { return cieAddTagMask1_.Count; }
    }
    public global::dfproto.EnumItemName GetCieAddTagMask1(int index) {
      return cieAddTagMask1_[index];
    }
    
    public const int CieAddTagMask2FieldNumber = 9;
    private pbc::PopsicleList<global::dfproto.EnumItemName> cieAddTagMask2_ = new pbc::PopsicleList<global::dfproto.EnumItemName>();
    public scg::IList<global::dfproto.EnumItemName> CieAddTagMask2List {
      get { return cieAddTagMask2_; }
    }
    public int CieAddTagMask2Count {
      get { return cieAddTagMask2_.Count; }
    }
    public global::dfproto.EnumItemName GetCieAddTagMask2(int index) {
      return cieAddTagMask2_[index];
    }
    
    public const int DeathInfoFlagsFieldNumber = 10;
    private pbc::PopsicleList<global::dfproto.EnumItemName> deathInfoFlags_ = new pbc::PopsicleList<global::dfproto.EnumItemName>();
    public scg::IList<global::dfproto.EnumItemName> DeathInfoFlagsList {
      get { return deathInfoFlags_; }
    }
    public int DeathInfoFlagsCount {
      get { return deathInfoFlags_.Count; }
    }
    public global::dfproto.EnumItemName GetDeathInfoFlags(int index) {
      return deathInfoFlags_[index];
    }
    
    public const int ProfessionFieldNumber = 11;
    private pbc::PopsicleList<global::dfproto.EnumItemName> profession_ = new pbc::PopsicleList<global::dfproto.EnumItemName>();
    public scg::IList<global::dfproto.EnumItemName> ProfessionList {
      get { return profession_; }
    }
    public int ProfessionCount {
      get { return profession_.Count; }
    }
    public global::dfproto.EnumItemName GetProfession(int index) {
      return profession_[index];
    }
    
    public override bool IsInitialized {
      get {
        foreach (global::dfproto.EnumItemName element in MaterialFlagsList) {
          if (!element.IsInitialized) return false;
        }
        foreach (global::dfproto.EnumItemName element in InorganicFlagsList) {
          if (!element.IsInitialized) return false;
        }
        foreach (global::dfproto.EnumItemName element in UnitFlags1List) {
          if (!element.IsInitialized) return false;
        }
        foreach (global::dfproto.EnumItemName element in UnitFlags2List) {
          if (!element.IsInitialized) return false;
        }
        foreach (global::dfproto.EnumItemName element in UnitFlags3List) {
          if (!element.IsInitialized) return false;
        }
        foreach (global::dfproto.EnumItemName element in UnitLaborList) {
          if (!element.IsInitialized) return false;
        }
        foreach (global::dfproto.EnumItemName element in JobSkillList) {
          if (!element.IsInitialized) return false;
        }
        foreach (global::dfproto.EnumItemName element in CieAddTagMask1List) {
          if (!element.IsInitialized) return false;
        }
        foreach (global::dfproto.EnumItemName element in CieAddTagMask2List) {
          if (!element.IsInitialized) return false;
        }
        foreach (global::dfproto.EnumItemName element in DeathInfoFlagsList) {
          if (!element.IsInitialized) return false;
        }
        foreach (global::dfproto.EnumItemName element in ProfessionList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _listEnumsOutFieldNames;
      if (materialFlags_.Count > 0) {
        output.WriteMessageArray(1, field_names[5], materialFlags_);
      }
      if (inorganicFlags_.Count > 0) {
        output.WriteMessageArray(2, field_names[3], inorganicFlags_);
      }
      if (unitFlags1_.Count > 0) {
        output.WriteMessageArray(3, field_names[7], unitFlags1_);
      }
      if (unitFlags2_.Count > 0) {
        output.WriteMessageArray(4, field_names[8], unitFlags2_);
      }
      if (unitFlags3_.Count > 0) {
        output.WriteMessageArray(5, field_names[9], unitFlags3_);
      }
      if (unitLabor_.Count > 0) {
        output.WriteMessageArray(6, field_names[10], unitLabor_);
      }
      if (jobSkill_.Count > 0) {
        output.WriteMessageArray(7, field_names[4], jobSkill_);
      }
      if (cieAddTagMask1_.Count > 0) {
        output.WriteMessageArray(8, field_names[0], cieAddTagMask1_);
      }
      if (cieAddTagMask2_.Count > 0) {
        output.WriteMessageArray(9, field_names[1], cieAddTagMask2_);
      }
      if (deathInfoFlags_.Count > 0) {
        output.WriteMessageArray(10, field_names[2], deathInfoFlags_);
      }
      if (profession_.Count > 0) {
        output.WriteMessageArray(11, field_names[6], profession_);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        foreach (global::dfproto.EnumItemName element in MaterialFlagsList) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, element);
        }
        foreach (global::dfproto.EnumItemName element in InorganicFlagsList) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, element);
        }
        foreach (global::dfproto.EnumItemName element in UnitFlags1List) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, element);
        }
        foreach (global::dfproto.EnumItemName element in UnitFlags2List) {
          size += pb::CodedOutputStream.ComputeMessageSize(4, element);
        }
        foreach (global::dfproto.EnumItemName element in UnitFlags3List) {
          size += pb::CodedOutputStream.ComputeMessageSize(5, element);
        }
        foreach (global::dfproto.EnumItemName element in UnitLaborList) {
          size += pb::CodedOutputStream.ComputeMessageSize(6, element);
        }
        foreach (global::dfproto.EnumItemName element in JobSkillList) {
          size += pb::CodedOutputStream.ComputeMessageSize(7, element);
        }
        foreach (global::dfproto.EnumItemName element in CieAddTagMask1List) {
          size += pb::CodedOutputStream.ComputeMessageSize(8, element);
        }
        foreach (global::dfproto.EnumItemName element in CieAddTagMask2List) {
          size += pb::CodedOutputStream.ComputeMessageSize(9, element);
        }
        foreach (global::dfproto.EnumItemName element in DeathInfoFlagsList) {
          size += pb::CodedOutputStream.ComputeMessageSize(10, element);
        }
        foreach (global::dfproto.EnumItemName element in ProfessionList) {
          size += pb::CodedOutputStream.ComputeMessageSize(11, element);
        }
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      foreach(global::dfproto.EnumItemName i in materialFlags_)
        hash ^= i.GetHashCode();
      foreach(global::dfproto.EnumItemName i in inorganicFlags_)
        hash ^= i.GetHashCode();
      foreach(global::dfproto.EnumItemName i in unitFlags1_)
        hash ^= i.GetHashCode();
      foreach(global::dfproto.EnumItemName i in unitFlags2_)
        hash ^= i.GetHashCode();
      foreach(global::dfproto.EnumItemName i in unitFlags3_)
        hash ^= i.GetHashCode();
      foreach(global::dfproto.EnumItemName i in unitLabor_)
        hash ^= i.GetHashCode();
      foreach(global::dfproto.EnumItemName i in jobSkill_)
        hash ^= i.GetHashCode();
      foreach(global::dfproto.EnumItemName i in cieAddTagMask1_)
        hash ^= i.GetHashCode();
      foreach(global::dfproto.EnumItemName i in cieAddTagMask2_)
        hash ^= i.GetHashCode();
      foreach(global::dfproto.EnumItemName i in deathInfoFlags_)
        hash ^= i.GetHashCode();
      foreach(global::dfproto.EnumItemName i in profession_)
        hash ^= i.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      ListEnumsOut other = obj as ListEnumsOut;
      if (other == null) return false;
      if(materialFlags_.Count != other.materialFlags_.Count) return false;
      for(int ix=0; ix < materialFlags_.Count; ix++)
        if(!materialFlags_[ix].Equals(other.materialFlags_[ix])) return false;
      if(inorganicFlags_.Count != other.inorganicFlags_.Count) return false;
      for(int ix=0; ix < inorganicFlags_.Count; ix++)
        if(!inorganicFlags_[ix].Equals(other.inorganicFlags_[ix])) return false;
      if(unitFlags1_.Count != other.unitFlags1_.Count) return false;
      for(int ix=0; ix < unitFlags1_.Count; ix++)
        if(!unitFlags1_[ix].Equals(other.unitFlags1_[ix])) return false;
      if(unitFlags2_.Count != other.unitFlags2_.Count) return false;
      for(int ix=0; ix < unitFlags2_.Count; ix++)
        if(!unitFlags2_[ix].Equals(other.unitFlags2_[ix])) return false;
      if(unitFlags3_.Count != other.unitFlags3_.Count) return false;
      for(int ix=0; ix < unitFlags3_.Count; ix++)
        if(!unitFlags3_[ix].Equals(other.unitFlags3_[ix])) return false;
      if(unitLabor_.Count != other.unitLabor_.Count) return false;
      for(int ix=0; ix < unitLabor_.Count; ix++)
        if(!unitLabor_[ix].Equals(other.unitLabor_[ix])) return false;
      if(jobSkill_.Count != other.jobSkill_.Count) return false;
      for(int ix=0; ix < jobSkill_.Count; ix++)
        if(!jobSkill_[ix].Equals(other.jobSkill_[ix])) return false;
      if(cieAddTagMask1_.Count != other.cieAddTagMask1_.Count) return false;
      for(int ix=0; ix < cieAddTagMask1_.Count; ix++)
        if(!cieAddTagMask1_[ix].Equals(other.cieAddTagMask1_[ix])) return false;
      if(cieAddTagMask2_.Count != other.cieAddTagMask2_.Count) return false;
      for(int ix=0; ix < cieAddTagMask2_.Count; ix++)
        if(!cieAddTagMask2_[ix].Equals(other.cieAddTagMask2_[ix])) return false;
      if(deathInfoFlags_.Count != other.deathInfoFlags_.Count) return false;
      for(int ix=0; ix < deathInfoFlags_.Count; ix++)
        if(!deathInfoFlags_[ix].Equals(other.deathInfoFlags_[ix])) return false;
      if(profession_.Count != other.profession_.Count) return false;
      for(int ix=0; ix < profession_.Count; ix++)
        if(!profession_[ix].Equals(other.profession_[ix])) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("material_flags", materialFlags_, writer);
      PrintField("inorganic_flags", inorganicFlags_, writer);
      PrintField("unit_flags1", unitFlags1_, writer);
      PrintField("unit_flags2", unitFlags2_, writer);
      PrintField("unit_flags3", unitFlags3_, writer);
      PrintField("unit_labor", unitLabor_, writer);
      PrintField("job_skill", jobSkill_, writer);
      PrintField("cie_add_tag_mask1", cieAddTagMask1_, writer);
      PrintField("cie_add_tag_mask2", cieAddTagMask2_, writer);
      PrintField("death_info_flags", deathInfoFlags_, writer);
      PrintField("profession", profession_, writer);
    }
    #endregion
    
    public static ListEnumsOut ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ListEnumsOut ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ListEnumsOut ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ListEnumsOut ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ListEnumsOut ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ListEnumsOut ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ListEnumsOut ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ListEnumsOut ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ListEnumsOut ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ListEnumsOut ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ListEnumsOut MakeReadOnly() {
      materialFlags_.MakeReadOnly();
      inorganicFlags_.MakeReadOnly();
      unitFlags1_.MakeReadOnly();
      unitFlags2_.MakeReadOnly();
      unitFlags3_.MakeReadOnly();
      unitLabor_.MakeReadOnly();
      jobSkill_.MakeReadOnly();
      cieAddTagMask1_.MakeReadOnly();
      cieAddTagMask2_.MakeReadOnly();
      deathInfoFlags_.MakeReadOnly();
      profession_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ListEnumsOut prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilderLite<ListEnumsOut, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ListEnumsOut cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private ListEnumsOut result;
      
      private ListEnumsOut PrepareBuilder() {
        if (resultIsReadOnly) {
          ListEnumsOut original = result;
          result = new ListEnumsOut();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override ListEnumsOut MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override ListEnumsOut DefaultInstanceForType {
        get { return global::dfproto.ListEnumsOut.DefaultInstance; }
      }
      
      public override ListEnumsOut BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is ListEnumsOut) {
          return MergeFrom((ListEnumsOut) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ListEnumsOut other) {
        if (other == global::dfproto.ListEnumsOut.DefaultInstance) return this;
        PrepareBuilder();
        if (other.materialFlags_.Count != 0) {
          result.materialFlags_.Add(other.materialFlags_);
        }
        if (other.inorganicFlags_.Count != 0) {
          result.inorganicFlags_.Add(other.inorganicFlags_);
        }
        if (other.unitFlags1_.Count != 0) {
          result.unitFlags1_.Add(other.unitFlags1_);
        }
        if (other.unitFlags2_.Count != 0) {
          result.unitFlags2_.Add(other.unitFlags2_);
        }
        if (other.unitFlags3_.Count != 0) {
          result.unitFlags3_.Add(other.unitFlags3_);
        }
        if (other.unitLabor_.Count != 0) {
          result.unitLabor_.Add(other.unitLabor_);
        }
        if (other.jobSkill_.Count != 0) {
          result.jobSkill_.Add(other.jobSkill_);
        }
        if (other.cieAddTagMask1_.Count != 0) {
          result.cieAddTagMask1_.Add(other.cieAddTagMask1_);
        }
        if (other.cieAddTagMask2_.Count != 0) {
          result.cieAddTagMask2_.Add(other.cieAddTagMask2_);
        }
        if (other.deathInfoFlags_.Count != 0) {
          result.deathInfoFlags_.Add(other.deathInfoFlags_);
        }
        if (other.profession_.Count != 0) {
          result.profession_.Add(other.profession_);
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_listEnumsOutFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _listEnumsOutFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              input.ReadMessageArray(tag, field_name, result.materialFlags_, global::dfproto.EnumItemName.DefaultInstance, extensionRegistry);
              break;
            }
            case 18: {
              input.ReadMessageArray(tag, field_name, result.inorganicFlags_, global::dfproto.EnumItemName.DefaultInstance, extensionRegistry);
              break;
            }
            case 26: {
              input.ReadMessageArray(tag, field_name, result.unitFlags1_, global::dfproto.EnumItemName.DefaultInstance, extensionRegistry);
              break;
            }
            case 34: {
              input.ReadMessageArray(tag, field_name, result.unitFlags2_, global::dfproto.EnumItemName.DefaultInstance, extensionRegistry);
              break;
            }
            case 42: {
              input.ReadMessageArray(tag, field_name, result.unitFlags3_, global::dfproto.EnumItemName.DefaultInstance, extensionRegistry);
              break;
            }
            case 50: {
              input.ReadMessageArray(tag, field_name, result.unitLabor_, global::dfproto.EnumItemName.DefaultInstance, extensionRegistry);
              break;
            }
            case 58: {
              input.ReadMessageArray(tag, field_name, result.jobSkill_, global::dfproto.EnumItemName.DefaultInstance, extensionRegistry);
              break;
            }
            case 66: {
              input.ReadMessageArray(tag, field_name, result.cieAddTagMask1_, global::dfproto.EnumItemName.DefaultInstance, extensionRegistry);
              break;
            }
            case 74: {
              input.ReadMessageArray(tag, field_name, result.cieAddTagMask2_, global::dfproto.EnumItemName.DefaultInstance, extensionRegistry);
              break;
            }
            case 82: {
              input.ReadMessageArray(tag, field_name, result.deathInfoFlags_, global::dfproto.EnumItemName.DefaultInstance, extensionRegistry);
              break;
            }
            case 90: {
              input.ReadMessageArray(tag, field_name, result.profession_, global::dfproto.EnumItemName.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public pbc::IPopsicleList<global::dfproto.EnumItemName> MaterialFlagsList {
        get { return PrepareBuilder().materialFlags_; }
      }
      public int MaterialFlagsCount {
        get { return result.MaterialFlagsCount; }
      }
      public global::dfproto.EnumItemName GetMaterialFlags(int index) {
        return result.GetMaterialFlags(index);
      }
      public Builder SetMaterialFlags(int index, global::dfproto.EnumItemName value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.materialFlags_[index] = value;
        return this;
      }
      public Builder SetMaterialFlags(int index, global::dfproto.EnumItemName.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.materialFlags_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddMaterialFlags(global::dfproto.EnumItemName value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.materialFlags_.Add(value);
        return this;
      }
      public Builder AddMaterialFlags(global::dfproto.EnumItemName.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.materialFlags_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeMaterialFlags(scg::IEnumerable<global::dfproto.EnumItemName> values) {
        PrepareBuilder();
        result.materialFlags_.Add(values);
        return this;
      }
      public Builder ClearMaterialFlags() {
        PrepareBuilder();
        result.materialFlags_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<global::dfproto.EnumItemName> InorganicFlagsList {
        get { return PrepareBuilder().inorganicFlags_; }
      }
      public int InorganicFlagsCount {
        get { return result.InorganicFlagsCount; }
      }
      public global::dfproto.EnumItemName GetInorganicFlags(int index) {
        return result.GetInorganicFlags(index);
      }
      public Builder SetInorganicFlags(int index, global::dfproto.EnumItemName value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.inorganicFlags_[index] = value;
        return this;
      }
      public Builder SetInorganicFlags(int index, global::dfproto.EnumItemName.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.inorganicFlags_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddInorganicFlags(global::dfproto.EnumItemName value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.inorganicFlags_.Add(value);
        return this;
      }
      public Builder AddInorganicFlags(global::dfproto.EnumItemName.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.inorganicFlags_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeInorganicFlags(scg::IEnumerable<global::dfproto.EnumItemName> values) {
        PrepareBuilder();
        result.inorganicFlags_.Add(values);
        return this;
      }
      public Builder ClearInorganicFlags() {
        PrepareBuilder();
        result.inorganicFlags_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<global::dfproto.EnumItemName> UnitFlags1List {
        get { return PrepareBuilder().unitFlags1_; }
      }
      public int UnitFlags1Count {
        get { return result.UnitFlags1Count; }
      }
      public global::dfproto.EnumItemName GetUnitFlags1(int index) {
        return result.GetUnitFlags1(index);
      }
      public Builder SetUnitFlags1(int index, global::dfproto.EnumItemName value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.unitFlags1_[index] = value;
        return this;
      }
      public Builder SetUnitFlags1(int index, global::dfproto.EnumItemName.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.unitFlags1_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddUnitFlags1(global::dfproto.EnumItemName value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.unitFlags1_.Add(value);
        return this;
      }
      public Builder AddUnitFlags1(global::dfproto.EnumItemName.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.unitFlags1_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeUnitFlags1(scg::IEnumerable<global::dfproto.EnumItemName> values) {
        PrepareBuilder();
        result.unitFlags1_.Add(values);
        return this;
      }
      public Builder ClearUnitFlags1() {
        PrepareBuilder();
        result.unitFlags1_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<global::dfproto.EnumItemName> UnitFlags2List {
        get { return PrepareBuilder().unitFlags2_; }
      }
      public int UnitFlags2Count {
        get { return result.UnitFlags2Count; }
      }
      public global::dfproto.EnumItemName GetUnitFlags2(int index) {
        return result.GetUnitFlags2(index);
      }
      public Builder SetUnitFlags2(int index, global::dfproto.EnumItemName value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.unitFlags2_[index] = value;
        return this;
      }
      public Builder SetUnitFlags2(int index, global::dfproto.EnumItemName.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.unitFlags2_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddUnitFlags2(global::dfproto.EnumItemName value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.unitFlags2_.Add(value);
        return this;
      }
      public Builder AddUnitFlags2(global::dfproto.EnumItemName.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.unitFlags2_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeUnitFlags2(scg::IEnumerable<global::dfproto.EnumItemName> values) {
        PrepareBuilder();
        result.unitFlags2_.Add(values);
        return this;
      }
      public Builder ClearUnitFlags2() {
        PrepareBuilder();
        result.unitFlags2_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<global::dfproto.EnumItemName> UnitFlags3List {
        get { return PrepareBuilder().unitFlags3_; }
      }
      public int UnitFlags3Count {
        get { return result.UnitFlags3Count; }
      }
      public global::dfproto.EnumItemName GetUnitFlags3(int index) {
        return result.GetUnitFlags3(index);
      }
      public Builder SetUnitFlags3(int index, global::dfproto.EnumItemName value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.unitFlags3_[index] = value;
        return this;
      }
      public Builder SetUnitFlags3(int index, global::dfproto.EnumItemName.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.unitFlags3_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddUnitFlags3(global::dfproto.EnumItemName value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.unitFlags3_.Add(value);
        return this;
      }
      public Builder AddUnitFlags3(global::dfproto.EnumItemName.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.unitFlags3_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeUnitFlags3(scg::IEnumerable<global::dfproto.EnumItemName> values) {
        PrepareBuilder();
        result.unitFlags3_.Add(values);
        return this;
      }
      public Builder ClearUnitFlags3() {
        PrepareBuilder();
        result.unitFlags3_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<global::dfproto.EnumItemName> UnitLaborList {
        get { return PrepareBuilder().unitLabor_; }
      }
      public int UnitLaborCount {
        get { return result.UnitLaborCount; }
      }
      public global::dfproto.EnumItemName GetUnitLabor(int index) {
        return result.GetUnitLabor(index);
      }
      public Builder SetUnitLabor(int index, global::dfproto.EnumItemName value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.unitLabor_[index] = value;
        return this;
      }
      public Builder SetUnitLabor(int index, global::dfproto.EnumItemName.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.unitLabor_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddUnitLabor(global::dfproto.EnumItemName value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.unitLabor_.Add(value);
        return this;
      }
      public Builder AddUnitLabor(global::dfproto.EnumItemName.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.unitLabor_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeUnitLabor(scg::IEnumerable<global::dfproto.EnumItemName> values) {
        PrepareBuilder();
        result.unitLabor_.Add(values);
        return this;
      }
      public Builder ClearUnitLabor() {
        PrepareBuilder();
        result.unitLabor_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<global::dfproto.EnumItemName> JobSkillList {
        get { return PrepareBuilder().jobSkill_; }
      }
      public int JobSkillCount {
        get { return result.JobSkillCount; }
      }
      public global::dfproto.EnumItemName GetJobSkill(int index) {
        return result.GetJobSkill(index);
      }
      public Builder SetJobSkill(int index, global::dfproto.EnumItemName value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.jobSkill_[index] = value;
        return this;
      }
      public Builder SetJobSkill(int index, global::dfproto.EnumItemName.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.jobSkill_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddJobSkill(global::dfproto.EnumItemName value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.jobSkill_.Add(value);
        return this;
      }
      public Builder AddJobSkill(global::dfproto.EnumItemName.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.jobSkill_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeJobSkill(scg::IEnumerable<global::dfproto.EnumItemName> values) {
        PrepareBuilder();
        result.jobSkill_.Add(values);
        return this;
      }
      public Builder ClearJobSkill() {
        PrepareBuilder();
        result.jobSkill_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<global::dfproto.EnumItemName> CieAddTagMask1List {
        get { return PrepareBuilder().cieAddTagMask1_; }
      }
      public int CieAddTagMask1Count {
        get { return result.CieAddTagMask1Count; }
      }
      public global::dfproto.EnumItemName GetCieAddTagMask1(int index) {
        return result.GetCieAddTagMask1(index);
      }
      public Builder SetCieAddTagMask1(int index, global::dfproto.EnumItemName value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.cieAddTagMask1_[index] = value;
        return this;
      }
      public Builder SetCieAddTagMask1(int index, global::dfproto.EnumItemName.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.cieAddTagMask1_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddCieAddTagMask1(global::dfproto.EnumItemName value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.cieAddTagMask1_.Add(value);
        return this;
      }
      public Builder AddCieAddTagMask1(global::dfproto.EnumItemName.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.cieAddTagMask1_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeCieAddTagMask1(scg::IEnumerable<global::dfproto.EnumItemName> values) {
        PrepareBuilder();
        result.cieAddTagMask1_.Add(values);
        return this;
      }
      public Builder ClearCieAddTagMask1() {
        PrepareBuilder();
        result.cieAddTagMask1_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<global::dfproto.EnumItemName> CieAddTagMask2List {
        get { return PrepareBuilder().cieAddTagMask2_; }
      }
      public int CieAddTagMask2Count {
        get { return result.CieAddTagMask2Count; }
      }
      public global::dfproto.EnumItemName GetCieAddTagMask2(int index) {
        return result.GetCieAddTagMask2(index);
      }
      public Builder SetCieAddTagMask2(int index, global::dfproto.EnumItemName value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.cieAddTagMask2_[index] = value;
        return this;
      }
      public Builder SetCieAddTagMask2(int index, global::dfproto.EnumItemName.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.cieAddTagMask2_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddCieAddTagMask2(global::dfproto.EnumItemName value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.cieAddTagMask2_.Add(value);
        return this;
      }
      public Builder AddCieAddTagMask2(global::dfproto.EnumItemName.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.cieAddTagMask2_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeCieAddTagMask2(scg::IEnumerable<global::dfproto.EnumItemName> values) {
        PrepareBuilder();
        result.cieAddTagMask2_.Add(values);
        return this;
      }
      public Builder ClearCieAddTagMask2() {
        PrepareBuilder();
        result.cieAddTagMask2_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<global::dfproto.EnumItemName> DeathInfoFlagsList {
        get { return PrepareBuilder().deathInfoFlags_; }
      }
      public int DeathInfoFlagsCount {
        get { return result.DeathInfoFlagsCount; }
      }
      public global::dfproto.EnumItemName GetDeathInfoFlags(int index) {
        return result.GetDeathInfoFlags(index);
      }
      public Builder SetDeathInfoFlags(int index, global::dfproto.EnumItemName value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.deathInfoFlags_[index] = value;
        return this;
      }
      public Builder SetDeathInfoFlags(int index, global::dfproto.EnumItemName.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.deathInfoFlags_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddDeathInfoFlags(global::dfproto.EnumItemName value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.deathInfoFlags_.Add(value);
        return this;
      }
      public Builder AddDeathInfoFlags(global::dfproto.EnumItemName.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.deathInfoFlags_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeDeathInfoFlags(scg::IEnumerable<global::dfproto.EnumItemName> values) {
        PrepareBuilder();
        result.deathInfoFlags_.Add(values);
        return this;
      }
      public Builder ClearDeathInfoFlags() {
        PrepareBuilder();
        result.deathInfoFlags_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<global::dfproto.EnumItemName> ProfessionList {
        get { return PrepareBuilder().profession_; }
      }
      public int ProfessionCount {
        get { return result.ProfessionCount; }
      }
      public global::dfproto.EnumItemName GetProfession(int index) {
        return result.GetProfession(index);
      }
      public Builder SetProfession(int index, global::dfproto.EnumItemName value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.profession_[index] = value;
        return this;
      }
      public Builder SetProfession(int index, global::dfproto.EnumItemName.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.profession_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddProfession(global::dfproto.EnumItemName value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.profession_.Add(value);
        return this;
      }
      public Builder AddProfession(global::dfproto.EnumItemName.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.profession_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeProfession(scg::IEnumerable<global::dfproto.EnumItemName> values) {
        PrepareBuilder();
        result.profession_.Add(values);
        return this;
      }
      public Builder ClearProfession() {
        PrepareBuilder();
        result.profession_.Clear();
        return this;
      }
    }
    static ListEnumsOut() {
      object.ReferenceEquals(global::dfproto.BasicApi.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class ListMaterialsIn : pb::GeneratedMessageLite<ListMaterialsIn, ListMaterialsIn.Builder> {
    private ListMaterialsIn() { }
    private static readonly ListMaterialsIn defaultInstance = new ListMaterialsIn().MakeReadOnly();
    private static readonly string[] _listMaterialsInFieldNames = new string[] { "builtin", "creatures", "id_list", "inorganic", "mask", "plants" };
    private static readonly uint[] _listMaterialsInFieldTags = new uint[] { 24, 40, 18, 32, 10, 48 };
    public static ListMaterialsIn DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ListMaterialsIn DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override ListMaterialsIn ThisMessage {
      get { return this; }
    }
    
    public const int MaskFieldNumber = 1;
    private bool hasMask;
    private global::dfproto.BasicMaterialInfoMask mask_;
    public bool HasMask {
      get { return hasMask; }
    }
    public global::dfproto.BasicMaterialInfoMask Mask {
      get { return mask_ ?? global::dfproto.BasicMaterialInfoMask.DefaultInstance; }
    }
    
    public const int IdListFieldNumber = 2;
    private pbc::PopsicleList<global::dfproto.BasicMaterialId> idList_ = new pbc::PopsicleList<global::dfproto.BasicMaterialId>();
    public scg::IList<global::dfproto.BasicMaterialId> IdListList {
      get { return idList_; }
    }
    public int IdListCount {
      get { return idList_.Count; }
    }
    public global::dfproto.BasicMaterialId GetIdList(int index) {
      return idList_[index];
    }
    
    public const int BuiltinFieldNumber = 3;
    private bool hasBuiltin;
    private bool builtin_;
    public bool HasBuiltin {
      get { return hasBuiltin; }
    }
    public bool Builtin {
      get { return builtin_; }
    }
    
    public const int InorganicFieldNumber = 4;
    private bool hasInorganic;
    private bool inorganic_;
    public bool HasInorganic {
      get { return hasInorganic; }
    }
    public bool Inorganic {
      get { return inorganic_; }
    }
    
    public const int CreaturesFieldNumber = 5;
    private bool hasCreatures;
    private bool creatures_;
    public bool HasCreatures {
      get { return hasCreatures; }
    }
    public bool Creatures {
      get { return creatures_; }
    }
    
    public const int PlantsFieldNumber = 6;
    private bool hasPlants;
    private bool plants_;
    public bool HasPlants {
      get { return hasPlants; }
    }
    public bool Plants {
      get { return plants_; }
    }
    
    public override bool IsInitialized {
      get {
        foreach (global::dfproto.BasicMaterialId element in IdListList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _listMaterialsInFieldNames;
      if (hasMask) {
        output.WriteMessage(1, field_names[4], Mask);
      }
      if (idList_.Count > 0) {
        output.WriteMessageArray(2, field_names[2], idList_);
      }
      if (hasBuiltin) {
        output.WriteBool(3, field_names[0], Builtin);
      }
      if (hasInorganic) {
        output.WriteBool(4, field_names[3], Inorganic);
      }
      if (hasCreatures) {
        output.WriteBool(5, field_names[1], Creatures);
      }
      if (hasPlants) {
        output.WriteBool(6, field_names[5], Plants);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasMask) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, Mask);
        }
        foreach (global::dfproto.BasicMaterialId element in IdListList) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, element);
        }
        if (hasBuiltin) {
          size += pb::CodedOutputStream.ComputeBoolSize(3, Builtin);
        }
        if (hasInorganic) {
          size += pb::CodedOutputStream.ComputeBoolSize(4, Inorganic);
        }
        if (hasCreatures) {
          size += pb::CodedOutputStream.ComputeBoolSize(5, Creatures);
        }
        if (hasPlants) {
          size += pb::CodedOutputStream.ComputeBoolSize(6, Plants);
        }
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasMask) hash ^= mask_.GetHashCode();
      foreach(global::dfproto.BasicMaterialId i in idList_)
        hash ^= i.GetHashCode();
      if (hasBuiltin) hash ^= builtin_.GetHashCode();
      if (hasInorganic) hash ^= inorganic_.GetHashCode();
      if (hasCreatures) hash ^= creatures_.GetHashCode();
      if (hasPlants) hash ^= plants_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      ListMaterialsIn other = obj as ListMaterialsIn;
      if (other == null) return false;
      if (hasMask != other.hasMask || (hasMask && !mask_.Equals(other.mask_))) return false;
      if(idList_.Count != other.idList_.Count) return false;
      for(int ix=0; ix < idList_.Count; ix++)
        if(!idList_[ix].Equals(other.idList_[ix])) return false;
      if (hasBuiltin != other.hasBuiltin || (hasBuiltin && !builtin_.Equals(other.builtin_))) return false;
      if (hasInorganic != other.hasInorganic || (hasInorganic && !inorganic_.Equals(other.inorganic_))) return false;
      if (hasCreatures != other.hasCreatures || (hasCreatures && !creatures_.Equals(other.creatures_))) return false;
      if (hasPlants != other.hasPlants || (hasPlants && !plants_.Equals(other.plants_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("mask", hasMask, mask_, writer);
      PrintField("id_list", idList_, writer);
      PrintField("builtin", hasBuiltin, builtin_, writer);
      PrintField("inorganic", hasInorganic, inorganic_, writer);
      PrintField("creatures", hasCreatures, creatures_, writer);
      PrintField("plants", hasPlants, plants_, writer);
    }
    #endregion
    
    public static ListMaterialsIn ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ListMaterialsIn ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ListMaterialsIn ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ListMaterialsIn ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ListMaterialsIn ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ListMaterialsIn ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ListMaterialsIn ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ListMaterialsIn ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ListMaterialsIn ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ListMaterialsIn ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ListMaterialsIn MakeReadOnly() {
      idList_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ListMaterialsIn prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilderLite<ListMaterialsIn, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ListMaterialsIn cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private ListMaterialsIn result;
      
      private ListMaterialsIn PrepareBuilder() {
        if (resultIsReadOnly) {
          ListMaterialsIn original = result;
          result = new ListMaterialsIn();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override ListMaterialsIn MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override ListMaterialsIn DefaultInstanceForType {
        get { return global::dfproto.ListMaterialsIn.DefaultInstance; }
      }
      
      public override ListMaterialsIn BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is ListMaterialsIn) {
          return MergeFrom((ListMaterialsIn) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ListMaterialsIn other) {
        if (other == global::dfproto.ListMaterialsIn.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasMask) {
          MergeMask(other.Mask);
        }
        if (other.idList_.Count != 0) {
          result.idList_.Add(other.idList_);
        }
        if (other.HasBuiltin) {
          Builtin = other.Builtin;
        }
        if (other.HasInorganic) {
          Inorganic = other.Inorganic;
        }
        if (other.HasCreatures) {
          Creatures = other.Creatures;
        }
        if (other.HasPlants) {
          Plants = other.Plants;
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_listMaterialsInFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _listMaterialsInFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::dfproto.BasicMaterialInfoMask.Builder subBuilder = global::dfproto.BasicMaterialInfoMask.CreateBuilder();
              if (result.hasMask) {
                subBuilder.MergeFrom(Mask);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Mask = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              input.ReadMessageArray(tag, field_name, result.idList_, global::dfproto.BasicMaterialId.DefaultInstance, extensionRegistry);
              break;
            }
            case 24: {
              result.hasBuiltin = input.ReadBool(ref result.builtin_);
              break;
            }
            case 32: {
              result.hasInorganic = input.ReadBool(ref result.inorganic_);
              break;
            }
            case 40: {
              result.hasCreatures = input.ReadBool(ref result.creatures_);
              break;
            }
            case 48: {
              result.hasPlants = input.ReadBool(ref result.plants_);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasMask {
       get { return result.hasMask; }
      }
      public global::dfproto.BasicMaterialInfoMask Mask {
        get { return result.Mask; }
        set { SetMask(value); }
      }
      public Builder SetMask(global::dfproto.BasicMaterialInfoMask value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasMask = true;
        result.mask_ = value;
        return this;
      }
      public Builder SetMask(global::dfproto.BasicMaterialInfoMask.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasMask = true;
        result.mask_ = builderForValue.Build();
        return this;
      }
      public Builder MergeMask(global::dfproto.BasicMaterialInfoMask value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasMask &&
            result.mask_ != global::dfproto.BasicMaterialInfoMask.DefaultInstance) {
            result.mask_ = global::dfproto.BasicMaterialInfoMask.CreateBuilder(result.mask_).MergeFrom(value).BuildPartial();
        } else {
          result.mask_ = value;
        }
        result.hasMask = true;
        return this;
      }
      public Builder ClearMask() {
        PrepareBuilder();
        result.hasMask = false;
        result.mask_ = null;
        return this;
      }
      
      public pbc::IPopsicleList<global::dfproto.BasicMaterialId> IdListList {
        get { return PrepareBuilder().idList_; }
      }
      public int IdListCount {
        get { return result.IdListCount; }
      }
      public global::dfproto.BasicMaterialId GetIdList(int index) {
        return result.GetIdList(index);
      }
      public Builder SetIdList(int index, global::dfproto.BasicMaterialId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.idList_[index] = value;
        return this;
      }
      public Builder SetIdList(int index, global::dfproto.BasicMaterialId.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.idList_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddIdList(global::dfproto.BasicMaterialId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.idList_.Add(value);
        return this;
      }
      public Builder AddIdList(global::dfproto.BasicMaterialId.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.idList_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeIdList(scg::IEnumerable<global::dfproto.BasicMaterialId> values) {
        PrepareBuilder();
        result.idList_.Add(values);
        return this;
      }
      public Builder ClearIdList() {
        PrepareBuilder();
        result.idList_.Clear();
        return this;
      }
      
      public bool HasBuiltin {
        get { return result.hasBuiltin; }
      }
      public bool Builtin {
        get { return result.Builtin; }
        set { SetBuiltin(value); }
      }
      public Builder SetBuiltin(bool value) {
        PrepareBuilder();
        result.hasBuiltin = true;
        result.builtin_ = value;
        return this;
      }
      public Builder ClearBuiltin() {
        PrepareBuilder();
        result.hasBuiltin = false;
        result.builtin_ = false;
        return this;
      }
      
      public bool HasInorganic {
        get { return result.hasInorganic; }
      }
      public bool Inorganic {
        get { return result.Inorganic; }
        set { SetInorganic(value); }
      }
      public Builder SetInorganic(bool value) {
        PrepareBuilder();
        result.hasInorganic = true;
        result.inorganic_ = value;
        return this;
      }
      public Builder ClearInorganic() {
        PrepareBuilder();
        result.hasInorganic = false;
        result.inorganic_ = false;
        return this;
      }
      
      public bool HasCreatures {
        get { return result.hasCreatures; }
      }
      public bool Creatures {
        get { return result.Creatures; }
        set { SetCreatures(value); }
      }
      public Builder SetCreatures(bool value) {
        PrepareBuilder();
        result.hasCreatures = true;
        result.creatures_ = value;
        return this;
      }
      public Builder ClearCreatures() {
        PrepareBuilder();
        result.hasCreatures = false;
        result.creatures_ = false;
        return this;
      }
      
      public bool HasPlants {
        get { return result.hasPlants; }
      }
      public bool Plants {
        get { return result.Plants; }
        set { SetPlants(value); }
      }
      public Builder SetPlants(bool value) {
        PrepareBuilder();
        result.hasPlants = true;
        result.plants_ = value;
        return this;
      }
      public Builder ClearPlants() {
        PrepareBuilder();
        result.hasPlants = false;
        result.plants_ = false;
        return this;
      }
    }
    static ListMaterialsIn() {
      object.ReferenceEquals(global::dfproto.BasicApi.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class ListMaterialsOut : pb::GeneratedMessageLite<ListMaterialsOut, ListMaterialsOut.Builder> {
    private ListMaterialsOut() { }
    private static readonly ListMaterialsOut defaultInstance = new ListMaterialsOut().MakeReadOnly();
    private static readonly string[] _listMaterialsOutFieldNames = new string[] { "value" };
    private static readonly uint[] _listMaterialsOutFieldTags = new uint[] { 10 };
    public static ListMaterialsOut DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ListMaterialsOut DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override ListMaterialsOut ThisMessage {
      get { return this; }
    }
    
    public const int ValueFieldNumber = 1;
    private pbc::PopsicleList<global::dfproto.BasicMaterialInfo> value_ = new pbc::PopsicleList<global::dfproto.BasicMaterialInfo>();
    public scg::IList<global::dfproto.BasicMaterialInfo> ValueList {
      get { return value_; }
    }
    public int ValueCount {
      get { return value_.Count; }
    }
    public global::dfproto.BasicMaterialInfo GetValue(int index) {
      return value_[index];
    }
    
    public override bool IsInitialized {
      get {
        foreach (global::dfproto.BasicMaterialInfo element in ValueList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _listMaterialsOutFieldNames;
      if (value_.Count > 0) {
        output.WriteMessageArray(1, field_names[0], value_);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        foreach (global::dfproto.BasicMaterialInfo element in ValueList) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, element);
        }
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      foreach(global::dfproto.BasicMaterialInfo i in value_)
        hash ^= i.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      ListMaterialsOut other = obj as ListMaterialsOut;
      if (other == null) return false;
      if(value_.Count != other.value_.Count) return false;
      for(int ix=0; ix < value_.Count; ix++)
        if(!value_[ix].Equals(other.value_[ix])) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("value", value_, writer);
    }
    #endregion
    
    public static ListMaterialsOut ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ListMaterialsOut ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ListMaterialsOut ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ListMaterialsOut ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ListMaterialsOut ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ListMaterialsOut ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ListMaterialsOut ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ListMaterialsOut ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ListMaterialsOut ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ListMaterialsOut ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ListMaterialsOut MakeReadOnly() {
      value_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ListMaterialsOut prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilderLite<ListMaterialsOut, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ListMaterialsOut cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private ListMaterialsOut result;
      
      private ListMaterialsOut PrepareBuilder() {
        if (resultIsReadOnly) {
          ListMaterialsOut original = result;
          result = new ListMaterialsOut();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override ListMaterialsOut MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override ListMaterialsOut DefaultInstanceForType {
        get { return global::dfproto.ListMaterialsOut.DefaultInstance; }
      }
      
      public override ListMaterialsOut BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is ListMaterialsOut) {
          return MergeFrom((ListMaterialsOut) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ListMaterialsOut other) {
        if (other == global::dfproto.ListMaterialsOut.DefaultInstance) return this;
        PrepareBuilder();
        if (other.value_.Count != 0) {
          result.value_.Add(other.value_);
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_listMaterialsOutFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _listMaterialsOutFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              input.ReadMessageArray(tag, field_name, result.value_, global::dfproto.BasicMaterialInfo.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public pbc::IPopsicleList<global::dfproto.BasicMaterialInfo> ValueList {
        get { return PrepareBuilder().value_; }
      }
      public int ValueCount {
        get { return result.ValueCount; }
      }
      public global::dfproto.BasicMaterialInfo GetValue(int index) {
        return result.GetValue(index);
      }
      public Builder SetValue(int index, global::dfproto.BasicMaterialInfo value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.value_[index] = value;
        return this;
      }
      public Builder SetValue(int index, global::dfproto.BasicMaterialInfo.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.value_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddValue(global::dfproto.BasicMaterialInfo value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.value_.Add(value);
        return this;
      }
      public Builder AddValue(global::dfproto.BasicMaterialInfo.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.value_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeValue(scg::IEnumerable<global::dfproto.BasicMaterialInfo> values) {
        PrepareBuilder();
        result.value_.Add(values);
        return this;
      }
      public Builder ClearValue() {
        PrepareBuilder();
        result.value_.Clear();
        return this;
      }
    }
    static ListMaterialsOut() {
      object.ReferenceEquals(global::dfproto.BasicApi.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class ListUnitsIn : pb::GeneratedMessageLite<ListUnitsIn, ListUnitsIn.Builder> {
    private ListUnitsIn() { }
    private static readonly ListUnitsIn defaultInstance = new ListUnitsIn().MakeReadOnly();
    private static readonly string[] _listUnitsInFieldNames = new string[] { "alive", "civ_id", "dead", "id_list", "mask", "race", "sane", "scan_all" };
    private static readonly uint[] _listUnitsInFieldTags = new uint[] { 56, 32, 48, 16, 10, 24, 64, 40 };
    public static ListUnitsIn DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ListUnitsIn DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override ListUnitsIn ThisMessage {
      get { return this; }
    }
    
    public const int MaskFieldNumber = 1;
    private bool hasMask;
    private global::dfproto.BasicUnitInfoMask mask_;
    public bool HasMask {
      get { return hasMask; }
    }
    public global::dfproto.BasicUnitInfoMask Mask {
      get { return mask_ ?? global::dfproto.BasicUnitInfoMask.DefaultInstance; }
    }
    
    public const int IdListFieldNumber = 2;
    private pbc::PopsicleList<int> idList_ = new pbc::PopsicleList<int>();
    public scg::IList<int> IdListList {
      get { return pbc::Lists.AsReadOnly(idList_); }
    }
    public int IdListCount {
      get { return idList_.Count; }
    }
    public int GetIdList(int index) {
      return idList_[index];
    }
    
    public const int ScanAllFieldNumber = 5;
    private bool hasScanAll;
    private bool scanAll_;
    public bool HasScanAll {
      get { return hasScanAll; }
    }
    public bool ScanAll {
      get { return scanAll_; }
    }
    
    public const int RaceFieldNumber = 3;
    private bool hasRace;
    private int race_;
    public bool HasRace {
      get { return hasRace; }
    }
    public int Race {
      get { return race_; }
    }
    
    public const int CivIdFieldNumber = 4;
    private bool hasCivId;
    private int civId_;
    public bool HasCivId {
      get { return hasCivId; }
    }
    public int CivId {
      get { return civId_; }
    }
    
    public const int DeadFieldNumber = 6;
    private bool hasDead;
    private bool dead_;
    public bool HasDead {
      get { return hasDead; }
    }
    public bool Dead {
      get { return dead_; }
    }
    
    public const int AliveFieldNumber = 7;
    private bool hasAlive;
    private bool alive_;
    public bool HasAlive {
      get { return hasAlive; }
    }
    public bool Alive {
      get { return alive_; }
    }
    
    public const int SaneFieldNumber = 8;
    private bool hasSane;
    private bool sane_;
    public bool HasSane {
      get { return hasSane; }
    }
    public bool Sane {
      get { return sane_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _listUnitsInFieldNames;
      if (hasMask) {
        output.WriteMessage(1, field_names[4], Mask);
      }
      if (idList_.Count > 0) {
        output.WriteInt32Array(2, field_names[3], idList_);
      }
      if (hasRace) {
        output.WriteInt32(3, field_names[5], Race);
      }
      if (hasCivId) {
        output.WriteInt32(4, field_names[1], CivId);
      }
      if (hasScanAll) {
        output.WriteBool(5, field_names[7], ScanAll);
      }
      if (hasDead) {
        output.WriteBool(6, field_names[2], Dead);
      }
      if (hasAlive) {
        output.WriteBool(7, field_names[0], Alive);
      }
      if (hasSane) {
        output.WriteBool(8, field_names[6], Sane);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasMask) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, Mask);
        }
        {
          int dataSize = 0;
          foreach (int element in IdListList) {
            dataSize += pb::CodedOutputStream.ComputeInt32SizeNoTag(element);
          }
          size += dataSize;
          size += 1 * idList_.Count;
        }
        if (hasScanAll) {
          size += pb::CodedOutputStream.ComputeBoolSize(5, ScanAll);
        }
        if (hasRace) {
          size += pb::CodedOutputStream.ComputeInt32Size(3, Race);
        }
        if (hasCivId) {
          size += pb::CodedOutputStream.ComputeInt32Size(4, CivId);
        }
        if (hasDead) {
          size += pb::CodedOutputStream.ComputeBoolSize(6, Dead);
        }
        if (hasAlive) {
          size += pb::CodedOutputStream.ComputeBoolSize(7, Alive);
        }
        if (hasSane) {
          size += pb::CodedOutputStream.ComputeBoolSize(8, Sane);
        }
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasMask) hash ^= mask_.GetHashCode();
      foreach(int i in idList_)
        hash ^= i.GetHashCode();
      if (hasScanAll) hash ^= scanAll_.GetHashCode();
      if (hasRace) hash ^= race_.GetHashCode();
      if (hasCivId) hash ^= civId_.GetHashCode();
      if (hasDead) hash ^= dead_.GetHashCode();
      if (hasAlive) hash ^= alive_.GetHashCode();
      if (hasSane) hash ^= sane_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      ListUnitsIn other = obj as ListUnitsIn;
      if (other == null) return false;
      if (hasMask != other.hasMask || (hasMask && !mask_.Equals(other.mask_))) return false;
      if(idList_.Count != other.idList_.Count) return false;
      for(int ix=0; ix < idList_.Count; ix++)
        if(!idList_[ix].Equals(other.idList_[ix])) return false;
      if (hasScanAll != other.hasScanAll || (hasScanAll && !scanAll_.Equals(other.scanAll_))) return false;
      if (hasRace != other.hasRace || (hasRace && !race_.Equals(other.race_))) return false;
      if (hasCivId != other.hasCivId || (hasCivId && !civId_.Equals(other.civId_))) return false;
      if (hasDead != other.hasDead || (hasDead && !dead_.Equals(other.dead_))) return false;
      if (hasAlive != other.hasAlive || (hasAlive && !alive_.Equals(other.alive_))) return false;
      if (hasSane != other.hasSane || (hasSane && !sane_.Equals(other.sane_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("mask", hasMask, mask_, writer);
      PrintField("id_list", idList_, writer);
      PrintField("race", hasRace, race_, writer);
      PrintField("civ_id", hasCivId, civId_, writer);
      PrintField("scan_all", hasScanAll, scanAll_, writer);
      PrintField("dead", hasDead, dead_, writer);
      PrintField("alive", hasAlive, alive_, writer);
      PrintField("sane", hasSane, sane_, writer);
    }
    #endregion
    
    public static ListUnitsIn ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ListUnitsIn ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ListUnitsIn ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ListUnitsIn ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ListUnitsIn ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ListUnitsIn ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ListUnitsIn ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ListUnitsIn ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ListUnitsIn ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ListUnitsIn ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ListUnitsIn MakeReadOnly() {
      idList_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ListUnitsIn prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilderLite<ListUnitsIn, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ListUnitsIn cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private ListUnitsIn result;
      
      private ListUnitsIn PrepareBuilder() {
        if (resultIsReadOnly) {
          ListUnitsIn original = result;
          result = new ListUnitsIn();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override ListUnitsIn MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override ListUnitsIn DefaultInstanceForType {
        get { return global::dfproto.ListUnitsIn.DefaultInstance; }
      }
      
      public override ListUnitsIn BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is ListUnitsIn) {
          return MergeFrom((ListUnitsIn) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ListUnitsIn other) {
        if (other == global::dfproto.ListUnitsIn.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasMask) {
          MergeMask(other.Mask);
        }
        if (other.idList_.Count != 0) {
          result.idList_.Add(other.idList_);
        }
        if (other.HasScanAll) {
          ScanAll = other.ScanAll;
        }
        if (other.HasRace) {
          Race = other.Race;
        }
        if (other.HasCivId) {
          CivId = other.CivId;
        }
        if (other.HasDead) {
          Dead = other.Dead;
        }
        if (other.HasAlive) {
          Alive = other.Alive;
        }
        if (other.HasSane) {
          Sane = other.Sane;
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_listUnitsInFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _listUnitsInFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::dfproto.BasicUnitInfoMask.Builder subBuilder = global::dfproto.BasicUnitInfoMask.CreateBuilder();
              if (result.hasMask) {
                subBuilder.MergeFrom(Mask);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Mask = subBuilder.BuildPartial();
              break;
            }
            case 18:
            case 16: {
              input.ReadInt32Array(tag, field_name, result.idList_);
              break;
            }
            case 24: {
              result.hasRace = input.ReadInt32(ref result.race_);
              break;
            }
            case 32: {
              result.hasCivId = input.ReadInt32(ref result.civId_);
              break;
            }
            case 40: {
              result.hasScanAll = input.ReadBool(ref result.scanAll_);
              break;
            }
            case 48: {
              result.hasDead = input.ReadBool(ref result.dead_);
              break;
            }
            case 56: {
              result.hasAlive = input.ReadBool(ref result.alive_);
              break;
            }
            case 64: {
              result.hasSane = input.ReadBool(ref result.sane_);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasMask {
       get { return result.hasMask; }
      }
      public global::dfproto.BasicUnitInfoMask Mask {
        get { return result.Mask; }
        set { SetMask(value); }
      }
      public Builder SetMask(global::dfproto.BasicUnitInfoMask value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasMask = true;
        result.mask_ = value;
        return this;
      }
      public Builder SetMask(global::dfproto.BasicUnitInfoMask.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasMask = true;
        result.mask_ = builderForValue.Build();
        return this;
      }
      public Builder MergeMask(global::dfproto.BasicUnitInfoMask value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasMask &&
            result.mask_ != global::dfproto.BasicUnitInfoMask.DefaultInstance) {
            result.mask_ = global::dfproto.BasicUnitInfoMask.CreateBuilder(result.mask_).MergeFrom(value).BuildPartial();
        } else {
          result.mask_ = value;
        }
        result.hasMask = true;
        return this;
      }
      public Builder ClearMask() {
        PrepareBuilder();
        result.hasMask = false;
        result.mask_ = null;
        return this;
      }
      
      public pbc::IPopsicleList<int> IdListList {
        get { return PrepareBuilder().idList_; }
      }
      public int IdListCount {
        get { return result.IdListCount; }
      }
      public int GetIdList(int index) {
        return result.GetIdList(index);
      }
      public Builder SetIdList(int index, int value) {
        PrepareBuilder();
        result.idList_[index] = value;
        return this;
      }
      public Builder AddIdList(int value) {
        PrepareBuilder();
        result.idList_.Add(value);
        return this;
      }
      public Builder AddRangeIdList(scg::IEnumerable<int> values) {
        PrepareBuilder();
        result.idList_.Add(values);
        return this;
      }
      public Builder ClearIdList() {
        PrepareBuilder();
        result.idList_.Clear();
        return this;
      }
      
      public bool HasScanAll {
        get { return result.hasScanAll; }
      }
      public bool ScanAll {
        get { return result.ScanAll; }
        set { SetScanAll(value); }
      }
      public Builder SetScanAll(bool value) {
        PrepareBuilder();
        result.hasScanAll = true;
        result.scanAll_ = value;
        return this;
      }
      public Builder ClearScanAll() {
        PrepareBuilder();
        result.hasScanAll = false;
        result.scanAll_ = false;
        return this;
      }
      
      public bool HasRace {
        get { return result.hasRace; }
      }
      public int Race {
        get { return result.Race; }
        set { SetRace(value); }
      }
      public Builder SetRace(int value) {
        PrepareBuilder();
        result.hasRace = true;
        result.race_ = value;
        return this;
      }
      public Builder ClearRace() {
        PrepareBuilder();
        result.hasRace = false;
        result.race_ = 0;
        return this;
      }
      
      public bool HasCivId {
        get { return result.hasCivId; }
      }
      public int CivId {
        get { return result.CivId; }
        set { SetCivId(value); }
      }
      public Builder SetCivId(int value) {
        PrepareBuilder();
        result.hasCivId = true;
        result.civId_ = value;
        return this;
      }
      public Builder ClearCivId() {
        PrepareBuilder();
        result.hasCivId = false;
        result.civId_ = 0;
        return this;
      }
      
      public bool HasDead {
        get { return result.hasDead; }
      }
      public bool Dead {
        get { return result.Dead; }
        set { SetDead(value); }
      }
      public Builder SetDead(bool value) {
        PrepareBuilder();
        result.hasDead = true;
        result.dead_ = value;
        return this;
      }
      public Builder ClearDead() {
        PrepareBuilder();
        result.hasDead = false;
        result.dead_ = false;
        return this;
      }
      
      public bool HasAlive {
        get { return result.hasAlive; }
      }
      public bool Alive {
        get { return result.Alive; }
        set { SetAlive(value); }
      }
      public Builder SetAlive(bool value) {
        PrepareBuilder();
        result.hasAlive = true;
        result.alive_ = value;
        return this;
      }
      public Builder ClearAlive() {
        PrepareBuilder();
        result.hasAlive = false;
        result.alive_ = false;
        return this;
      }
      
      public bool HasSane {
        get { return result.hasSane; }
      }
      public bool Sane {
        get { return result.Sane; }
        set { SetSane(value); }
      }
      public Builder SetSane(bool value) {
        PrepareBuilder();
        result.hasSane = true;
        result.sane_ = value;
        return this;
      }
      public Builder ClearSane() {
        PrepareBuilder();
        result.hasSane = false;
        result.sane_ = false;
        return this;
      }
    }
    static ListUnitsIn() {
      object.ReferenceEquals(global::dfproto.BasicApi.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class ListUnitsOut : pb::GeneratedMessageLite<ListUnitsOut, ListUnitsOut.Builder> {
    private ListUnitsOut() { }
    private static readonly ListUnitsOut defaultInstance = new ListUnitsOut().MakeReadOnly();
    private static readonly string[] _listUnitsOutFieldNames = new string[] { "value" };
    private static readonly uint[] _listUnitsOutFieldTags = new uint[] { 10 };
    public static ListUnitsOut DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ListUnitsOut DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override ListUnitsOut ThisMessage {
      get { return this; }
    }
    
    public const int ValueFieldNumber = 1;
    private pbc::PopsicleList<global::dfproto.BasicUnitInfo> value_ = new pbc::PopsicleList<global::dfproto.BasicUnitInfo>();
    public scg::IList<global::dfproto.BasicUnitInfo> ValueList {
      get { return value_; }
    }
    public int ValueCount {
      get { return value_.Count; }
    }
    public global::dfproto.BasicUnitInfo GetValue(int index) {
      return value_[index];
    }
    
    public override bool IsInitialized {
      get {
        foreach (global::dfproto.BasicUnitInfo element in ValueList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _listUnitsOutFieldNames;
      if (value_.Count > 0) {
        output.WriteMessageArray(1, field_names[0], value_);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        foreach (global::dfproto.BasicUnitInfo element in ValueList) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, element);
        }
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      foreach(global::dfproto.BasicUnitInfo i in value_)
        hash ^= i.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      ListUnitsOut other = obj as ListUnitsOut;
      if (other == null) return false;
      if(value_.Count != other.value_.Count) return false;
      for(int ix=0; ix < value_.Count; ix++)
        if(!value_[ix].Equals(other.value_[ix])) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("value", value_, writer);
    }
    #endregion
    
    public static ListUnitsOut ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ListUnitsOut ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ListUnitsOut ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ListUnitsOut ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ListUnitsOut ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ListUnitsOut ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ListUnitsOut ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ListUnitsOut ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ListUnitsOut ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ListUnitsOut ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ListUnitsOut MakeReadOnly() {
      value_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ListUnitsOut prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilderLite<ListUnitsOut, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ListUnitsOut cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private ListUnitsOut result;
      
      private ListUnitsOut PrepareBuilder() {
        if (resultIsReadOnly) {
          ListUnitsOut original = result;
          result = new ListUnitsOut();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override ListUnitsOut MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override ListUnitsOut DefaultInstanceForType {
        get { return global::dfproto.ListUnitsOut.DefaultInstance; }
      }
      
      public override ListUnitsOut BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is ListUnitsOut) {
          return MergeFrom((ListUnitsOut) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ListUnitsOut other) {
        if (other == global::dfproto.ListUnitsOut.DefaultInstance) return this;
        PrepareBuilder();
        if (other.value_.Count != 0) {
          result.value_.Add(other.value_);
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_listUnitsOutFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _listUnitsOutFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              input.ReadMessageArray(tag, field_name, result.value_, global::dfproto.BasicUnitInfo.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public pbc::IPopsicleList<global::dfproto.BasicUnitInfo> ValueList {
        get { return PrepareBuilder().value_; }
      }
      public int ValueCount {
        get { return result.ValueCount; }
      }
      public global::dfproto.BasicUnitInfo GetValue(int index) {
        return result.GetValue(index);
      }
      public Builder SetValue(int index, global::dfproto.BasicUnitInfo value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.value_[index] = value;
        return this;
      }
      public Builder SetValue(int index, global::dfproto.BasicUnitInfo.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.value_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddValue(global::dfproto.BasicUnitInfo value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.value_.Add(value);
        return this;
      }
      public Builder AddValue(global::dfproto.BasicUnitInfo.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.value_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeValue(scg::IEnumerable<global::dfproto.BasicUnitInfo> values) {
        PrepareBuilder();
        result.value_.Add(values);
        return this;
      }
      public Builder ClearValue() {
        PrepareBuilder();
        result.value_.Clear();
        return this;
      }
    }
    static ListUnitsOut() {
      object.ReferenceEquals(global::dfproto.BasicApi.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class ListSquadsIn : pb::GeneratedMessageLite<ListSquadsIn, ListSquadsIn.Builder> {
    private ListSquadsIn() { }
    private static readonly ListSquadsIn defaultInstance = new ListSquadsIn().MakeReadOnly();
    private static readonly string[] _listSquadsInFieldNames = new string[] {  };
    private static readonly uint[] _listSquadsInFieldTags = new uint[] {  };
    public static ListSquadsIn DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ListSquadsIn DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override ListSquadsIn ThisMessage {
      get { return this; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _listSquadsInFieldNames;
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      ListSquadsIn other = obj as ListSquadsIn;
      if (other == null) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
    }
    #endregion
    
    public static ListSquadsIn ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ListSquadsIn ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ListSquadsIn ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ListSquadsIn ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ListSquadsIn ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ListSquadsIn ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ListSquadsIn ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ListSquadsIn ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ListSquadsIn ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ListSquadsIn ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ListSquadsIn MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ListSquadsIn prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilderLite<ListSquadsIn, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ListSquadsIn cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private ListSquadsIn result;
      
      private ListSquadsIn PrepareBuilder() {
        if (resultIsReadOnly) {
          ListSquadsIn original = result;
          result = new ListSquadsIn();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override ListSquadsIn MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override ListSquadsIn DefaultInstanceForType {
        get { return global::dfproto.ListSquadsIn.DefaultInstance; }
      }
      
      public override ListSquadsIn BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is ListSquadsIn) {
          return MergeFrom((ListSquadsIn) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ListSquadsIn other) {
        if (other == global::dfproto.ListSquadsIn.DefaultInstance) return this;
        PrepareBuilder();
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_listSquadsInFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _listSquadsInFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
          }
        }
        
        return this;
      }
      
    }
    static ListSquadsIn() {
      object.ReferenceEquals(global::dfproto.BasicApi.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class ListSquadsOut : pb::GeneratedMessageLite<ListSquadsOut, ListSquadsOut.Builder> {
    private ListSquadsOut() { }
    private static readonly ListSquadsOut defaultInstance = new ListSquadsOut().MakeReadOnly();
    private static readonly string[] _listSquadsOutFieldNames = new string[] { "value" };
    private static readonly uint[] _listSquadsOutFieldTags = new uint[] { 10 };
    public static ListSquadsOut DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ListSquadsOut DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override ListSquadsOut ThisMessage {
      get { return this; }
    }
    
    public const int ValueFieldNumber = 1;
    private pbc::PopsicleList<global::dfproto.BasicSquadInfo> value_ = new pbc::PopsicleList<global::dfproto.BasicSquadInfo>();
    public scg::IList<global::dfproto.BasicSquadInfo> ValueList {
      get { return value_; }
    }
    public int ValueCount {
      get { return value_.Count; }
    }
    public global::dfproto.BasicSquadInfo GetValue(int index) {
      return value_[index];
    }
    
    public override bool IsInitialized {
      get {
        foreach (global::dfproto.BasicSquadInfo element in ValueList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _listSquadsOutFieldNames;
      if (value_.Count > 0) {
        output.WriteMessageArray(1, field_names[0], value_);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        foreach (global::dfproto.BasicSquadInfo element in ValueList) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, element);
        }
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      foreach(global::dfproto.BasicSquadInfo i in value_)
        hash ^= i.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      ListSquadsOut other = obj as ListSquadsOut;
      if (other == null) return false;
      if(value_.Count != other.value_.Count) return false;
      for(int ix=0; ix < value_.Count; ix++)
        if(!value_[ix].Equals(other.value_[ix])) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("value", value_, writer);
    }
    #endregion
    
    public static ListSquadsOut ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ListSquadsOut ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ListSquadsOut ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ListSquadsOut ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ListSquadsOut ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ListSquadsOut ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ListSquadsOut ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ListSquadsOut ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ListSquadsOut ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ListSquadsOut ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ListSquadsOut MakeReadOnly() {
      value_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ListSquadsOut prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilderLite<ListSquadsOut, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ListSquadsOut cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private ListSquadsOut result;
      
      private ListSquadsOut PrepareBuilder() {
        if (resultIsReadOnly) {
          ListSquadsOut original = result;
          result = new ListSquadsOut();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override ListSquadsOut MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override ListSquadsOut DefaultInstanceForType {
        get { return global::dfproto.ListSquadsOut.DefaultInstance; }
      }
      
      public override ListSquadsOut BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is ListSquadsOut) {
          return MergeFrom((ListSquadsOut) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ListSquadsOut other) {
        if (other == global::dfproto.ListSquadsOut.DefaultInstance) return this;
        PrepareBuilder();
        if (other.value_.Count != 0) {
          result.value_.Add(other.value_);
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_listSquadsOutFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _listSquadsOutFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              input.ReadMessageArray(tag, field_name, result.value_, global::dfproto.BasicSquadInfo.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public pbc::IPopsicleList<global::dfproto.BasicSquadInfo> ValueList {
        get { return PrepareBuilder().value_; }
      }
      public int ValueCount {
        get { return result.ValueCount; }
      }
      public global::dfproto.BasicSquadInfo GetValue(int index) {
        return result.GetValue(index);
      }
      public Builder SetValue(int index, global::dfproto.BasicSquadInfo value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.value_[index] = value;
        return this;
      }
      public Builder SetValue(int index, global::dfproto.BasicSquadInfo.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.value_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddValue(global::dfproto.BasicSquadInfo value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.value_.Add(value);
        return this;
      }
      public Builder AddValue(global::dfproto.BasicSquadInfo.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.value_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeValue(scg::IEnumerable<global::dfproto.BasicSquadInfo> values) {
        PrepareBuilder();
        result.value_.Add(values);
        return this;
      }
      public Builder ClearValue() {
        PrepareBuilder();
        result.value_.Clear();
        return this;
      }
    }
    static ListSquadsOut() {
      object.ReferenceEquals(global::dfproto.BasicApi.Descriptor, null);
    }
  }
  
  #endregion
  
}

#endregion Designer generated code
