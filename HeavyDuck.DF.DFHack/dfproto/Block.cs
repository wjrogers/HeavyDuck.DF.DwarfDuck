// Generated by ProtoGen, Version=2.4.1.473, Culture=neutral, PublicKeyToken=55f7125234beb589.  DO NOT EDIT!
#pragma warning disable 1591, 0612
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace dfproto {
  
  namespace Proto {
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public static partial class Block {
    
      #region Extension registration
      public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
      }
      #endregion
      #region Static variables
      #endregion
      #region Extensions
      internal static readonly object Descriptor;
      static Block() {
        Descriptor = null;
      }
      #endregion
      
    }
  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class Block : pb::GeneratedMessageLite<Block, Block.Builder> {
    private Block() { }
    private static readonly Block defaultInstance = new Block().MakeReadOnly();
    private static readonly string[] _blockFieldNames = new string[] { "plant", "tile", "x", "y", "z" };
    private static readonly uint[] _blockFieldTags = new uint[] { 42, 34, 8, 16, 24 };
    public static Block DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Block DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Block ThisMessage {
      get { return this; }
    }
    
    public const int XFieldNumber = 1;
    private bool hasX;
    private uint x_;
    public bool HasX {
      get { return hasX; }
    }
    [global::System.CLSCompliant(false)]
    public uint X {
      get { return x_; }
    }
    
    public const int YFieldNumber = 2;
    private bool hasY;
    private uint y_;
    public bool HasY {
      get { return hasY; }
    }
    [global::System.CLSCompliant(false)]
    public uint Y {
      get { return y_; }
    }
    
    public const int ZFieldNumber = 3;
    private bool hasZ;
    private uint z_;
    public bool HasZ {
      get { return hasZ; }
    }
    [global::System.CLSCompliant(false)]
    public uint Z {
      get { return z_; }
    }
    
    public const int TileFieldNumber = 4;
    private pbc::PopsicleList<global::dfproto.Tile> tile_ = new pbc::PopsicleList<global::dfproto.Tile>();
    public scg::IList<global::dfproto.Tile> TileList {
      get { return tile_; }
    }
    public int TileCount {
      get { return tile_.Count; }
    }
    public global::dfproto.Tile GetTile(int index) {
      return tile_[index];
    }
    
    public const int PlantFieldNumber = 5;
    private pbc::PopsicleList<global::dfproto.Plant> plant_ = new pbc::PopsicleList<global::dfproto.Plant>();
    public scg::IList<global::dfproto.Plant> PlantList {
      get { return plant_; }
    }
    public int PlantCount {
      get { return plant_.Count; }
    }
    public global::dfproto.Plant GetPlant(int index) {
      return plant_[index];
    }
    
    public override bool IsInitialized {
      get {
        if (!hasX) return false;
        if (!hasY) return false;
        if (!hasZ) return false;
        foreach (global::dfproto.Tile element in TileList) {
          if (!element.IsInitialized) return false;
        }
        foreach (global::dfproto.Plant element in PlantList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _blockFieldNames;
      if (hasX) {
        output.WriteUInt32(1, field_names[2], X);
      }
      if (hasY) {
        output.WriteUInt32(2, field_names[3], Y);
      }
      if (hasZ) {
        output.WriteUInt32(3, field_names[4], Z);
      }
      if (tile_.Count > 0) {
        output.WriteMessageArray(4, field_names[1], tile_);
      }
      if (plant_.Count > 0) {
        output.WriteMessageArray(5, field_names[0], plant_);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasX) {
          size += pb::CodedOutputStream.ComputeUInt32Size(1, X);
        }
        if (hasY) {
          size += pb::CodedOutputStream.ComputeUInt32Size(2, Y);
        }
        if (hasZ) {
          size += pb::CodedOutputStream.ComputeUInt32Size(3, Z);
        }
        foreach (global::dfproto.Tile element in TileList) {
          size += pb::CodedOutputStream.ComputeMessageSize(4, element);
        }
        foreach (global::dfproto.Plant element in PlantList) {
          size += pb::CodedOutputStream.ComputeMessageSize(5, element);
        }
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasX) hash ^= x_.GetHashCode();
      if (hasY) hash ^= y_.GetHashCode();
      if (hasZ) hash ^= z_.GetHashCode();
      foreach(global::dfproto.Tile i in tile_)
        hash ^= i.GetHashCode();
      foreach(global::dfproto.Plant i in plant_)
        hash ^= i.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      Block other = obj as Block;
      if (other == null) return false;
      if (hasX != other.hasX || (hasX && !x_.Equals(other.x_))) return false;
      if (hasY != other.hasY || (hasY && !y_.Equals(other.y_))) return false;
      if (hasZ != other.hasZ || (hasZ && !z_.Equals(other.z_))) return false;
      if(tile_.Count != other.tile_.Count) return false;
      for(int ix=0; ix < tile_.Count; ix++)
        if(!tile_[ix].Equals(other.tile_[ix])) return false;
      if(plant_.Count != other.plant_.Count) return false;
      for(int ix=0; ix < plant_.Count; ix++)
        if(!plant_[ix].Equals(other.plant_[ix])) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("x", hasX, x_, writer);
      PrintField("y", hasY, y_, writer);
      PrintField("z", hasZ, z_, writer);
      PrintField("tile", tile_, writer);
      PrintField("plant", plant_, writer);
    }
    #endregion
    
    public static Block ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Block ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Block ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Block ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Block ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Block ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Block ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Block ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Block ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Block ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Block MakeReadOnly() {
      tile_.MakeReadOnly();
      plant_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Block prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilderLite<Block, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Block cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Block result;
      
      private Block PrepareBuilder() {
        if (resultIsReadOnly) {
          Block original = result;
          result = new Block();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Block MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override Block DefaultInstanceForType {
        get { return global::dfproto.Block.DefaultInstance; }
      }
      
      public override Block BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is Block) {
          return MergeFrom((Block) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Block other) {
        if (other == global::dfproto.Block.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasX) {
          X = other.X;
        }
        if (other.HasY) {
          Y = other.Y;
        }
        if (other.HasZ) {
          Z = other.Z;
        }
        if (other.tile_.Count != 0) {
          result.tile_.Add(other.tile_);
        }
        if (other.plant_.Count != 0) {
          result.plant_.Add(other.plant_);
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_blockFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _blockFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasX = input.ReadUInt32(ref result.x_);
              break;
            }
            case 16: {
              result.hasY = input.ReadUInt32(ref result.y_);
              break;
            }
            case 24: {
              result.hasZ = input.ReadUInt32(ref result.z_);
              break;
            }
            case 34: {
              input.ReadMessageArray(tag, field_name, result.tile_, global::dfproto.Tile.DefaultInstance, extensionRegistry);
              break;
            }
            case 42: {
              input.ReadMessageArray(tag, field_name, result.plant_, global::dfproto.Plant.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasX {
        get { return result.hasX; }
      }
      [global::System.CLSCompliant(false)]
      public uint X {
        get { return result.X; }
        set { SetX(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetX(uint value) {
        PrepareBuilder();
        result.hasX = true;
        result.x_ = value;
        return this;
      }
      public Builder ClearX() {
        PrepareBuilder();
        result.hasX = false;
        result.x_ = 0;
        return this;
      }
      
      public bool HasY {
        get { return result.hasY; }
      }
      [global::System.CLSCompliant(false)]
      public uint Y {
        get { return result.Y; }
        set { SetY(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetY(uint value) {
        PrepareBuilder();
        result.hasY = true;
        result.y_ = value;
        return this;
      }
      public Builder ClearY() {
        PrepareBuilder();
        result.hasY = false;
        result.y_ = 0;
        return this;
      }
      
      public bool HasZ {
        get { return result.hasZ; }
      }
      [global::System.CLSCompliant(false)]
      public uint Z {
        get { return result.Z; }
        set { SetZ(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetZ(uint value) {
        PrepareBuilder();
        result.hasZ = true;
        result.z_ = value;
        return this;
      }
      public Builder ClearZ() {
        PrepareBuilder();
        result.hasZ = false;
        result.z_ = 0;
        return this;
      }
      
      public pbc::IPopsicleList<global::dfproto.Tile> TileList {
        get { return PrepareBuilder().tile_; }
      }
      public int TileCount {
        get { return result.TileCount; }
      }
      public global::dfproto.Tile GetTile(int index) {
        return result.GetTile(index);
      }
      public Builder SetTile(int index, global::dfproto.Tile value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.tile_[index] = value;
        return this;
      }
      public Builder SetTile(int index, global::dfproto.Tile.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.tile_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddTile(global::dfproto.Tile value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.tile_.Add(value);
        return this;
      }
      public Builder AddTile(global::dfproto.Tile.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.tile_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeTile(scg::IEnumerable<global::dfproto.Tile> values) {
        PrepareBuilder();
        result.tile_.Add(values);
        return this;
      }
      public Builder ClearTile() {
        PrepareBuilder();
        result.tile_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<global::dfproto.Plant> PlantList {
        get { return PrepareBuilder().plant_; }
      }
      public int PlantCount {
        get { return result.PlantCount; }
      }
      public global::dfproto.Plant GetPlant(int index) {
        return result.GetPlant(index);
      }
      public Builder SetPlant(int index, global::dfproto.Plant value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.plant_[index] = value;
        return this;
      }
      public Builder SetPlant(int index, global::dfproto.Plant.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.plant_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddPlant(global::dfproto.Plant value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.plant_.Add(value);
        return this;
      }
      public Builder AddPlant(global::dfproto.Plant.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.plant_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangePlant(scg::IEnumerable<global::dfproto.Plant> values) {
        PrepareBuilder();
        result.plant_.Add(values);
        return this;
      }
      public Builder ClearPlant() {
        PrepareBuilder();
        result.plant_.Clear();
        return this;
      }
    }
    static Block() {
      object.ReferenceEquals(global::dfproto.Proto.Block.Descriptor, null);
    }
  }
  
  #endregion
  
}

#endregion Designer generated code
