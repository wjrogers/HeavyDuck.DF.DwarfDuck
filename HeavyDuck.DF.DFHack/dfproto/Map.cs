// Generated by ProtoGen, Version=2.4.1.473, Culture=neutral, PublicKeyToken=55f7125234beb589.  DO NOT EDIT!
#pragma warning disable 1591, 0612
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace dfproto {
  
  namespace Proto {
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public static partial class Map {
    
      #region Extension registration
      public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
      }
      #endregion
      #region Static variables
      #endregion
      #region Extensions
      internal static readonly object Descriptor;
      static Map() {
        Descriptor = null;
      }
      #endregion
      
    }
  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class Map : pb::GeneratedMessageLite<Map, Map.Builder> {
    private Map() { }
    private static readonly Map defaultInstance = new Map().MakeReadOnly();
    private static readonly string[] _mapFieldNames = new string[] { "inorganic_material", "organic_material", "x_size", "y_size", "z_size" };
    private static readonly uint[] _mapFieldTags = new uint[] { 34, 42, 8, 16, 24 };
    public static Map DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Map DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Map ThisMessage {
      get { return this; }
    }
    
    public const int XSizeFieldNumber = 1;
    private bool hasXSize;
    private uint xSize_;
    public bool HasXSize {
      get { return hasXSize; }
    }
    [global::System.CLSCompliant(false)]
    public uint XSize {
      get { return xSize_; }
    }
    
    public const int YSizeFieldNumber = 2;
    private bool hasYSize;
    private uint ySize_;
    public bool HasYSize {
      get { return hasYSize; }
    }
    [global::System.CLSCompliant(false)]
    public uint YSize {
      get { return ySize_; }
    }
    
    public const int ZSizeFieldNumber = 3;
    private bool hasZSize;
    private uint zSize_;
    public bool HasZSize {
      get { return hasZSize; }
    }
    [global::System.CLSCompliant(false)]
    public uint ZSize {
      get { return zSize_; }
    }
    
    public const int InorganicMaterialFieldNumber = 4;
    private pbc::PopsicleList<global::dfproto.Material> inorganicMaterial_ = new pbc::PopsicleList<global::dfproto.Material>();
    public scg::IList<global::dfproto.Material> InorganicMaterialList {
      get { return inorganicMaterial_; }
    }
    public int InorganicMaterialCount {
      get { return inorganicMaterial_.Count; }
    }
    public global::dfproto.Material GetInorganicMaterial(int index) {
      return inorganicMaterial_[index];
    }
    
    public const int OrganicMaterialFieldNumber = 5;
    private pbc::PopsicleList<global::dfproto.Material> organicMaterial_ = new pbc::PopsicleList<global::dfproto.Material>();
    public scg::IList<global::dfproto.Material> OrganicMaterialList {
      get { return organicMaterial_; }
    }
    public int OrganicMaterialCount {
      get { return organicMaterial_.Count; }
    }
    public global::dfproto.Material GetOrganicMaterial(int index) {
      return organicMaterial_[index];
    }
    
    public override bool IsInitialized {
      get {
        if (!hasXSize) return false;
        if (!hasYSize) return false;
        if (!hasZSize) return false;
        foreach (global::dfproto.Material element in InorganicMaterialList) {
          if (!element.IsInitialized) return false;
        }
        foreach (global::dfproto.Material element in OrganicMaterialList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _mapFieldNames;
      if (hasXSize) {
        output.WriteUInt32(1, field_names[2], XSize);
      }
      if (hasYSize) {
        output.WriteUInt32(2, field_names[3], YSize);
      }
      if (hasZSize) {
        output.WriteUInt32(3, field_names[4], ZSize);
      }
      if (inorganicMaterial_.Count > 0) {
        output.WriteMessageArray(4, field_names[0], inorganicMaterial_);
      }
      if (organicMaterial_.Count > 0) {
        output.WriteMessageArray(5, field_names[1], organicMaterial_);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasXSize) {
          size += pb::CodedOutputStream.ComputeUInt32Size(1, XSize);
        }
        if (hasYSize) {
          size += pb::CodedOutputStream.ComputeUInt32Size(2, YSize);
        }
        if (hasZSize) {
          size += pb::CodedOutputStream.ComputeUInt32Size(3, ZSize);
        }
        foreach (global::dfproto.Material element in InorganicMaterialList) {
          size += pb::CodedOutputStream.ComputeMessageSize(4, element);
        }
        foreach (global::dfproto.Material element in OrganicMaterialList) {
          size += pb::CodedOutputStream.ComputeMessageSize(5, element);
        }
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasXSize) hash ^= xSize_.GetHashCode();
      if (hasYSize) hash ^= ySize_.GetHashCode();
      if (hasZSize) hash ^= zSize_.GetHashCode();
      foreach(global::dfproto.Material i in inorganicMaterial_)
        hash ^= i.GetHashCode();
      foreach(global::dfproto.Material i in organicMaterial_)
        hash ^= i.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      Map other = obj as Map;
      if (other == null) return false;
      if (hasXSize != other.hasXSize || (hasXSize && !xSize_.Equals(other.xSize_))) return false;
      if (hasYSize != other.hasYSize || (hasYSize && !ySize_.Equals(other.ySize_))) return false;
      if (hasZSize != other.hasZSize || (hasZSize && !zSize_.Equals(other.zSize_))) return false;
      if(inorganicMaterial_.Count != other.inorganicMaterial_.Count) return false;
      for(int ix=0; ix < inorganicMaterial_.Count; ix++)
        if(!inorganicMaterial_[ix].Equals(other.inorganicMaterial_[ix])) return false;
      if(organicMaterial_.Count != other.organicMaterial_.Count) return false;
      for(int ix=0; ix < organicMaterial_.Count; ix++)
        if(!organicMaterial_[ix].Equals(other.organicMaterial_[ix])) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("x_size", hasXSize, xSize_, writer);
      PrintField("y_size", hasYSize, ySize_, writer);
      PrintField("z_size", hasZSize, zSize_, writer);
      PrintField("inorganic_material", inorganicMaterial_, writer);
      PrintField("organic_material", organicMaterial_, writer);
    }
    #endregion
    
    public static Map ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Map ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Map ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Map ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Map ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Map ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Map ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Map ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Map ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Map ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Map MakeReadOnly() {
      inorganicMaterial_.MakeReadOnly();
      organicMaterial_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Map prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilderLite<Map, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Map cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Map result;
      
      private Map PrepareBuilder() {
        if (resultIsReadOnly) {
          Map original = result;
          result = new Map();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Map MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override Map DefaultInstanceForType {
        get { return global::dfproto.Map.DefaultInstance; }
      }
      
      public override Map BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is Map) {
          return MergeFrom((Map) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Map other) {
        if (other == global::dfproto.Map.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasXSize) {
          XSize = other.XSize;
        }
        if (other.HasYSize) {
          YSize = other.YSize;
        }
        if (other.HasZSize) {
          ZSize = other.ZSize;
        }
        if (other.inorganicMaterial_.Count != 0) {
          result.inorganicMaterial_.Add(other.inorganicMaterial_);
        }
        if (other.organicMaterial_.Count != 0) {
          result.organicMaterial_.Add(other.organicMaterial_);
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_mapFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _mapFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasXSize = input.ReadUInt32(ref result.xSize_);
              break;
            }
            case 16: {
              result.hasYSize = input.ReadUInt32(ref result.ySize_);
              break;
            }
            case 24: {
              result.hasZSize = input.ReadUInt32(ref result.zSize_);
              break;
            }
            case 34: {
              input.ReadMessageArray(tag, field_name, result.inorganicMaterial_, global::dfproto.Material.DefaultInstance, extensionRegistry);
              break;
            }
            case 42: {
              input.ReadMessageArray(tag, field_name, result.organicMaterial_, global::dfproto.Material.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasXSize {
        get { return result.hasXSize; }
      }
      [global::System.CLSCompliant(false)]
      public uint XSize {
        get { return result.XSize; }
        set { SetXSize(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetXSize(uint value) {
        PrepareBuilder();
        result.hasXSize = true;
        result.xSize_ = value;
        return this;
      }
      public Builder ClearXSize() {
        PrepareBuilder();
        result.hasXSize = false;
        result.xSize_ = 0;
        return this;
      }
      
      public bool HasYSize {
        get { return result.hasYSize; }
      }
      [global::System.CLSCompliant(false)]
      public uint YSize {
        get { return result.YSize; }
        set { SetYSize(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetYSize(uint value) {
        PrepareBuilder();
        result.hasYSize = true;
        result.ySize_ = value;
        return this;
      }
      public Builder ClearYSize() {
        PrepareBuilder();
        result.hasYSize = false;
        result.ySize_ = 0;
        return this;
      }
      
      public bool HasZSize {
        get { return result.hasZSize; }
      }
      [global::System.CLSCompliant(false)]
      public uint ZSize {
        get { return result.ZSize; }
        set { SetZSize(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetZSize(uint value) {
        PrepareBuilder();
        result.hasZSize = true;
        result.zSize_ = value;
        return this;
      }
      public Builder ClearZSize() {
        PrepareBuilder();
        result.hasZSize = false;
        result.zSize_ = 0;
        return this;
      }
      
      public pbc::IPopsicleList<global::dfproto.Material> InorganicMaterialList {
        get { return PrepareBuilder().inorganicMaterial_; }
      }
      public int InorganicMaterialCount {
        get { return result.InorganicMaterialCount; }
      }
      public global::dfproto.Material GetInorganicMaterial(int index) {
        return result.GetInorganicMaterial(index);
      }
      public Builder SetInorganicMaterial(int index, global::dfproto.Material value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.inorganicMaterial_[index] = value;
        return this;
      }
      public Builder SetInorganicMaterial(int index, global::dfproto.Material.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.inorganicMaterial_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddInorganicMaterial(global::dfproto.Material value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.inorganicMaterial_.Add(value);
        return this;
      }
      public Builder AddInorganicMaterial(global::dfproto.Material.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.inorganicMaterial_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeInorganicMaterial(scg::IEnumerable<global::dfproto.Material> values) {
        PrepareBuilder();
        result.inorganicMaterial_.Add(values);
        return this;
      }
      public Builder ClearInorganicMaterial() {
        PrepareBuilder();
        result.inorganicMaterial_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<global::dfproto.Material> OrganicMaterialList {
        get { return PrepareBuilder().organicMaterial_; }
      }
      public int OrganicMaterialCount {
        get { return result.OrganicMaterialCount; }
      }
      public global::dfproto.Material GetOrganicMaterial(int index) {
        return result.GetOrganicMaterial(index);
      }
      public Builder SetOrganicMaterial(int index, global::dfproto.Material value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.organicMaterial_[index] = value;
        return this;
      }
      public Builder SetOrganicMaterial(int index, global::dfproto.Material.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.organicMaterial_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddOrganicMaterial(global::dfproto.Material value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.organicMaterial_.Add(value);
        return this;
      }
      public Builder AddOrganicMaterial(global::dfproto.Material.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.organicMaterial_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeOrganicMaterial(scg::IEnumerable<global::dfproto.Material> values) {
        PrepareBuilder();
        result.organicMaterial_.Add(values);
        return this;
      }
      public Builder ClearOrganicMaterial() {
        PrepareBuilder();
        result.organicMaterial_.Clear();
        return this;
      }
    }
    static Map() {
      object.ReferenceEquals(global::dfproto.Proto.Map.Descriptor, null);
    }
  }
  
  #endregion
  
}

#endregion Designer generated code
