// Generated by ProtoGen, Version=2.4.1.473, Culture=neutral, PublicKeyToken=55f7125234beb589.  DO NOT EDIT!
#pragma warning disable 1591, 0612
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace dfproto {
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public static partial class Rename {
  
    #region Extension registration
    public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
    }
    #endregion
    #region Static variables
    #endregion
    #region Extensions
    internal static readonly object Descriptor;
    static Rename() {
      Descriptor = null;
    }
    #endregion
    
  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class RenameSquadIn : pb::GeneratedMessageLite<RenameSquadIn, RenameSquadIn.Builder> {
    private RenameSquadIn() { }
    private static readonly RenameSquadIn defaultInstance = new RenameSquadIn().MakeReadOnly();
    private static readonly string[] _renameSquadInFieldNames = new string[] { "alias", "nickname", "squad_id" };
    private static readonly uint[] _renameSquadInFieldTags = new uint[] { 26, 18, 8 };
    public static RenameSquadIn DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override RenameSquadIn DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override RenameSquadIn ThisMessage {
      get { return this; }
    }
    
    public const int SquadIdFieldNumber = 1;
    private bool hasSquadId;
    private int squadId_;
    public bool HasSquadId {
      get { return hasSquadId; }
    }
    public int SquadId {
      get { return squadId_; }
    }
    
    public const int NicknameFieldNumber = 2;
    private bool hasNickname;
    private string nickname_ = "";
    public bool HasNickname {
      get { return hasNickname; }
    }
    public string Nickname {
      get { return nickname_; }
    }
    
    public const int AliasFieldNumber = 3;
    private bool hasAlias;
    private string alias_ = "";
    public bool HasAlias {
      get { return hasAlias; }
    }
    public string Alias {
      get { return alias_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasSquadId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _renameSquadInFieldNames;
      if (hasSquadId) {
        output.WriteInt32(1, field_names[2], SquadId);
      }
      if (hasNickname) {
        output.WriteString(2, field_names[1], Nickname);
      }
      if (hasAlias) {
        output.WriteString(3, field_names[0], Alias);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasSquadId) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, SquadId);
        }
        if (hasNickname) {
          size += pb::CodedOutputStream.ComputeStringSize(2, Nickname);
        }
        if (hasAlias) {
          size += pb::CodedOutputStream.ComputeStringSize(3, Alias);
        }
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasSquadId) hash ^= squadId_.GetHashCode();
      if (hasNickname) hash ^= nickname_.GetHashCode();
      if (hasAlias) hash ^= alias_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      RenameSquadIn other = obj as RenameSquadIn;
      if (other == null) return false;
      if (hasSquadId != other.hasSquadId || (hasSquadId && !squadId_.Equals(other.squadId_))) return false;
      if (hasNickname != other.hasNickname || (hasNickname && !nickname_.Equals(other.nickname_))) return false;
      if (hasAlias != other.hasAlias || (hasAlias && !alias_.Equals(other.alias_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("squad_id", hasSquadId, squadId_, writer);
      PrintField("nickname", hasNickname, nickname_, writer);
      PrintField("alias", hasAlias, alias_, writer);
    }
    #endregion
    
    public static RenameSquadIn ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static RenameSquadIn ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static RenameSquadIn ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static RenameSquadIn ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static RenameSquadIn ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static RenameSquadIn ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static RenameSquadIn ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static RenameSquadIn ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static RenameSquadIn ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static RenameSquadIn ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private RenameSquadIn MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(RenameSquadIn prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilderLite<RenameSquadIn, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(RenameSquadIn cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private RenameSquadIn result;
      
      private RenameSquadIn PrepareBuilder() {
        if (resultIsReadOnly) {
          RenameSquadIn original = result;
          result = new RenameSquadIn();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override RenameSquadIn MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override RenameSquadIn DefaultInstanceForType {
        get { return global::dfproto.RenameSquadIn.DefaultInstance; }
      }
      
      public override RenameSquadIn BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is RenameSquadIn) {
          return MergeFrom((RenameSquadIn) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(RenameSquadIn other) {
        if (other == global::dfproto.RenameSquadIn.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasSquadId) {
          SquadId = other.SquadId;
        }
        if (other.HasNickname) {
          Nickname = other.Nickname;
        }
        if (other.HasAlias) {
          Alias = other.Alias;
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_renameSquadInFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _renameSquadInFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasSquadId = input.ReadInt32(ref result.squadId_);
              break;
            }
            case 18: {
              result.hasNickname = input.ReadString(ref result.nickname_);
              break;
            }
            case 26: {
              result.hasAlias = input.ReadString(ref result.alias_);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasSquadId {
        get { return result.hasSquadId; }
      }
      public int SquadId {
        get { return result.SquadId; }
        set { SetSquadId(value); }
      }
      public Builder SetSquadId(int value) {
        PrepareBuilder();
        result.hasSquadId = true;
        result.squadId_ = value;
        return this;
      }
      public Builder ClearSquadId() {
        PrepareBuilder();
        result.hasSquadId = false;
        result.squadId_ = 0;
        return this;
      }
      
      public bool HasNickname {
        get { return result.hasNickname; }
      }
      public string Nickname {
        get { return result.Nickname; }
        set { SetNickname(value); }
      }
      public Builder SetNickname(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasNickname = true;
        result.nickname_ = value;
        return this;
      }
      public Builder ClearNickname() {
        PrepareBuilder();
        result.hasNickname = false;
        result.nickname_ = "";
        return this;
      }
      
      public bool HasAlias {
        get { return result.hasAlias; }
      }
      public string Alias {
        get { return result.Alias; }
        set { SetAlias(value); }
      }
      public Builder SetAlias(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasAlias = true;
        result.alias_ = value;
        return this;
      }
      public Builder ClearAlias() {
        PrepareBuilder();
        result.hasAlias = false;
        result.alias_ = "";
        return this;
      }
    }
    static RenameSquadIn() {
      object.ReferenceEquals(global::dfproto.Rename.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class RenameUnitIn : pb::GeneratedMessageLite<RenameUnitIn, RenameUnitIn.Builder> {
    private RenameUnitIn() { }
    private static readonly RenameUnitIn defaultInstance = new RenameUnitIn().MakeReadOnly();
    private static readonly string[] _renameUnitInFieldNames = new string[] { "nickname", "profession", "unit_id" };
    private static readonly uint[] _renameUnitInFieldTags = new uint[] { 18, 26, 8 };
    public static RenameUnitIn DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override RenameUnitIn DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override RenameUnitIn ThisMessage {
      get { return this; }
    }
    
    public const int UnitIdFieldNumber = 1;
    private bool hasUnitId;
    private int unitId_;
    public bool HasUnitId {
      get { return hasUnitId; }
    }
    public int UnitId {
      get { return unitId_; }
    }
    
    public const int NicknameFieldNumber = 2;
    private bool hasNickname;
    private string nickname_ = "";
    public bool HasNickname {
      get { return hasNickname; }
    }
    public string Nickname {
      get { return nickname_; }
    }
    
    public const int ProfessionFieldNumber = 3;
    private bool hasProfession;
    private string profession_ = "";
    public bool HasProfession {
      get { return hasProfession; }
    }
    public string Profession {
      get { return profession_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasUnitId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _renameUnitInFieldNames;
      if (hasUnitId) {
        output.WriteInt32(1, field_names[2], UnitId);
      }
      if (hasNickname) {
        output.WriteString(2, field_names[0], Nickname);
      }
      if (hasProfession) {
        output.WriteString(3, field_names[1], Profession);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasUnitId) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, UnitId);
        }
        if (hasNickname) {
          size += pb::CodedOutputStream.ComputeStringSize(2, Nickname);
        }
        if (hasProfession) {
          size += pb::CodedOutputStream.ComputeStringSize(3, Profession);
        }
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasUnitId) hash ^= unitId_.GetHashCode();
      if (hasNickname) hash ^= nickname_.GetHashCode();
      if (hasProfession) hash ^= profession_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      RenameUnitIn other = obj as RenameUnitIn;
      if (other == null) return false;
      if (hasUnitId != other.hasUnitId || (hasUnitId && !unitId_.Equals(other.unitId_))) return false;
      if (hasNickname != other.hasNickname || (hasNickname && !nickname_.Equals(other.nickname_))) return false;
      if (hasProfession != other.hasProfession || (hasProfession && !profession_.Equals(other.profession_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("unit_id", hasUnitId, unitId_, writer);
      PrintField("nickname", hasNickname, nickname_, writer);
      PrintField("profession", hasProfession, profession_, writer);
    }
    #endregion
    
    public static RenameUnitIn ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static RenameUnitIn ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static RenameUnitIn ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static RenameUnitIn ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static RenameUnitIn ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static RenameUnitIn ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static RenameUnitIn ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static RenameUnitIn ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static RenameUnitIn ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static RenameUnitIn ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private RenameUnitIn MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(RenameUnitIn prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilderLite<RenameUnitIn, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(RenameUnitIn cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private RenameUnitIn result;
      
      private RenameUnitIn PrepareBuilder() {
        if (resultIsReadOnly) {
          RenameUnitIn original = result;
          result = new RenameUnitIn();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override RenameUnitIn MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override RenameUnitIn DefaultInstanceForType {
        get { return global::dfproto.RenameUnitIn.DefaultInstance; }
      }
      
      public override RenameUnitIn BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is RenameUnitIn) {
          return MergeFrom((RenameUnitIn) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(RenameUnitIn other) {
        if (other == global::dfproto.RenameUnitIn.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasUnitId) {
          UnitId = other.UnitId;
        }
        if (other.HasNickname) {
          Nickname = other.Nickname;
        }
        if (other.HasProfession) {
          Profession = other.Profession;
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_renameUnitInFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _renameUnitInFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasUnitId = input.ReadInt32(ref result.unitId_);
              break;
            }
            case 18: {
              result.hasNickname = input.ReadString(ref result.nickname_);
              break;
            }
            case 26: {
              result.hasProfession = input.ReadString(ref result.profession_);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasUnitId {
        get { return result.hasUnitId; }
      }
      public int UnitId {
        get { return result.UnitId; }
        set { SetUnitId(value); }
      }
      public Builder SetUnitId(int value) {
        PrepareBuilder();
        result.hasUnitId = true;
        result.unitId_ = value;
        return this;
      }
      public Builder ClearUnitId() {
        PrepareBuilder();
        result.hasUnitId = false;
        result.unitId_ = 0;
        return this;
      }
      
      public bool HasNickname {
        get { return result.hasNickname; }
      }
      public string Nickname {
        get { return result.Nickname; }
        set { SetNickname(value); }
      }
      public Builder SetNickname(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasNickname = true;
        result.nickname_ = value;
        return this;
      }
      public Builder ClearNickname() {
        PrepareBuilder();
        result.hasNickname = false;
        result.nickname_ = "";
        return this;
      }
      
      public bool HasProfession {
        get { return result.hasProfession; }
      }
      public string Profession {
        get { return result.Profession; }
        set { SetProfession(value); }
      }
      public Builder SetProfession(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasProfession = true;
        result.profession_ = value;
        return this;
      }
      public Builder ClearProfession() {
        PrepareBuilder();
        result.hasProfession = false;
        result.profession_ = "";
        return this;
      }
    }
    static RenameUnitIn() {
      object.ReferenceEquals(global::dfproto.Rename.Descriptor, null);
    }
  }
  
  #endregion
  
}

#endregion Designer generated code
