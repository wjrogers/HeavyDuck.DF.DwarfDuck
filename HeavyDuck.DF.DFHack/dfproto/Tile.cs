// Generated by ProtoGen, Version=2.4.1.473, Culture=neutral, PublicKeyToken=55f7125234beb589.  DO NOT EDIT!
#pragma warning disable 1591, 0612
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace dfproto {
  
  namespace Proto {
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public static partial class Tile {
    
      #region Extension registration
      public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
      }
      #endregion
      #region Static variables
      #endregion
      #region Extensions
      internal static readonly object Descriptor;
      static Tile() {
        Descriptor = null;
      }
      #endregion
      
    }
  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class Tile : pb::GeneratedMessageLite<Tile, Tile.Builder> {
    private Tile() { }
    private static readonly Tile defaultInstance = new Tile().MakeReadOnly();
    private static readonly string[] _tileFieldNames = new string[] { "flow_size", "liquid_type", "material_index", "material_type", "tile_material", "type", "x", "y" };
    private static readonly uint[] _tileFieldTags = new uint[] { 64, 56, 40, 48, 32, 24, 8, 16 };
    public static Tile DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Tile DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Tile ThisMessage {
      get { return this; }
    }
    
    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public static class Types {
      [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
      [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
      public enum TileType {
        EMPTY = 0,
        FLOOR = 1,
        BOULDER = 2,
        PEBBLES = 3,
        WALL = 4,
        FORTIFICATION = 5,
        STAIR_UP = 6,
        STAIR_DOWN = 7,
        STAIR_UPDOWN = 8,
        RAMP = 9,
        RAMP_TOP = 10,
        BROOK_BED = 11,
        BROOK_TOP = 12,
        TREE = 13,
        SAPLING = 14,
        SHRUB = 15,
        ENDLESS_PIT = 16,
      }
      
      [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
      [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
      public enum LiquidType {
        WATER = 0,
        MAGMA = 1,
      }
      
      [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
      [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
      public enum TileMaterialType {
        AIR = 0,
        SOIL = 1,
        STONE = 2,
        FEATURE = 3,
        LAVA_STONE = 4,
        MINERAL = 5,
        FROZEN_LIQUID = 6,
        CONSTRUCTION = 7,
        GRASS_LIGHT = 8,
        GRASS_DARK = 9,
        GRASS_DRY = 10,
        GRASS_DEAD = 11,
        HFS = 12,
        CAMPFIRE = 13,
        FIRE = 14,
        ASHES = 15,
        MAGMA_TYPE = 16,
        DRIFTWOOD = 17,
        POOL = 18,
        BROOK = 19,
        RIVER = 20,
      }
      
    }
    #endregion
    
    public const int XFieldNumber = 1;
    private bool hasX;
    private uint x_;
    public bool HasX {
      get { return hasX; }
    }
    [global::System.CLSCompliant(false)]
    public uint X {
      get { return x_; }
    }
    
    public const int YFieldNumber = 2;
    private bool hasY;
    private uint y_;
    public bool HasY {
      get { return hasY; }
    }
    [global::System.CLSCompliant(false)]
    public uint Y {
      get { return y_; }
    }
    
    public const int TypeFieldNumber = 3;
    private bool hasType;
    private global::dfproto.Tile.Types.TileType type_ = global::dfproto.Tile.Types.TileType.EMPTY;
    public bool HasType {
      get { return hasType; }
    }
    public global::dfproto.Tile.Types.TileType Type {
      get { return type_; }
    }
    
    public const int TileMaterialFieldNumber = 4;
    private bool hasTileMaterial;
    private global::dfproto.Tile.Types.TileMaterialType tileMaterial_ = global::dfproto.Tile.Types.TileMaterialType.AIR;
    public bool HasTileMaterial {
      get { return hasTileMaterial; }
    }
    public global::dfproto.Tile.Types.TileMaterialType TileMaterial {
      get { return tileMaterial_; }
    }
    
    public const int MaterialIndexFieldNumber = 5;
    private bool hasMaterialIndex;
    private uint materialIndex_;
    public bool HasMaterialIndex {
      get { return hasMaterialIndex; }
    }
    [global::System.CLSCompliant(false)]
    public uint MaterialIndex {
      get { return materialIndex_; }
    }
    
    public const int MaterialTypeFieldNumber = 6;
    private bool hasMaterialType;
    private uint materialType_;
    public bool HasMaterialType {
      get { return hasMaterialType; }
    }
    [global::System.CLSCompliant(false)]
    public uint MaterialType {
      get { return materialType_; }
    }
    
    public const int LiquidTypeFieldNumber = 7;
    private bool hasLiquidType;
    private global::dfproto.Tile.Types.LiquidType liquidType_ = global::dfproto.Tile.Types.LiquidType.WATER;
    public bool HasLiquidType {
      get { return hasLiquidType; }
    }
    public global::dfproto.Tile.Types.LiquidType LiquidType {
      get { return liquidType_; }
    }
    
    public const int FlowSizeFieldNumber = 8;
    private bool hasFlowSize;
    private uint flowSize_;
    public bool HasFlowSize {
      get { return hasFlowSize; }
    }
    [global::System.CLSCompliant(false)]
    public uint FlowSize {
      get { return flowSize_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasX) return false;
        if (!hasY) return false;
        if (!hasType) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _tileFieldNames;
      if (hasX) {
        output.WriteUInt32(1, field_names[6], X);
      }
      if (hasY) {
        output.WriteUInt32(2, field_names[7], Y);
      }
      if (hasType) {
        output.WriteEnum(3, field_names[5], (int) Type, Type);
      }
      if (hasTileMaterial) {
        output.WriteEnum(4, field_names[4], (int) TileMaterial, TileMaterial);
      }
      if (hasMaterialIndex) {
        output.WriteUInt32(5, field_names[2], MaterialIndex);
      }
      if (hasMaterialType) {
        output.WriteUInt32(6, field_names[3], MaterialType);
      }
      if (hasLiquidType) {
        output.WriteEnum(7, field_names[1], (int) LiquidType, LiquidType);
      }
      if (hasFlowSize) {
        output.WriteUInt32(8, field_names[0], FlowSize);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasX) {
          size += pb::CodedOutputStream.ComputeUInt32Size(1, X);
        }
        if (hasY) {
          size += pb::CodedOutputStream.ComputeUInt32Size(2, Y);
        }
        if (hasType) {
          size += pb::CodedOutputStream.ComputeEnumSize(3, (int) Type);
        }
        if (hasTileMaterial) {
          size += pb::CodedOutputStream.ComputeEnumSize(4, (int) TileMaterial);
        }
        if (hasMaterialIndex) {
          size += pb::CodedOutputStream.ComputeUInt32Size(5, MaterialIndex);
        }
        if (hasMaterialType) {
          size += pb::CodedOutputStream.ComputeUInt32Size(6, MaterialType);
        }
        if (hasLiquidType) {
          size += pb::CodedOutputStream.ComputeEnumSize(7, (int) LiquidType);
        }
        if (hasFlowSize) {
          size += pb::CodedOutputStream.ComputeUInt32Size(8, FlowSize);
        }
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasX) hash ^= x_.GetHashCode();
      if (hasY) hash ^= y_.GetHashCode();
      if (hasType) hash ^= type_.GetHashCode();
      if (hasTileMaterial) hash ^= tileMaterial_.GetHashCode();
      if (hasMaterialIndex) hash ^= materialIndex_.GetHashCode();
      if (hasMaterialType) hash ^= materialType_.GetHashCode();
      if (hasLiquidType) hash ^= liquidType_.GetHashCode();
      if (hasFlowSize) hash ^= flowSize_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      Tile other = obj as Tile;
      if (other == null) return false;
      if (hasX != other.hasX || (hasX && !x_.Equals(other.x_))) return false;
      if (hasY != other.hasY || (hasY && !y_.Equals(other.y_))) return false;
      if (hasType != other.hasType || (hasType && !type_.Equals(other.type_))) return false;
      if (hasTileMaterial != other.hasTileMaterial || (hasTileMaterial && !tileMaterial_.Equals(other.tileMaterial_))) return false;
      if (hasMaterialIndex != other.hasMaterialIndex || (hasMaterialIndex && !materialIndex_.Equals(other.materialIndex_))) return false;
      if (hasMaterialType != other.hasMaterialType || (hasMaterialType && !materialType_.Equals(other.materialType_))) return false;
      if (hasLiquidType != other.hasLiquidType || (hasLiquidType && !liquidType_.Equals(other.liquidType_))) return false;
      if (hasFlowSize != other.hasFlowSize || (hasFlowSize && !flowSize_.Equals(other.flowSize_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("x", hasX, x_, writer);
      PrintField("y", hasY, y_, writer);
      PrintField("type", hasType, type_, writer);
      PrintField("tile_material", hasTileMaterial, tileMaterial_, writer);
      PrintField("material_index", hasMaterialIndex, materialIndex_, writer);
      PrintField("material_type", hasMaterialType, materialType_, writer);
      PrintField("liquid_type", hasLiquidType, liquidType_, writer);
      PrintField("flow_size", hasFlowSize, flowSize_, writer);
    }
    #endregion
    
    public static Tile ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Tile ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Tile ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Tile ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Tile ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Tile ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Tile ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Tile ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Tile ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Tile ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Tile MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Tile prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilderLite<Tile, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Tile cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Tile result;
      
      private Tile PrepareBuilder() {
        if (resultIsReadOnly) {
          Tile original = result;
          result = new Tile();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Tile MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override Tile DefaultInstanceForType {
        get { return global::dfproto.Tile.DefaultInstance; }
      }
      
      public override Tile BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is Tile) {
          return MergeFrom((Tile) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Tile other) {
        if (other == global::dfproto.Tile.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasX) {
          X = other.X;
        }
        if (other.HasY) {
          Y = other.Y;
        }
        if (other.HasType) {
          Type = other.Type;
        }
        if (other.HasTileMaterial) {
          TileMaterial = other.TileMaterial;
        }
        if (other.HasMaterialIndex) {
          MaterialIndex = other.MaterialIndex;
        }
        if (other.HasMaterialType) {
          MaterialType = other.MaterialType;
        }
        if (other.HasLiquidType) {
          LiquidType = other.LiquidType;
        }
        if (other.HasFlowSize) {
          FlowSize = other.FlowSize;
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_tileFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _tileFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasX = input.ReadUInt32(ref result.x_);
              break;
            }
            case 16: {
              result.hasY = input.ReadUInt32(ref result.y_);
              break;
            }
            case 24: {
              object unknown;
              if(input.ReadEnum(ref result.type_, out unknown)) {
                result.hasType = true;
              } else if(unknown is int) {
              }
              break;
            }
            case 32: {
              object unknown;
              if(input.ReadEnum(ref result.tileMaterial_, out unknown)) {
                result.hasTileMaterial = true;
              } else if(unknown is int) {
              }
              break;
            }
            case 40: {
              result.hasMaterialIndex = input.ReadUInt32(ref result.materialIndex_);
              break;
            }
            case 48: {
              result.hasMaterialType = input.ReadUInt32(ref result.materialType_);
              break;
            }
            case 56: {
              object unknown;
              if(input.ReadEnum(ref result.liquidType_, out unknown)) {
                result.hasLiquidType = true;
              } else if(unknown is int) {
              }
              break;
            }
            case 64: {
              result.hasFlowSize = input.ReadUInt32(ref result.flowSize_);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasX {
        get { return result.hasX; }
      }
      [global::System.CLSCompliant(false)]
      public uint X {
        get { return result.X; }
        set { SetX(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetX(uint value) {
        PrepareBuilder();
        result.hasX = true;
        result.x_ = value;
        return this;
      }
      public Builder ClearX() {
        PrepareBuilder();
        result.hasX = false;
        result.x_ = 0;
        return this;
      }
      
      public bool HasY {
        get { return result.hasY; }
      }
      [global::System.CLSCompliant(false)]
      public uint Y {
        get { return result.Y; }
        set { SetY(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetY(uint value) {
        PrepareBuilder();
        result.hasY = true;
        result.y_ = value;
        return this;
      }
      public Builder ClearY() {
        PrepareBuilder();
        result.hasY = false;
        result.y_ = 0;
        return this;
      }
      
      public bool HasType {
       get { return result.hasType; }
      }
      public global::dfproto.Tile.Types.TileType Type {
        get { return result.Type; }
        set { SetType(value); }
      }
      public Builder SetType(global::dfproto.Tile.Types.TileType value) {
        PrepareBuilder();
        result.hasType = true;
        result.type_ = value;
        return this;
      }
      public Builder ClearType() {
        PrepareBuilder();
        result.hasType = false;
        result.type_ = global::dfproto.Tile.Types.TileType.EMPTY;
        return this;
      }
      
      public bool HasTileMaterial {
       get { return result.hasTileMaterial; }
      }
      public global::dfproto.Tile.Types.TileMaterialType TileMaterial {
        get { return result.TileMaterial; }
        set { SetTileMaterial(value); }
      }
      public Builder SetTileMaterial(global::dfproto.Tile.Types.TileMaterialType value) {
        PrepareBuilder();
        result.hasTileMaterial = true;
        result.tileMaterial_ = value;
        return this;
      }
      public Builder ClearTileMaterial() {
        PrepareBuilder();
        result.hasTileMaterial = false;
        result.tileMaterial_ = global::dfproto.Tile.Types.TileMaterialType.AIR;
        return this;
      }
      
      public bool HasMaterialIndex {
        get { return result.hasMaterialIndex; }
      }
      [global::System.CLSCompliant(false)]
      public uint MaterialIndex {
        get { return result.MaterialIndex; }
        set { SetMaterialIndex(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetMaterialIndex(uint value) {
        PrepareBuilder();
        result.hasMaterialIndex = true;
        result.materialIndex_ = value;
        return this;
      }
      public Builder ClearMaterialIndex() {
        PrepareBuilder();
        result.hasMaterialIndex = false;
        result.materialIndex_ = 0;
        return this;
      }
      
      public bool HasMaterialType {
        get { return result.hasMaterialType; }
      }
      [global::System.CLSCompliant(false)]
      public uint MaterialType {
        get { return result.MaterialType; }
        set { SetMaterialType(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetMaterialType(uint value) {
        PrepareBuilder();
        result.hasMaterialType = true;
        result.materialType_ = value;
        return this;
      }
      public Builder ClearMaterialType() {
        PrepareBuilder();
        result.hasMaterialType = false;
        result.materialType_ = 0;
        return this;
      }
      
      public bool HasLiquidType {
       get { return result.hasLiquidType; }
      }
      public global::dfproto.Tile.Types.LiquidType LiquidType {
        get { return result.LiquidType; }
        set { SetLiquidType(value); }
      }
      public Builder SetLiquidType(global::dfproto.Tile.Types.LiquidType value) {
        PrepareBuilder();
        result.hasLiquidType = true;
        result.liquidType_ = value;
        return this;
      }
      public Builder ClearLiquidType() {
        PrepareBuilder();
        result.hasLiquidType = false;
        result.liquidType_ = global::dfproto.Tile.Types.LiquidType.WATER;
        return this;
      }
      
      public bool HasFlowSize {
        get { return result.hasFlowSize; }
      }
      [global::System.CLSCompliant(false)]
      public uint FlowSize {
        get { return result.FlowSize; }
        set { SetFlowSize(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetFlowSize(uint value) {
        PrepareBuilder();
        result.hasFlowSize = true;
        result.flowSize_ = value;
        return this;
      }
      public Builder ClearFlowSize() {
        PrepareBuilder();
        result.hasFlowSize = false;
        result.flowSize_ = 0;
        return this;
      }
    }
    static Tile() {
      object.ReferenceEquals(global::dfproto.Proto.Tile.Descriptor, null);
    }
  }
  
  #endregion
  
}

#endregion Designer generated code
